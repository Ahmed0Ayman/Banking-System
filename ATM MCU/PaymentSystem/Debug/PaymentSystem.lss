
PaymentSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  000047d4  00004868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009d  00800182  00800182  0000498a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000498a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000049e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000620  00000000  00000000  00004a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008832  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002093  00000000  00000000  0000d876  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000427a  00000000  00000000  0000f909  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001270  00000000  00000000  00013b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022a2  00000000  00000000  00014df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004c28  00000000  00000000  00017096  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000550  00000000  00000000  0001bcbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__ctors_end>
       4:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__vector_1>
       8:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__vector_2>
       c:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__vector_3>
      10:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__bad_interrupt>
      14:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__bad_interrupt>
      18:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__bad_interrupt>
      1c:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__bad_interrupt>
      20:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__bad_interrupt>
      24:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__vector_9>
      28:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <__vector_10>
      2c:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__bad_interrupt>
      30:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__bad_interrupt>
      34:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__bad_interrupt>
      38:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__bad_interrupt>
      3c:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__bad_interrupt>
      40:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__vector_16>
      44:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__bad_interrupt>
      48:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__bad_interrupt>
      4c:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__bad_interrupt>
      50:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__bad_interrupt>
      54:	4b 0d       	add	r20, r11
      56:	4e 0d       	add	r20, r14
      58:	51 0d       	add	r21, r1
      5a:	54 0d       	add	r21, r4
      5c:	57 0d       	add	r21, r7
      5e:	88 0d       	add	r24, r8
      60:	96 0d       	add	r25, r6
      62:	99 0d       	add	r25, r9

00000064 <__trampolines_end>:
      64:	77 65       	ori	r23, 0x57	; 87
      66:	6c 63       	ori	r22, 0x3C	; 60
      68:	6f 6d       	ori	r22, 0xDF	; 223
      6a:	65 00       	.word	0x0065	; ????

0000006c <__c.3112>:
      6c:	53 77 69 74 63 68 69 6e 67 20 74 6f 20 4f 50 45     Switching to OPE
      7c:	52 41 54 49 4f 4e 20 6d 6f 64 65 00                 RATION mode.

00000088 <__c.3110>:
      88:	53 77 69 74 63 68 69 6e 67 20 74 6f 20 70 72 6f     Switching to pro
      98:	67 72 61 6d 6d 69 6e 67 20 6d 6f 64 65 00           gramming mode.

000000a6 <__c.3105>:
      a6:	57 72 6f 6e 67 20 50 61 73 73 77 6f 72 64 20 21     Wrong Password !
      b6:	21 21 00                                            !!.

000000b9 <__c.3103>:
      b9:	45 6e 74 65 72 20 59 6f 75 72 20 50 61 73 73 77     Enter Your Passw
      c9:	6f 72 64 20 3a 00                                   ord :.

000000cf <__c.3347>:
      cf:	4c 4f 43 4b 45 44 00                                LOCKED.

000000d6 <__c.3349>:
      d6:	50 6c 65 61 73 65 20 43 61 6c 6c 20 58 58 58 58     Please Call XXXX
	...

000000e7 <__c.3337>:
      e7:	43 41 52 44 00                                      CARD.

000000ec <__c.3339>:
      ec:	4e 4f 54 20 52 45 41 44 59 00                       NOT READY.

000000f6 <__c.3330>:
      f6:	54 68 61 6e 6b 20 59 6f 75 20 20 20 00              Thank You   .

00000103 <__c.3322>:
     103:	57 72 6f 6e 67 20 43 6f 6d 6d 61 6e 64 21 21 21     Wrong Command!!!
	...

00000114 <__c.3313>:
     114:	0a 00                                               ..

00000116 <__c.3311>:
     116:	45 4e 44 20 4f 46 20 53 45 4c 45 43 54 49 4f 4e     END OF SELECTION
     126:	20 21 21 21 00                                       !!!.

0000012b <__c.3309>:
     12b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     13b:	2a 2a 2a 2a 2a 2a 2a 2a 20 32 2d 20 45 78 69 74     ******** 2- Exit
     14b:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     15b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     16b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     17b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000188 <__c.3307>:
     188:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     198:	2a 2a 2a 2a 2a 2a 2a 2a 20 31 2d 20 54 72 79 20     ******** 1- Try 
     1a8:	61 6e 6f 74 68 65 72 20 54 72 61 6e 73 61 63 74     another Transact
     1b8:	69 6f 6e 20 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ion  ***********
     1c8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     1d8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

000001e5 <__c.3305>:
     1e5:	50 6c 65 61 73 65 20 43 68 6f 6f 73 65 20 6f 6e     Please Choose on
     1f5:	65 20 6f 66 20 74 68 65 20 66 6f 6c 6c 6f 77 69     e of the followi
     205:	6e 67 20 43 6f 6d 6d 61 6e 64 73 20 00              ng Commands .

00000212 <__c.3298>:
     212:	4e 6f 74 20 65 78 69 73 74 20 43 61 72 64 20 44     Not exist Card D
     222:	61 74 61 00                                         ata.

00000226 <__c.3296>:
     226:	54 68 69 73 20 63 61 72 64 20 49 73 20 45 78 69     This card Is Exi
     236:	73 74 00                                            st.

00000239 <__c.3164>:
     239:	4e 6f 74 20 65 78 69 73 74 20 43 61 72 64 20 44     Not exist Card D
     249:	61 74 61 00                                         ata.

0000024d <__c.3162>:
     24d:	54 68 69 73 20 63 61 72 64 20 49 73 20 45 78 69     This card Is Exi
     25d:	73 74 00                                            st.

00000260 <__c.3160>:
     260:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 43 61 72     Please enter Car
     270:	64 20 50 41 4e 00                                   d PAN.

00000276 <__c.3154>:
     276:	4e 6f 74 20 65 78 69 73 74 20 43 61 72 64 20 44     Not exist Card D
     286:	61 74 61 20 3a 00                                   ata :.

0000028c <__c.3152>:
     28c:	57 61 69 74 20 55 6e 74 69 6c 20 72 65 6d 6f 76     Wait Until remov
     29c:	65 20 74 68 69 73 20 43 61 72 64 20 44 61 74 61     e this Card Data
     2ac:	20 3a 00                                             :.

000002af <__c.3150>:
     2af:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 43 61 72     Please enter Car
     2bf:	64 20 50 41 4e 20 3a 00                             d PAN :.

000002c7 <__c.3144>:
     2c7:	74 68 69 73 20 63 61 72 64 20 61 6c 72 65 61 64     this card alread
     2d7:	79 20 65 78 69 73 74 20 21 21 21 00                 y exist !!!.

000002e3 <__c.3142>:
     2e3:	54 68 65 72 65 20 69 73 20 6e 6f 20 65 6e 6f 75     There is no enou
     2f3:	67 68 20 73 70 61 63 65 20 21 21 21 00              gh space !!!.

00000300 <__c.3140>:
     300:	47 72 65 61 74 20 61 20 6e 65 77 20 43 61 72 64     Great a new Card
     310:	20 61 64 64 65 64 20 73 75 63 63 65 73 73 66 75      added successfu
     320:	6c 6c 79 00                                         lly.

00000324 <__c.3138>:
     324:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 43 61 72     Please enter Car
     334:	64 20 54 6f 74 61 6c 20 42 61 6c 61 6e 63 65 20     d Total Balance 
	...

00000345 <__c.3136>:
     345:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 43 61 72     Please enter Car
     355:	64 20 50 49 4e 20 3a 20 20 00                       d PIN :  .

0000035f <__c.3134>:
     35f:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 43 61 72     Please enter Car
     36f:	64 20 50 41 4e 20 20 3a 20 20 00                    d PAN  :  .

0000037a <__c.3132>:
     37a:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 43 61 72     Please enter Car
     38a:	64 20 48 6f 6c 64 65 72 20 4e 61 6d 65 20 20 00     d Holder Name  .

0000039a <__c.3125>:
     39a:	0a 00                                               ..

0000039c <__c.3123>:
     39c:	20 0a 00                                             ..

0000039f <__c.3121>:
     39f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3af:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3bf:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3cf:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3df:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3ef:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

000003fc <__c.3119>:
     3fc:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     40c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     41c:	2a 2a 2a 2a 2a 2a 20 45 4e 44 20 4f 46 20 53 45     ****** END OF SE
     42c:	4c 45 43 54 49 4f 4e 20 21 21 21 2a 2a 2a 2a 2a     LECTION !!!*****
     43c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     44c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000459 <__c.3117>:
     459:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     469:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     479:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     489:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     499:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     4a9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

000004b6 <__c.3115>:
     4b6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     4c6:	2a 2a 2a 2a 2a 2a 2a 2a 20 38 2d 20 45 78 69 74     ******** 8- Exit
     4d6:	20 50 72 6f 67 72 61 6d 6d 69 6e 67 20 6d 6f 64      Programming mod
     4e6:	65 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     e **************
     4f6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     506:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000513 <__c.3113>:
     513:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     523:	2a 2a 2a 2a 2a 2a 2a 2a 20 37 2d 20 41 64 6d 69     ******** 7- Admi
     533:	6e 20 4d 6f 64 69 66 79 20 44 61 74 61 20 2a 2a     n Modify Data **
     543:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     553:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     563:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000570 <__c.3111>:
     570:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     580:	2a 2a 2a 2a 2a 2a 2a 2a 20 36 2d 20 52 65 73 65     ******** 6- Rese
     590:	74 20 44 61 74 61 20 42 61 73 65 20 2a 2a 2a 2a     t Data Base ****
     5a0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     5b0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     5c0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

000005cd <__c.3109>:
     5cd:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     5dd:	2a 2a 2a 2a 2a 2a 2a 2a 20 35 2d 20 54 6f 74 61     ******** 5- Tota
     5ed:	6c 20 4e 55 4d 20 6f 66 20 43 75 72 72 65 6e 74     l NUM of Current
     5fd:	20 43 41 52 44 73 20 2a 2a 2a 2a 2a 2a 2a 2a 2a      CARDs *********
     60d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     61d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

0000062a <__c.3107>:
     62a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     63a:	2a 2a 2a 2a 2a 2a 2a 2a 20 34 2d 20 53 65 61 72     ******** 4- Sear
     64a:	63 68 20 57 69 74 68 20 43 61 72 64 20 48 6f 6c     ch With Card Hol
     65a:	64 65 72 20 4e 61 6d 65 20 2a 2a 2a 2a 2a 2a 2a     der Name *******
     66a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     67a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000687 <__c.3105>:
     687:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     697:	2a 2a 2a 2a 2a 2a 2a 2a 20 33 2d 20 53 65 61 72     ******** 3- Sear
     6a7:	63 68 20 46 6f 72 20 43 61 72 64 20 57 69 74 68     ch For Card With
     6b7:	20 50 41 4e 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      PAN ***********
     6c7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     6d7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

000006e4 <__c.3103>:
     6e4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     6f4:	2a 2a 2a 2a 2a 2a 2a 2a 20 32 2d 20 52 65 6d 6f     ******** 2- Remo
     704:	76 65 20 43 61 72 64 20 20 20 2a 2a 2a 2a 2a 2a     ve Card   ******
     714:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     724:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     734:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000741 <__c.3101>:
     741:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     751:	2a 2a 2a 2a 2a 2a 2a 2a 20 31 2d 20 41 64 64 20     ******** 1- Add 
     761:	43 61 72 64 09 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     Card. **********
     771:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     781:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     791:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

0000079e <__c.3099>:
     79e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     7ae:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     7be:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     7ce:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     7de:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     7ee:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

000007fb <__c.3097>:
     7fb:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     80b:	2a 2a 2a 2a 2a 2a 2a 20 50 6c 65 61 73 65 20 43     ******* Please C
     81b:	68 6f 6f 73 65 20 6f 6e 65 20 6f 66 20 74 68 65     hoose one of the
     82b:	20 66 6f 6c 6c 6f 77 69 6e 67 20 43 6f 6d 6d 61      following Comma
     83b:	6e 64 73 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     nds ************
     84b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000858 <__c.3095>:
     858:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     868:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     878:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     888:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     898:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     8a8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

000008b5 <__c.3272>:
     8b5:	57 72 6f 6e 67 20 63 68 6f 73 65 20 50 6c 65 61     Wrong chose Plea
     8c5:	73 65 20 54 72 79 20 61 67 61 69 6e 00              se Try again.

000008d2 <__c.3269>:
     8d2:	77 61 69 74 20 21 21 21 00                          wait !!!.

000008db <__c.3265>:
     8db:	70 72 6f 62 6c 65 6d 20 57 69 74 68 20 44 61 74     problem With Dat
     8eb:	61 20 42 61 73 65 20 43 61 6c 6c 20 53 65 72 76     a Base Call Serv
     8fb:	69 63 65 20 53 75 70 70 6f 72 74 00                 ice Support.

00000907 <__c.3263>:
     907:	44 65 6c 65 74 65 64 20 73 75 63 63 65 73 73 66     Deleted successf
     917:	75 6c 6c 79 00                                      ully.

0000091c <__c.3260>:
     91c:	20 0a 00                                             ..

0000091f <__c.3258>:
     91f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     92f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     93f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     94f:	2a 2a 2a 2a 0a 00                                   ****..

00000955 <__c.3256>:
     955:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 0a 00           *********** ..

00000963 <__c.3254>:
     963:	2a 2a 2a 2a 2a 20 54 68 65 20 4e 75 6d 62 65 72     ***** The Number
     973:	20 6f 66 20 49 6e 73 74 61 6c 6c 65 64 20 43 61      of Installed Ca
     983:	72 64 73 20 69 73 20 3a 00                          rds is :.

0000098c <__c.3252>:
     98c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     99c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     9ac:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     9bc:	2a 2a 2a 2a 0a 00                                   ****..

000009c2 <__c.3235>:
     9c2:	45 58 49 54 20 41 64 6d 69 6e 20 4d 6f 64 69 66     EXIT Admin Modif
     9d2:	79 69 6e 67 20 6d 6f 64 65 20 73 75 63 63 65 73     ying mode succes
     9e2:	73 66 75 6c 6c 79 00                                sfully.

000009e9 <__c.3232>:
     9e9:	4d 61 78 69 6d 75 6d 20 44 61 69 6c 79 20 41 6d     Maximum Daily Am
     9f9:	6f 75 6e 74 20 44 6f 65 73 20 4e 6f 74 20 53 65     ount Does Not Se
     a09:	74 20 53 75 63 63 65 73 73 66 75 6c 6c 79 20 21     t Successfully !
     a19:	21 21 21 00                                         !!!.

00000a1d <__c.3230>:
     a1d:	4d 61 78 69 6d 75 6d 20 44 61 69 6c 79 20 41 6d     Maximum Daily Am
     a2d:	6f 75 6e 74 20 53 75 63 63 65 73 73 66 75 6c 6c     ount Successfull
     a3d:	79 00                                               y.

00000a3f <__c.3228>:
     a3f:	20 0a 00                                             ..

00000a42 <__c.3226>:
     a42:	50 6c 65 61 73 65 20 45 6e 74 65 72 20 74 68 65     Please Enter the
     a52:	20 4d 41 78 20 44 61 69 6c 79 20 41 6d 6f 75 6e      MAx Daily Amoun
     a62:	74 00                                               t.

00000a64 <__c.3223>:
     a64:	45 72 72 6f 72 20 44 6f 65 73 20 4e 6f 74 20 43     Error Does Not C
     a74:	6c 65 61 72 65 64 20 53 75 63 63 65 73 73 66 75     leared Successfu
     a84:	6c 6c 79 20 21 21 21 21 00                          lly !!!!.

00000a8d <__c.3221>:
     a8d:	45 72 72 6f 72 20 43 6c 65 61 72 65 64 20 53 75     Error Cleared Su
     a9d:	63 63 65 73 73 66 75 6c 6c 79 00                    ccessfully.

00000aa8 <__c.3218>:
     aa8:	50 6c 65 61 73 65 20 54 72 79 20 41 67 61 69 6e     Please Try Again
	...

00000ab9 <__c.3216>:
     ab9:	41 64 6d 69 6e 20 44 61 74 61 20 53 74 6f 72 65     Admin Data Store
     ac9:	64 20 53 75 63 63 65 73 73 66 75 6c 6c 79 00        d Successfully.

00000ad8 <__c.3214>:
     ad8:	77 61 69 74 20 21 21 21 20 20 0a 00                 wait !!!  ..

00000ae4 <__c.3212>:
     ae4:	45 6e 74 65 72 20 61 20 6e 65 77 20 61 64 6d 69     Enter a new admi
     af4:	6e 20 4d 41 58 20 54 65 6d 70 20 76 61 6c 75 65     n MAX Temp value
     b04:	3a 20 00                                            : .

00000b07 <__c.3208>:
     b07:	50 6c 65 61 73 65 20 54 72 79 20 41 67 61 69 6e     Please Try Again
     b17:	20 00                                                .

00000b19 <__c.3206>:
     b19:	41 64 6d 69 6e 20 44 61 74 61 20 53 74 6f 72 65     Admin Data Store
     b29:	64 20 53 75 63 63 65 73 73 66 75 6c 6c 79 00        d Successfully.

00000b38 <__c.3204>:
     b38:	77 61 69 74 20 21 21 21 20 20 0a 00                 wait !!!  ..

00000b44 <__c.3202>:
     b44:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 61 20 6e     Please enter a n
     b54:	65 77 20 61 64 6d 69 6e 20 70 61 73 73 20 3a 00     ew admin pass :.

00000b64 <__c.3200>:
     b64:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 61 20 6e     Please enter a n
     b74:	65 77 20 61 64 6d 69 6e 20 6e 61 6d 65 20 3a 00     ew admin name :.

00000b84 <__c.3197>:
     b84:	20 0a 00                                             ..

00000b87 <__c.3195>:
     b87:	45 4e 44 20 4f 46 20 53 45 4c 45 43 54 49 4f 4e     END OF SELECTION
     b97:	20 21 21 21 00                                       !!!.

00000b9c <__c.3193>:
     b9c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     bac:	2a 2a 2a 2a 2a 2a 2a 2a 20 35 2d 20 45 78 69 74     ******** 5- Exit
     bbc:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     bcc:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     bdc:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     bec:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000bf9 <__c.3191>:
     bf9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     c09:	2a 2a 2a 2a 2a 2a 2a 2a 20 34 2d 20 53 65 74 20     ******** 4- Set 
     c19:	4d 61 78 20 44 61 69 6c 79 20 41 6d 6f 75 6e 74     Max Daily Amount
     c29:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     c39:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     c49:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000c56 <__c.3189>:
     c56:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     c66:	2a 2a 2a 2a 2a 2a 2a 2a 20 33 2d 20 43 6c 65 61     ******** 3- Clea
     c76:	72 20 45 72 72 6f 72 20 46 6c 61 67 20 2a 2a 2a     r Error Flag ***
     c86:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     c96:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     ca6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000cb3 <__c.3187>:
     cb3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     cc3:	2a 2a 2a 2a 2a 2a 2a 2a 20 32 2d 20 53 65 74 20     ******** 2- Set 
     cd3:	41 64 6d 69 6e 20 4d 61 78 69 6d 75 6d 20 54 65     Admin Maximum Te
     ce3:	6d 70 65 72 61 74 75 72 65 20 2a 2a 2a 2a 2a 2a     mperature ******
     cf3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     d03:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000d10 <__c.3185>:
     d10:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     d20:	2a 2a 2a 2a 2a 2a 2a 2a 20 31 2d 20 53 65 74 20     ******** 1- Set 
     d30:	41 64 6d 69 6e 20 50 61 73 73 77 6f 72 64 20 61     Admin Password a
     d40:	6e 64 20 4e 61 6d 65 20 2a 2a 2a 2a 2a 2a 2a 2a     nd Name ********
     d50:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     d60:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000d6d <__c.3183>:
     d6d:	50 6c 65 61 73 65 20 43 68 6f 6f 73 65 20 6f 6e     Please Choose on
     d7d:	65 20 6f 66 20 74 68 65 20 66 6f 6c 6c 6f 77 69     e of the followi
     d8d:	6e 67 20 43 6f 6d 6d 61 6e 64 73 20 00              ng Commands .

00000d9a <__c.3174>:
     d9a:	54 68 69 73 20 63 61 72 64 20 49 73 20 6e 6f 74     This card Is not
     daa:	20 45 78 69 73 74 00                                 Exist.

00000db1 <__c.3172>:
     db1:	54 68 69 73 20 63 61 72 64 20 20 49 73 20 45 78     This card  Is Ex
     dc1:	69 73 74 00                                         ist.

00000dc5 <__c.3170>:
     dc5:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 43 61 72     Please enter Car
     dd5:	64 20 4e 61 6d 65 3a 00                             d Name:.

00000ddd <LCD_StrF>:
     ddd:	57 45 4c 43 4f 4d 45 20 4f 50 45 52 41 54 45 00     WELCOME OPERATE.
     ded:	00 00 00 00 4d 4f 44 45 00 00 00 00 00 00 00 00     ....MODE........
	...
     e05:	50 4c 45 41 53 45 20 45 4e 54 45 52 20 00 00 00     PLEASE ENTER ...
     e15:	00 00 00 00 45 4e 54 45 52 20 54 48 45 00 00 00     ....ENTER THE...
	...
     e2d:	54 52 41 4e 53 41 43 20 41 4d 4f 55 4e 54 20 00     TRANSAC AMOUNT .
     e3d:	00 00 00 00 54 52 41 4e 53 41 43 54 49 4f 4e 20     ....TRANSACTION 
     e4d:	20 3a 20 00 00 00 00 00 57 72 6f 6e 67 20 00 00      : .....Wrong ..
	...
     e69:	54 72 61 6e 73 61 63 74 69 6f 6e 00 00 00 00 00     Transaction.....
     e79:	00 00 00 00 45 52 52 4f 52 5f 54 65 6d 70 00 00     ....ERROR_Temp..
	...
     e91:	43 41 4c 4c 5f 58 58 58 58 58 58 00 00 00 00 00     CALL_XXXXXX.....
     ea1:	00 00 00 00 44 72 61 67 6f 6e 73 00 00 00 00 00     ....Dragons.....
	...
     eb9:	41 54 4d 20 53 79 73 74 65 6d 00 00 00 00 00 00     ATM System......
     ec9:	00 00 00 00 65 6e 74 65 72 20 50 72 6f 67 72 61     ....enter Progra
     ed9:	6d 00 00 00 00 00 00 00 4d 6f 64 65 00 00 00 00     m.......Mode....
	...
     ef5:	50 72 6f 67 72 61 6d 20 4d 6f 64 45 00 00 00 00     Program ModE....
     f05:	00 00 00 00 43 41 52 44 00 00 00 00 00 00 00 00     ....CARD........
	...
     f1d:	4e 4f 54 20 52 45 41 44 59 00 00 00 00 00 00 00     NOT READY.......
     f2d:	00 00 00 00 54 48 41 4e 4b 00 00 00 00 00 00 00     ....THANK.......
	...
     f45:	59 4f 55 00 00 00 00 00 00 00 00 00 00 00 00 00     YOU.............
     f55:	00 00 00 00 53 75 63 63 65 73 73 00 00 00 00 00     ....Success.....
	...

00000f6d <__c.3084>:
     f6d:	48 69 6e 74 21 21 21 21 20 45 6d 70 74 79 20 44     Hint!!!! Empty D
     f7d:	61 74 61 42 61 73 65 20 0a 00                       ataBase ..

00000f87 <__c.2151>:
     f87:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     f97:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     fa7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     fb7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     fc7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     fd7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000fe4 <__c.2149>:
     fe4:	0a 00                                               ..

00000fe6 <__c.2147>:
     fe6:	0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     .               
     ff6:	20 00                                                .

00000ff8 <__c.2145>:
     ff8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1008:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1018:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1028:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1038:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1048:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 20 20 20 20     ***********.    
    1058:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00001065 <__c.2139>:
    1065:	0a 00                                               ..

00001067 <__c.2137>:
    1067:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1077:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1087:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1097:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    10a7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    10b7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

000010c4 <__c.2135>:
    10c4:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    10d4:	0a 00                                               ..

000010d6 <__c.2133>:
    10d6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    10e6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    10f6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1106:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1116:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1126:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 20 20 20 20     ***********.    
    1136:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00001143 <__c.2131>:
    1143:	0a 00 00                                            ...

00001146 <__ctors_end>:
    1146:	11 24       	eor	r1, r1
    1148:	1f be       	out	0x3f, r1	; 63
    114a:	cf e5       	ldi	r28, 0x5F	; 95
    114c:	d8 e0       	ldi	r29, 0x08	; 8
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	cd bf       	out	0x3d, r28	; 61

00001152 <__do_copy_data>:
    1152:	11 e0       	ldi	r17, 0x01	; 1
    1154:	a0 e6       	ldi	r26, 0x60	; 96
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e4 ed       	ldi	r30, 0xD4	; 212
    115a:	f7 e4       	ldi	r31, 0x47	; 71
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <__do_copy_data+0x10>
    115e:	05 90       	lpm	r0, Z+
    1160:	0d 92       	st	X+, r0
    1162:	a2 38       	cpi	r26, 0x82	; 130
    1164:	b1 07       	cpc	r27, r17
    1166:	d9 f7       	brne	.-10     	; 0x115e <__do_copy_data+0xc>

00001168 <__do_clear_bss>:
    1168:	22 e0       	ldi	r18, 0x02	; 2
    116a:	a2 e8       	ldi	r26, 0x82	; 130
    116c:	b1 e0       	ldi	r27, 0x01	; 1
    116e:	01 c0       	rjmp	.+2      	; 0x1172 <.do_clear_bss_start>

00001170 <.do_clear_bss_loop>:
    1170:	1d 92       	st	X+, r1

00001172 <.do_clear_bss_start>:
    1172:	af 31       	cpi	r26, 0x1F	; 31
    1174:	b2 07       	cpc	r27, r18
    1176:	e1 f7       	brne	.-8      	; 0x1170 <.do_clear_bss_loop>
    1178:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <main>
    117c:	0c 94 e8 23 	jmp	0x47d0	; 0x47d0 <_exit>

00001180 <__bad_interrupt>:
    1180:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001184 <Tim_1_CallBAck>:




void INT0_CALLBACK(void)
{
    1184:	08 95       	ret

00001186 <usart_putchar_printf>:
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	00 d0       	rcall	.+0      	; 0x118c <usart_putchar_printf+0x6>
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	9d e0       	ldi	r25, 0x0D	; 13
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	8a 30       	cpi	r24, 0x0A	; 10
    1198:	49 f4       	brne	.+18     	; 0x11ac <usart_putchar_printf+0x26>
    119a:	41 e0       	ldi	r20, 0x01	; 1
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	be 01       	movw	r22, r28
    11a0:	6e 5f       	subi	r22, 0xFE	; 254
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	87 e7       	ldi	r24, 0x77	; 119
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <HAL_UART_TRANSMIT>
    11ac:	41 e0       	ldi	r20, 0x01	; 1
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	be 01       	movw	r22, r28
    11b2:	6f 5f       	subi	r22, 0xFF	; 255
    11b4:	7f 4f       	sbci	r23, 0xFF	; 255
    11b6:	87 e7       	ldi	r24, 0x77	; 119
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <HAL_UART_TRANSMIT>
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	08 95       	ret

000011cc <App_Get_Command>:
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	6e 97       	sbiw	r28, 0x1e	; 30
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	8a e0       	ldi	r24, 0x0A	; 10
    11e6:	fe 01       	movw	r30, r28
    11e8:	31 96       	adiw	r30, 0x01	; 1
    11ea:	df 01       	movw	r26, r30
    11ec:	98 2f       	mov	r25, r24
    11ee:	1d 92       	st	X+, r1
    11f0:	9a 95       	dec	r25
    11f2:	e9 f7       	brne	.-6      	; 0x11ee <App_Get_Command+0x22>
    11f4:	3a 96       	adiw	r30, 0x0a	; 10
    11f6:	df 01       	movw	r26, r30
    11f8:	98 2f       	mov	r25, r24
    11fa:	1d 92       	st	X+, r1
    11fc:	9a 95       	dec	r25
    11fe:	e9 f7       	brne	.-6      	; 0x11fa <App_Get_Command+0x2e>
    1200:	3a 96       	adiw	r30, 0x0a	; 10
    1202:	df 01       	movw	r26, r30
    1204:	1d 92       	st	X+, r1
    1206:	8a 95       	dec	r24
    1208:	e9 f7       	brne	.-6      	; 0x1204 <App_Get_Command+0x38>
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	81 e7       	ldi	r24, 0x71	; 113
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	0e 94 82 16 	call	0x2d04	; 0x2d04 <Button_Read>
    1214:	81 11       	cpse	r24, r1
    1216:	3c c0       	rjmp	.+120    	; 0x1290 <App_Get_Command+0xc4>
    1218:	8e 01       	movw	r16, r28
    121a:	05 5f       	subi	r16, 0xF5	; 245
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	be 01       	movw	r22, r28
    1220:	6f 5f       	subi	r22, 0xFF	; 255
    1222:	7f 4f       	sbci	r23, 0xFF	; 255
    1224:	c8 01       	movw	r24, r16
    1226:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <SERVER_ADMIN_Get_Pass>
    122a:	1f 93       	push	r17
    122c:	0f 93       	push	r16
    122e:	86 e0       	ldi	r24, 0x06	; 6
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	9f 93       	push	r25
    1234:	8f 93       	push	r24
    1236:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <printf>
    123a:	89 eb       	ldi	r24, 0xB9	; 185
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    1242:	ce 01       	movw	r24, r28
    1244:	45 96       	adiw	r24, 0x15	; 21
    1246:	2a e0       	ldi	r18, 0x0A	; 10
    1248:	fc 01       	movw	r30, r24
    124a:	11 92       	st	Z+, r1
    124c:	2a 95       	dec	r18
    124e:	e9 f7       	brne	.-6      	; 0x124a <App_Get_Command+0x7e>
    1250:	6a e0       	ldi	r22, 0x0A	; 10
    1252:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <ATM_Terminal_GetString>
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	09 c0       	rjmp	.+18     	; 0x1272 <App_Get_Command+0xa6>
    1260:	86 ea       	ldi	r24, 0xA6	; 166
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    1268:	6a e0       	ldi	r22, 0x0A	; 10
    126a:	ce 01       	movw	r24, r28
    126c:	45 96       	adiw	r24, 0x15	; 21
    126e:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <ATM_Terminal_GetString>
    1272:	be 01       	movw	r22, r28
    1274:	6b 5e       	subi	r22, 0xEB	; 235
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	ce 01       	movw	r24, r28
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	0e 94 93 20 	call	0x4126	; 0x4126 <strcmp>
    1280:	89 2b       	or	r24, r25
    1282:	71 f7       	brne	.-36     	; 0x1260 <App_Get_Command+0x94>
    1284:	88 e8       	ldi	r24, 0x88	; 136
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	05 c0       	rjmp	.+10     	; 0x129a <App_Get_Command+0xce>
    1290:	8c e6       	ldi	r24, 0x6C	; 108
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	6e 96       	adiw	r28, 0x1e	; 30
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	08 95       	ret

000012b0 <APP_UPdate>:
    12b0:	89 eb       	ldi	r24, 0xB9	; 185
    12b2:	9e e0       	ldi	r25, 0x0E	; 14
    12b4:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    12b8:	ac 01       	movw	r20, r24
    12ba:	61 e0       	ldi	r22, 0x01	; 1
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
    12c2:	8d ec       	ldi	r24, 0xCD	; 205
    12c4:	9e e0       	ldi	r25, 0x0E	; 14
    12c6:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    12ca:	ac 01       	movw	r20, r24
    12cc:	61 e0       	ldi	r22, 0x01	; 1
    12ce:	82 e0       	ldi	r24, 0x02	; 2
    12d0:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
    12d4:	6d ec       	ldi	r22, 0xCD	; 205
    12d6:	7e e0       	ldi	r23, 0x0E	; 14
    12d8:	89 eb       	ldi	r24, 0xB9	; 185
    12da:	9e e0       	ldi	r25, 0x0E	; 14
    12dc:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <String_F_PrintTwoLines>
    12e0:	2f ef       	ldi	r18, 0xFF	; 255
    12e2:	8d e3       	ldi	r24, 0x3D	; 61
    12e4:	99 e4       	ldi	r25, 0x49	; 73
    12e6:	21 50       	subi	r18, 0x01	; 1
    12e8:	80 40       	sbci	r24, 0x00	; 0
    12ea:	90 40       	sbci	r25, 0x00	; 0
    12ec:	e1 f7       	brne	.-8      	; 0x12e6 <APP_UPdate+0x36>
    12ee:	00 c0       	rjmp	.+0      	; 0x12f0 <APP_UPdate+0x40>
    12f0:	00 00       	nop
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
    12f8:	4c e1       	ldi	r20, 0x1C	; 28
    12fa:	51 e0       	ldi	r21, 0x01	; 1
    12fc:	65 e0       	ldi	r22, 0x05	; 5
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
    1304:	84 e6       	ldi	r24, 0x64	; 100
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    130c:	2f ef       	ldi	r18, 0xFF	; 255
    130e:	8d e3       	ldi	r24, 0x3D	; 61
    1310:	99 e4       	ldi	r25, 0x49	; 73
    1312:	21 50       	subi	r18, 0x01	; 1
    1314:	80 40       	sbci	r24, 0x00	; 0
    1316:	90 40       	sbci	r25, 0x00	; 0
    1318:	e1 f7       	brne	.-8      	; 0x1312 <APP_UPdate+0x62>
    131a:	00 c0       	rjmp	.+0      	; 0x131c <APP_UPdate+0x6c>
    131c:	00 00       	nop
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
    1324:	0e 94 e6 08 	call	0x11cc	; 0x11cc <App_Get_Command>
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	11 f4       	brne	.+4      	; 0x1330 <APP_UPdate+0x80>
    132c:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <ATM_Programming_mode>
    1330:	78 94       	sei
    1332:	87 e6       	ldi	r24, 0x67	; 103
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	0e 94 83 1a 	call	0x3506	; 0x3506 <TIM_Start>
    133a:	0e 94 0c 12 	call	0x2418	; 0x2418 <SERVER_ADMIN_Error_Get>
    133e:	81 11       	cpse	r24, r1
    1340:	03 c0       	rjmp	.+6      	; 0x1348 <APP_UPdate+0x98>
    1342:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <ATM_Operation_mode>
    1346:	f4 cf       	rjmp	.-24     	; 0x1330 <APP_UPdate+0x80>
    1348:	0e 94 06 10 	call	0x200c	; 0x200c <ATM_Lock_Fun>
    134c:	f1 cf       	rjmp	.-30     	; 0x1330 <APP_UPdate+0x80>

0000134e <ATM_Buttons_GPIO_Init>:
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	00 d0       	rcall	.+0      	; 0x1354 <ATM_Buttons_GPIO_Init+0x6>
    1354:	1f 92       	push	r1
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	80 e8       	ldi	r24, 0x80	; 128
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	8a 83       	std	Y+2, r24	; 0x02
    1362:	8b 83       	std	Y+3, r24	; 0x03
    1364:	be 01       	movw	r22, r28
    1366:	6f 5f       	subi	r22, 0xFF	; 255
    1368:	7f 4f       	sbci	r23, 0xFF	; 255
    136a:	80 e3       	ldi	r24, 0x30	; 48
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	0e 94 3a 18 	call	0x3074	; 0x3074 <HAL_GPIO_Pin_Init>
    1372:	88 e0       	ldi	r24, 0x08	; 8
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	be 01       	movw	r22, r28
    1378:	6f 5f       	subi	r22, 0xFF	; 255
    137a:	7f 4f       	sbci	r23, 0xFF	; 255
    137c:	80 e3       	ldi	r24, 0x30	; 48
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 3a 18 	call	0x3074	; 0x3074 <HAL_GPIO_Pin_Init>
    1384:	81 e7       	ldi	r24, 0x71	; 113
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <Button_Init>
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <APP_Init>:
    1398:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <Motor_Init>
    139c:	0e 94 10 15 	call	0x2a20	; 0x2a20 <Motor_Start>
    13a0:	8b eb       	ldi	r24, 0xBB	; 187
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 43 12 	call	0x2486	; 0x2486 <KeyPad_Initialization>
    13a8:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_Initializaion>
    13ac:	86 e9       	ldi	r24, 0x96	; 150
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 62 18 	call	0x30c4	; 0x30c4 <I2C_Init>
    13b4:	0e 94 88 15 	call	0x2b10	; 0x2b10 <EEPROM_Init>
    13b8:	88 e8       	ldi	r24, 0x88	; 136
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 47 19 	call	0x328e	; 0x328e <HAL_SPI_Init>
    13c0:	87 e7       	ldi	r24, 0x77	; 119
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 b7 1b 	call	0x376e	; 0x376e <HAL_UART_Init>
    13c8:	0e 94 a7 09 	call	0x134e	; 0x134e <ATM_Buttons_GPIO_Init>
    13cc:	87 e6       	ldi	r24, 0x67	; 103
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 c8 19 	call	0x3390	; 0x3390 <TIM_NormalModeInit>
    13d4:	62 ec       	ldi	r22, 0xC2	; 194
    13d6:	78 e0       	ldi	r23, 0x08	; 8
    13d8:	84 e0       	ldi	r24, 0x04	; 4
    13da:	0e 94 6d 1b 	call	0x36da	; 0x36da <TIM_CallBack_FuctionSet>
    13de:	80 e6       	ldi	r24, 0x60	; 96
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <ADC_Init>
    13e6:	f8 94       	cli
    13e8:	89 b7       	in	r24, 0x39	; 57
    13ea:	84 60       	ori	r24, 0x04	; 4
    13ec:	89 bf       	out	0x39, r24	; 57
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	80 e6       	ldi	r24, 0x60	; 96
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <ADC_Get_Value_IT>
    13f8:	8b ee       	ldi	r24, 0xEB	; 235
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	0e 94 c6 11 	call	0x238c	; 0x238c <SERVER_ADMIN_Get_Temp>
    1400:	8b ee       	ldi	r24, 0xEB	; 235
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	0e 94 67 20 	call	0x40ce	; 0x40ce <atoi>
    1408:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <__data_end+0x1>
    140c:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	31 f4       	brne	.+12     	; 0x1420 <APP_Init+0x88>
    1414:	82 e3       	ldi	r24, 0x32	; 50
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <__data_end+0x1>
    141c:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
    1420:	8f e9       	ldi	r24, 0x9F	; 159
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <__iob+0x3>
    1428:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <__iob+0x2>
    142c:	08 95       	ret

0000142e <__vector_9>:
	
	
}

ISR(TIMER1_OVF_vect)
{
    142e:	1f 92       	push	r1
    1430:	0f 92       	push	r0
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	0f 92       	push	r0
    1436:	11 24       	eor	r1, r1
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	0f 90       	pop	r0
    143e:	1f 90       	pop	r1
    1440:	18 95       	reti

00001442 <ATM_Get_UserCommand>:




uint8_t ATM_Get_UserCommand(void)
{
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	1f 92       	push	r1
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
	uint8_t command = 0; 	
    144c:	19 82       	std	Y+1, r1	; 0x01
	printf_P(PSTR("*******************************************************************************************\n"	));
    144e:	88 e5       	ldi	r24, 0x58	; 88
    1450:	98 e0       	ldi	r25, 0x08	; 8
    1452:	9f 93       	push	r25
    1454:	8f 93       	push	r24
    1456:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(PSTR("*********************** Please Choose one of the following Commands ***********************\n" ));
    145a:	8b ef       	ldi	r24, 0xFB	; 251
    145c:	97 e0       	ldi	r25, 0x07	; 7
    145e:	9f 93       	push	r25
    1460:	8f 93       	push	r24
    1462:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(PSTR("*******************************************************************************************\n" ));
    1466:	8e e9       	ldi	r24, 0x9E	; 158
    1468:	97 e0       	ldi	r25, 0x07	; 7
    146a:	9f 93       	push	r25
    146c:	8f 93       	push	r24
    146e:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(PSTR("************************ 1- Add Card	 *****************************************************\n" ));
    1472:	81 e4       	ldi	r24, 0x41	; 65
    1474:	97 e0       	ldi	r25, 0x07	; 7
    1476:	9f 93       	push	r25
    1478:	8f 93       	push	r24
    147a:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(PSTR("************************ 2- Remove Card   *************************************************\n" ));
    147e:	84 ee       	ldi	r24, 0xE4	; 228
    1480:	96 e0       	ldi	r25, 0x06	; 6
    1482:	9f 93       	push	r25
    1484:	8f 93       	push	r24
    1486:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(PSTR("************************ 3- Search For Card With PAN **************************************\n" ));
    148a:	87 e8       	ldi	r24, 0x87	; 135
    148c:	96 e0       	ldi	r25, 0x06	; 6
    148e:	9f 93       	push	r25
    1490:	8f 93       	push	r24
    1492:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(PSTR("************************ 4- Search With Card Holder Name **********************************\n" ));
    1496:	8a e2       	ldi	r24, 0x2A	; 42
    1498:	96 e0       	ldi	r25, 0x06	; 6
    149a:	9f 93       	push	r25
    149c:	8f 93       	push	r24
    149e:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(PSTR("************************ 5- Total NUM of Current CARDs ************************************\n" ));
    14a2:	8d ec       	ldi	r24, 0xCD	; 205
    14a4:	95 e0       	ldi	r25, 0x05	; 5
    14a6:	9f 93       	push	r25
    14a8:	8f 93       	push	r24
    14aa:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(PSTR("************************ 6- Reset Data Base ***********************************************\n" ));
    14ae:	80 e7       	ldi	r24, 0x70	; 112
    14b0:	95 e0       	ldi	r25, 0x05	; 5
    14b2:	9f 93       	push	r25
    14b4:	8f 93       	push	r24
    14b6:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(PSTR("************************ 7- Admin Modify Data *********************************************\n" ));
    14ba:	83 e1       	ldi	r24, 0x13	; 19
    14bc:	95 e0       	ldi	r25, 0x05	; 5
    14be:	9f 93       	push	r25
    14c0:	8f 93       	push	r24
    14c2:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(PSTR("************************ 8- Exit Programming mode *****************************************\n" ));
    14c6:	86 eb       	ldi	r24, 0xB6	; 182
    14c8:	94 e0       	ldi	r25, 0x04	; 4
    14ca:	9f 93       	push	r25
    14cc:	8f 93       	push	r24
    14ce:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(PSTR("*******************************************************************************************\n" ));
    14d2:	89 e5       	ldi	r24, 0x59	; 89
    14d4:	94 e0       	ldi	r25, 0x04	; 4
    14d6:	9f 93       	push	r25
    14d8:	8f 93       	push	r24
    14da:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(PSTR("************************************** END OF SELECTION !!!********************************\n" ));
    14de:	8c ef       	ldi	r24, 0xFC	; 252
    14e0:	93 e0       	ldi	r25, 0x03	; 3
    14e2:	9f 93       	push	r25
    14e4:	8f 93       	push	r24
    14e6:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(PSTR("*******************************************************************************************\n"	));
    14ea:	8f e9       	ldi	r24, 0x9F	; 159
    14ec:	93 e0       	ldi	r25, 0x03	; 3
    14ee:	9f 93       	push	r25
    14f0:	8f 93       	push	r24
    14f2:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(PSTR(" \n" ));	
    14f6:	8c e9       	ldi	r24, 0x9C	; 156
    14f8:	93 e0       	ldi	r25, 0x03	; 3
    14fa:	9f 93       	push	r25
    14fc:	8f 93       	push	r24
    14fe:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>

	HAL_UART_RECEIVE(&UART_Handler , &command , 0x01) ;
    1502:	41 e0       	ldi	r20, 0x01	; 1
    1504:	50 e0       	ldi	r21, 0x00	; 0
    1506:	be 01       	movw	r22, r28
    1508:	6f 5f       	subi	r22, 0xFF	; 255
    150a:	7f 4f       	sbci	r23, 0xFF	; 255
    150c:	87 e7       	ldi	r24, 0x77	; 119
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 0d 1c 	call	0x381a	; 0x381a <HAL_UART_RECEIVE>
	printf_P(PSTR("\n")) ;
    1514:	8a e9       	ldi	r24, 0x9A	; 154
    1516:	93 e0       	ldi	r25, 0x03	; 3
    1518:	9f 93       	push	r25
    151a:	8f 93       	push	r24
    151c:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	return command ; 
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
	
	

}
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	0f 90       	pop	r0
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	08 95       	ret

00001534 <ATM_Collect_CardData>:
		while(1);
}


void ATM_Collect_CardData(CardData_t * CardData)
{
    1534:	1f 93       	push	r17
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
	uint8_t Flag = 0 ; 
	if (CardData == NULL)
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	c9 f1       	breq	.+114    	; 0x15b0 <ATM_Collect_CardData+0x7c>
    153e:	ec 01       	movw	r28, r24
    1540:	10 e0       	ldi	r17, 0x00	; 0
    1542:	34 c0       	rjmp	.+104    	; 0x15ac <ATM_Collect_CardData+0x78>
		return ;
	}
	while(!Flag)
	{
		
		HAL_GPIO_WRITEPIN(GPIOD , GPIO_PIN_3, GPIO_PIN_SET);
    1544:	41 e0       	ldi	r20, 0x01	; 1
    1546:	68 e0       	ldi	r22, 0x08	; 8
    1548:	80 e3       	ldi	r24, 0x30	; 48
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
		HAL_SPI_Recieve(&SPI_Handler ,(uint8_t*) CardData , 29) ;
    1550:	4d e1       	ldi	r20, 0x1D	; 29
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	be 01       	movw	r22, r28
    1556:	88 e8       	ldi	r24, 0x88	; 136
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	0e 94 a9 19 	call	0x3352	; 0x3352 <HAL_SPI_Recieve>
		if(strcmp((char * )CardData , "NOT READY" ) == 0 )
    155e:	64 e2       	ldi	r22, 0x24	; 36
    1560:	71 e0       	ldi	r23, 0x01	; 1
    1562:	ce 01       	movw	r24, r28
    1564:	0e 94 93 20 	call	0x4126	; 0x4126 <strcmp>
    1568:	89 2b       	or	r24, r25
    156a:	81 f4       	brne	.+32     	; 0x158c <ATM_Collect_CardData+0x58>
			
			
			
			
			
			String_F_PrintTwoLines(PSTR("CARD") ,PSTR("NOT READY")  );
    156c:	6c ee       	ldi	r22, 0xEC	; 236
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	87 ee       	ldi	r24, 0xE7	; 231
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <String_F_PrintTwoLines>
			LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);	
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
			String_F_PrintTwoLines(LCD_StrF[LCD_Print_CARD] , LCD_StrF[LCD_Print_NOT_READY] );
    157e:	61 e3       	ldi	r22, 0x31	; 49
    1580:	7f e0       	ldi	r23, 0x0F	; 15
    1582:	8d e1       	ldi	r24, 0x1D	; 29
    1584:	9f e0       	ldi	r25, 0x0F	; 15
    1586:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <String_F_PrintTwoLines>
    158a:	01 c0       	rjmp	.+2      	; 0x158e <ATM_Collect_CardData+0x5a>

		}
		else
		{
			Flag = 1;
    158c:	11 e0       	ldi	r17, 0x01	; 1
		}
		HAL_GPIO_WRITEPIN(GPIOD , GPIO_PIN_3, GPIO_PIN_RESET);
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	68 e0       	ldi	r22, 0x08	; 8
    1592:	80 e3       	ldi	r24, 0x30	; 48
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    159a:	2f ef       	ldi	r18, 0xFF	; 255
    159c:	87 ea       	ldi	r24, 0xA7	; 167
    159e:	91 e6       	ldi	r25, 0x61	; 97
    15a0:	21 50       	subi	r18, 0x01	; 1
    15a2:	80 40       	sbci	r24, 0x00	; 0
    15a4:	90 40       	sbci	r25, 0x00	; 0
    15a6:	e1 f7       	brne	.-8      	; 0x15a0 <ATM_Collect_CardData+0x6c>
    15a8:	00 c0       	rjmp	.+0      	; 0x15aa <ATM_Collect_CardData+0x76>
    15aa:	00 00       	nop
	uint8_t Flag = 0 ; 
	if (CardData == NULL)
	{
		return ;
	}
	while(!Flag)
    15ac:	11 23       	and	r17, r17
    15ae:	51 f2       	breq	.-108    	; 0x1544 <ATM_Collect_CardData+0x10>
		}
		HAL_GPIO_WRITEPIN(GPIOD , GPIO_PIN_3, GPIO_PIN_RESET);
		_delay_ms(2000);
	}
	
}
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	1f 91       	pop	r17
    15b6:	08 95       	ret

000015b8 <Print_F>:
 


uint8_t * Print_F(uint8_t const * const Str_F)
{
	if (Str_F == NULL)
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	41 f0       	breq	.+16     	; 0x15cc <Print_F+0x14>
    15bc:	bc 01       	movw	r22, r24
	{
		return NULL ;
	}
	static uint8_t Buffer_Ram[20] ;
	strcpy_P((char *)Buffer_Ram , (char*)Str_F);
    15be:	84 e8       	ldi	r24, 0x84	; 132
    15c0:	91 e0       	ldi	r25, 0x01	; 1
    15c2:	0e 94 85 20 	call	0x410a	; 0x410a <strcpy_P>
	return Buffer_Ram ; 
    15c6:	84 e8       	ldi	r24, 0x84	; 132
    15c8:	91 e0       	ldi	r25, 0x01	; 1
    15ca:	08 95       	ret

uint8_t * Print_F(uint8_t const * const Str_F)
{
	if (Str_F == NULL)
	{
		return NULL ;
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
	}
	static uint8_t Buffer_Ram[20] ;
	strcpy_P((char *)Buffer_Ram , (char*)Str_F);
	return Buffer_Ram ; 
}
    15d0:	08 95       	ret

000015d2 <ATM_Terminal_GetString>:


uint8_t ATM_Terminal_GetString(uint8_t * RxBuffer , uint8_t BufferSize )
{
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
	if((RxBuffer == NULL)||(BufferSize == 0))	return -1 ;
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	91 f0       	breq	.+36     	; 0x1602 <ATM_Terminal_GetString+0x30>
    15de:	66 23       	and	r22, r22
    15e0:	91 f0       	breq	.+36     	; 0x1606 <ATM_Terminal_GetString+0x34>
    15e2:	ec 01       	movw	r28, r24
	memset(RxBuffer , 0 , BufferSize);
    15e4:	06 2f       	mov	r16, r22
    15e6:	10 e0       	ldi	r17, 0x00	; 0
    15e8:	a8 01       	movw	r20, r16
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	0e 94 8c 20 	call	0x4118	; 0x4118 <memset>
	HAL_UART_RECEIVE(&UART_Handler , RxBuffer , BufferSize);
    15f2:	a8 01       	movw	r20, r16
    15f4:	be 01       	movw	r22, r28
    15f6:	87 e7       	ldi	r24, 0x77	; 119
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 0d 1c 	call	0x381a	; 0x381a <HAL_UART_RECEIVE>
 
	
	return 0 ;
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	03 c0       	rjmp	.+6      	; 0x1608 <ATM_Terminal_GetString+0x36>
}


uint8_t ATM_Terminal_GetString(uint8_t * RxBuffer , uint8_t BufferSize )
{
	if((RxBuffer == NULL)||(BufferSize == 0))	return -1 ;
    1602:	8f ef       	ldi	r24, 0xFF	; 255
    1604:	01 c0       	rjmp	.+2      	; 0x1608 <ATM_Terminal_GetString+0x36>
    1606:	8f ef       	ldi	r24, 0xFF	; 255
	memset(RxBuffer , 0 , BufferSize);
	HAL_UART_RECEIVE(&UART_Handler , RxBuffer , BufferSize);
 
	
	return 0 ;
}
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	08 95       	ret

00001612 <ATM_Add_CardData>:
	

}

void ATM_Add_CardData(void)
{
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	a3 97       	sbiw	r28, 0x23	; 35
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
		uint8_t  flag = 0 ;
		CardData_t TempCard = {0};						
    162a:	8e 01       	movw	r16, r28
    162c:	0f 5f       	subi	r16, 0xFF	; 255
    162e:	1f 4f       	sbci	r17, 0xFF	; 255
    1630:	83 e2       	ldi	r24, 0x23	; 35
    1632:	f8 01       	movw	r30, r16
    1634:	11 92       	st	Z+, r1
    1636:	8a 95       	dec	r24
    1638:	e9 f7       	brne	.-6      	; 0x1634 <ATM_Add_CardData+0x22>
			String_F_PrintLine(PSTR("Please enter Card Holder Name  "));
    163a:	8a e7       	ldi	r24, 0x7A	; 122
    163c:	93 e0       	ldi	r25, 0x03	; 3
    163e:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
		ATM_Terminal_GetString(TempCard.CardName , CARD_NAME_LEN +1);
    1642:	6b e0       	ldi	r22, 0x0B	; 11
    1644:	c8 01       	movw	r24, r16
    1646:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <ATM_Terminal_GetString>
			String_F_PrintLine(PSTR("Please enter Card PAN  :  "));
    164a:	8f e5       	ldi	r24, 0x5F	; 95
    164c:	93 e0       	ldi	r25, 0x03	; 3
    164e:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
		ATM_Terminal_GetString(TempCard.CardPAN , CARD_PAN_LEN+1);
    1652:	6b e0       	ldi	r22, 0x0B	; 11
    1654:	ce 01       	movw	r24, r28
    1656:	0c 96       	adiw	r24, 0x0c	; 12
    1658:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <ATM_Terminal_GetString>
			String_F_PrintLine(PSTR("Please enter Card PIN :  "));
    165c:	85 e4       	ldi	r24, 0x45	; 69
    165e:	93 e0       	ldi	r25, 0x03	; 3
    1660:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
		ATM_Terminal_GetString(TempCard.CardPIN , CARD_PIN_LEN+1);
    1664:	66 e0       	ldi	r22, 0x06	; 6
    1666:	ce 01       	movw	r24, r28
    1668:	47 96       	adiw	r24, 0x17	; 23
    166a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <ATM_Terminal_GetString>
			String_F_PrintLine(PSTR("Please enter Card Total Balance "));
    166e:	84 e2       	ldi	r24, 0x24	; 36
    1670:	93 e0       	ldi	r25, 0x03	; 3
    1672:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
		ATM_Terminal_GetString(TempCard.CardBalance , CARD_BALANCE_LEN+1);	
    1676:	67 e0       	ldi	r22, 0x07	; 7
    1678:	ce 01       	movw	r24, r28
    167a:	4d 96       	adiw	r24, 0x1d	; 29
    167c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <ATM_Terminal_GetString>
		/********************************************************
		*					Add Card Data	to SERVER			*
		********************************************************/						
		flag = SERVER_OPER_Add_CARD(&TempCard);
    1680:	c8 01       	movw	r24, r16
    1682:	0e 94 ae 10 	call	0x215c	; 0x215c <SERVER_OPER_Add_CARD>
				
		if (flag == SERVER_OPER_OK ) // if SERVER returned with Success operation 
    1686:	81 11       	cpse	r24, r1
    1688:	05 c0       	rjmp	.+10     	; 0x1694 <ATM_Add_CardData+0x82>
		{		
			String_F_PrintLine(PSTR("Great a new Card added successfully"));
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	93 e0       	ldi	r25, 0x03	; 3
    168e:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    1692:	0b c0       	rjmp	.+22     	; 0x16aa <ATM_Add_CardData+0x98>
		}
		else if (flag == SERVER_OPER_FullSpace)
    1694:	83 30       	cpi	r24, 0x03	; 3
    1696:	29 f4       	brne	.+10     	; 0x16a2 <ATM_Add_CardData+0x90>
		{
			String_F_PrintLine(PSTR("There is no enough space !!!"));
    1698:	83 ee       	ldi	r24, 0xE3	; 227
    169a:	92 e0       	ldi	r25, 0x02	; 2
    169c:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <ATM_Add_CardData+0x98>
		}else{
			String_F_PrintLine(PSTR("this card already exist !!!"));
    16a2:	87 ec       	ldi	r24, 0xC7	; 199
    16a4:	92 e0       	ldi	r25, 0x02	; 2
    16a6:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
		}
				
}
    16aa:	a3 96       	adiw	r28, 0x23	; 35
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	1f 91       	pop	r17
    16bc:	0f 91       	pop	r16
    16be:	08 95       	ret

000016c0 <ATM_Remove_Card>:

void ATM_Remove_Card(void)
{
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	a3 97       	sbiw	r28, 0x23	; 35
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
		CardData_t TempCard = {0};	
    16d8:	8e 01       	movw	r16, r28
    16da:	0f 5f       	subi	r16, 0xFF	; 255
    16dc:	1f 4f       	sbci	r17, 0xFF	; 255
    16de:	83 e2       	ldi	r24, 0x23	; 35
    16e0:	f8 01       	movw	r30, r16
    16e2:	11 92       	st	Z+, r1
    16e4:	8a 95       	dec	r24
    16e6:	e9 f7       	brne	.-6      	; 0x16e2 <ATM_Remove_Card+0x22>
			String_F_PrintLine(PSTR("Please enter Card PAN :"));
    16e8:	8f ea       	ldi	r24, 0xAF	; 175
    16ea:	92 e0       	ldi	r25, 0x02	; 2
    16ec:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
			ATM_Terminal_GetString(TempCard.CardPAN , CARD_PAN_LEN+1);
    16f0:	6b e0       	ldi	r22, 0x0B	; 11
    16f2:	ce 01       	movw	r24, r28
    16f4:	0c 96       	adiw	r24, 0x0c	; 12
    16f6:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <ATM_Terminal_GetString>
				
		/********************************************************
		*				Search Card Data From DataBase			*
		********************************************************/ 
		if (SERVER_OPER_Remove_CARD(&TempCard)  == SERVER_OPER_OK ) // if Card data is exist 
    16fa:	c8 01       	movw	r24, r16
    16fc:	0e 94 02 11 	call	0x2204	; 0x2204 <SERVER_OPER_Remove_CARD>
    1700:	81 11       	cpse	r24, r1
    1702:	05 c0       	rjmp	.+10     	; 0x170e <ATM_Remove_Card+0x4e>
		{		
			String_F_PrintLine(PSTR("Wait Until remove this Card Data :"));
    1704:	8c e8       	ldi	r24, 0x8C	; 140
    1706:	92 e0       	ldi	r25, 0x02	; 2
    1708:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <ATM_Remove_Card+0x56>
		}else  // if  Card data dose not exist 
		{	
			String_F_PrintLine(PSTR("Not exist Card Data :"));
    170e:	86 e7       	ldi	r24, 0x76	; 118
    1710:	92 e0       	ldi	r25, 0x02	; 2
    1712:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
		}

}
    1716:	a3 96       	adiw	r28, 0x23	; 35
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	08 95       	ret

0000172c <ATM_Search_Card_WithPAN>:


SERVER_OPER_Status_t ATM_Search_Card_WithPAN(void)
{
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	a3 97       	sbiw	r28, 0x23	; 35
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
	CardData_t TempCard = {0};
    1744:	8e 01       	movw	r16, r28
    1746:	0f 5f       	subi	r16, 0xFF	; 255
    1748:	1f 4f       	sbci	r17, 0xFF	; 255
    174a:	83 e2       	ldi	r24, 0x23	; 35
    174c:	f8 01       	movw	r30, r16
    174e:	11 92       	st	Z+, r1
    1750:	8a 95       	dec	r24
    1752:	e9 f7       	brne	.-6      	; 0x174e <ATM_Search_Card_WithPAN+0x22>
		String_F_PrintLine(PSTR("Please enter Card PAN"));
    1754:	80 e6       	ldi	r24, 0x60	; 96
    1756:	92 e0       	ldi	r25, 0x02	; 2
    1758:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
		ATM_Terminal_GetString(TempCard.CardPAN , CARD_PAN_LEN+1);
    175c:	6b e0       	ldi	r22, 0x0B	; 11
    175e:	ce 01       	movw	r24, r28
    1760:	0c 96       	adiw	r24, 0x0c	; 12
    1762:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <ATM_Terminal_GetString>
	// access SERVER here and return result
	if (SERVER_OPER_Search_CARD(&TempCard , ATM_SEARCH_BY_PAN)  != -1 ) // if data exist
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	c8 01       	movw	r24, r16
    176a:	0e 94 3b 10 	call	0x2076	; 0x2076 <SERVER_OPER_Search_CARD>
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	31 f0       	breq	.+12     	; 0x177e <ATM_Search_Card_WithPAN+0x52>
	{
		String_F_PrintLine(PSTR("This card Is Exist"));		
    1772:	8d e4       	ldi	r24, 0x4D	; 77
    1774:	92 e0       	ldi	r25, 0x02	; 2
    1776:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
		return  SERVER_OPER_Exist ;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	05 c0       	rjmp	.+10     	; 0x1788 <ATM_Search_Card_WithPAN+0x5c>
	}else  // if data dose not exist
	{
		String_F_PrintLine(PSTR("Not exist Card Data"));
    177e:	89 e3       	ldi	r24, 0x39	; 57
    1780:	92 e0       	ldi	r25, 0x02	; 2
    1782:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
		return  SERVER_OPER_Not_Exist ;
    1786:	82 e0       	ldi	r24, 0x02	; 2
	}
}
    1788:	a3 96       	adiw	r28, 0x23	; 35
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	1f 91       	pop	r17
    179a:	0f 91       	pop	r16
    179c:	08 95       	ret

0000179e <ATM_Search_Card_ByName>:

void ATM_Search_Card_ByName(void)
{
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	a3 97       	sbiw	r28, 0x23	; 35
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
	CardData_t TempCard = {0};	
    17b6:	8e 01       	movw	r16, r28
    17b8:	0f 5f       	subi	r16, 0xFF	; 255
    17ba:	1f 4f       	sbci	r17, 0xFF	; 255
    17bc:	83 e2       	ldi	r24, 0x23	; 35
    17be:	f8 01       	movw	r30, r16
    17c0:	11 92       	st	Z+, r1
    17c2:	8a 95       	dec	r24
    17c4:	e9 f7       	brne	.-6      	; 0x17c0 <ATM_Search_Card_ByName+0x22>
	String_F_PrintLine(PSTR("Please enter Card Name:"));
    17c6:	85 ec       	ldi	r24, 0xC5	; 197
    17c8:	9d e0       	ldi	r25, 0x0D	; 13
    17ca:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
	ATM_Terminal_GetString(TempCard.CardName , CARD_NAME_LEN );
    17ce:	6a e0       	ldi	r22, 0x0A	; 10
    17d0:	c8 01       	movw	r24, r16
    17d2:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <ATM_Terminal_GetString>
	// access SERVER here and return result
	if (SERVER_OPER_Search_CARD(&TempCard , ATM_SEARCH_BY_NAME)  != -1 ) // if card data is exist
    17d6:	61 e0       	ldi	r22, 0x01	; 1
    17d8:	c8 01       	movw	r24, r16
    17da:	0e 94 3b 10 	call	0x2076	; 0x2076 <SERVER_OPER_Search_CARD>
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	29 f0       	breq	.+10     	; 0x17ec <ATM_Search_Card_ByName+0x4e>
	{
		String_F_PrintLine(PSTR("This card  Is Exist"));
    17e2:	81 eb       	ldi	r24, 0xB1	; 177
    17e4:	9d e0       	ldi	r25, 0x0D	; 13
    17e6:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    17ea:	04 c0       	rjmp	.+8      	; 0x17f4 <ATM_Search_Card_ByName+0x56>
	}else  // if data dose is not exist
	{
		String_F_PrintLine(PSTR("This card Is not Exist"));
    17ec:	8a e9       	ldi	r24, 0x9A	; 154
    17ee:	9d e0       	ldi	r25, 0x0D	; 13
    17f0:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
	}
}
    17f4:	a3 96       	adiw	r28, 0x23	; 35
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	1f 91       	pop	r17
    1806:	0f 91       	pop	r16
    1808:	08 95       	ret

0000180a <ATM_Admin_Modifying_Data>:



void ATM_Admin_Modifying_Data(void)
{
    180a:	1f 93       	push	r17
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	ae 97       	sbiw	r28, 0x2e	; 46
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
	uint8_t ExitFlag = 0 , command =0  ;
    1820:	19 82       	std	Y+1, r1	; 0x01
	CardData_t TempCard = {0};
    1822:	fe 01       	movw	r30, r28
    1824:	32 96       	adiw	r30, 0x02	; 2
    1826:	83 e2       	ldi	r24, 0x23	; 35
    1828:	df 01       	movw	r26, r30
    182a:	1d 92       	st	X+, r1
    182c:	8a 95       	dec	r24
    182e:	e9 f7       	brne	.-6      	; 0x182a <ATM_Admin_Modifying_Data+0x20>



void ATM_Admin_Modifying_Data(void)
{
	uint8_t ExitFlag = 0 , command =0  ;
    1830:	10 e0       	ldi	r17, 0x00	; 0
	CardData_t TempCard = {0};
	uint8_t MaxDailyWithDraw[MaxDailyWithDraw_Size]  ;
	while(!ExitFlag)
    1832:	d8 c0       	rjmp	.+432    	; 0x19e4 <ATM_Admin_Modifying_Data+0x1da>
	{

		String_F_PrintLine(PSTR("Please Choose one of the following Commands "));
    1834:	8d e6       	ldi	r24, 0x6D	; 109
    1836:	9d e0       	ldi	r25, 0x0D	; 13
    1838:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
		printf_P(PSTR("************************ 1- Set Admin Password and Name ***********************************\n" ));
    183c:	80 e1       	ldi	r24, 0x10	; 16
    183e:	9d e0       	ldi	r25, 0x0D	; 13
    1840:	9f 93       	push	r25
    1842:	8f 93       	push	r24
    1844:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
		printf_P(PSTR("************************ 2- Set Admin Maximum Temperature *********************************\n" ));
    1848:	83 eb       	ldi	r24, 0xB3	; 179
    184a:	9c e0       	ldi	r25, 0x0C	; 12
    184c:	9f 93       	push	r25
    184e:	8f 93       	push	r24
    1850:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
		printf_P(PSTR("************************ 3- Clear Error Flag **********************************************\n" ));
    1854:	86 e5       	ldi	r24, 0x56	; 86
    1856:	9c e0       	ldi	r25, 0x0C	; 12
    1858:	9f 93       	push	r25
    185a:	8f 93       	push	r24
    185c:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
		printf_P(PSTR("************************ 4- Set Max Daily Amount ******************************************\n" ));
    1860:	89 ef       	ldi	r24, 0xF9	; 249
    1862:	9b e0       	ldi	r25, 0x0B	; 11
    1864:	9f 93       	push	r25
    1866:	8f 93       	push	r24
    1868:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
		printf_P(PSTR("************************ 5- Exit **********************************************************\n" ));
    186c:	8c e9       	ldi	r24, 0x9C	; 156
    186e:	9b e0       	ldi	r25, 0x0B	; 11
    1870:	9f 93       	push	r25
    1872:	8f 93       	push	r24
    1874:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
		String_F_PrintLine(PSTR("END OF SELECTION !!!"));
    1878:	87 e8       	ldi	r24, 0x87	; 135
    187a:	9b e0       	ldi	r25, 0x0B	; 11
    187c:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
		HAL_UART_RECEIVE(&UART_Handler , &command , 0x01) ;
    1880:	41 e0       	ldi	r20, 0x01	; 1
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	be 01       	movw	r22, r28
    1886:	6f 5f       	subi	r22, 0xFF	; 255
    1888:	7f 4f       	sbci	r23, 0xFF	; 255
    188a:	87 e7       	ldi	r24, 0x77	; 119
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0e 94 0d 1c 	call	0x381a	; 0x381a <HAL_UART_RECEIVE>
		printf_P(PSTR(" \n" ));
    1892:	84 e8       	ldi	r24, 0x84	; 132
    1894:	9b e0       	ldi	r25, 0x0B	; 11
    1896:	9f 93       	push	r25
    1898:	8f 93       	push	r24
    189a:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
		switch(command)
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	83 33       	cpi	r24, 0x33	; 51
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <ATM_Admin_Modifying_Data+0xa6>
    18ae:	65 c0       	rjmp	.+202    	; 0x197a <ATM_Admin_Modifying_Data+0x170>
    18b0:	28 f4       	brcc	.+10     	; 0x18bc <ATM_Admin_Modifying_Data+0xb2>
    18b2:	81 33       	cpi	r24, 0x31	; 49
    18b4:	51 f0       	breq	.+20     	; 0x18ca <ATM_Admin_Modifying_Data+0xc0>
    18b6:	82 33       	cpi	r24, 0x32	; 50
    18b8:	d1 f1       	breq	.+116    	; 0x192e <ATM_Admin_Modifying_Data+0x124>
    18ba:	94 c0       	rjmp	.+296    	; 0x19e4 <ATM_Admin_Modifying_Data+0x1da>
    18bc:	84 33       	cpi	r24, 0x34	; 52
    18be:	09 f4       	brne	.+2      	; 0x18c2 <ATM_Admin_Modifying_Data+0xb8>
    18c0:	6b c0       	rjmp	.+214    	; 0x1998 <ATM_Admin_Modifying_Data+0x18e>
    18c2:	85 33       	cpi	r24, 0x35	; 53
    18c4:	09 f4       	brne	.+2      	; 0x18c8 <ATM_Admin_Modifying_Data+0xbe>
    18c6:	89 c0       	rjmp	.+274    	; 0x19da <ATM_Admin_Modifying_Data+0x1d0>
    18c8:	8d c0       	rjmp	.+282    	; 0x19e4 <ATM_Admin_Modifying_Data+0x1da>
		{
			case ATM_ADMIN_COMMAN_SET_PASS :
				String_F_PrintLine(PSTR("Please enter a new admin name :"));
    18ca:	84 e6       	ldi	r24, 0x64	; 100
    18cc:	9b e0       	ldi	r25, 0x0B	; 11
    18ce:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
				ATM_Terminal_GetString(TempCard.CardName , CARD_NAME_LEN );
    18d2:	6a e0       	ldi	r22, 0x0A	; 10
    18d4:	ce 01       	movw	r24, r28
    18d6:	02 96       	adiw	r24, 0x02	; 2
    18d8:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <ATM_Terminal_GetString>
				String_F_PrintLine(PSTR("Please enter a new admin pass :"));
    18dc:	84 e4       	ldi	r24, 0x44	; 68
    18de:	9b e0       	ldi	r25, 0x0B	; 11
    18e0:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
				ATM_Terminal_GetString(TempCard.CardPAN , CARD_NAME_LEN );
    18e4:	6a e0       	ldi	r22, 0x0A	; 10
    18e6:	ce 01       	movw	r24, r28
    18e8:	0d 96       	adiw	r24, 0x0d	; 13
    18ea:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <ATM_Terminal_GetString>
				String_F_PrintLine(PSTR("wait !!!  \n"));			
    18ee:	88 e3       	ldi	r24, 0x38	; 56
    18f0:	9b e0       	ldi	r25, 0x0B	; 11
    18f2:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    18f6:	9f ef       	ldi	r25, 0xFF	; 255
    18f8:	ad e3       	ldi	r26, 0x3D	; 61
    18fa:	b9 e4       	ldi	r27, 0x49	; 73
    18fc:	91 50       	subi	r25, 0x01	; 1
    18fe:	a0 40       	sbci	r26, 0x00	; 0
    1900:	b0 40       	sbci	r27, 0x00	; 0
    1902:	e1 f7       	brne	.-8      	; 0x18fc <ATM_Admin_Modifying_Data+0xf2>
    1904:	00 c0       	rjmp	.+0      	; 0x1906 <ATM_Admin_Modifying_Data+0xfc>
    1906:	00 00       	nop
				_delay_ms(ATM_DLEAY_IN_S);
				if( SERVER_ADMIN_Set_Pass(TempCard.CardName , TempCard.CardPAN) == SERVER_OPER_OK )
    1908:	be 01       	movw	r22, r28
    190a:	63 5f       	subi	r22, 0xF3	; 243
    190c:	7f 4f       	sbci	r23, 0xFF	; 255
    190e:	ce 01       	movw	r24, r28
    1910:	02 96       	adiw	r24, 0x02	; 2
    1912:	0e 94 50 11 	call	0x22a0	; 0x22a0 <SERVER_ADMIN_Set_Pass>
    1916:	81 11       	cpse	r24, r1
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <ATM_Admin_Modifying_Data+0x11a>
				{
					String_F_PrintLine(PSTR("Admin Data Stored Successfully"));
    191a:	89 e1       	ldi	r24, 0x19	; 25
    191c:	9b e0       	ldi	r25, 0x0B	; 11
    191e:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    1922:	60 c0       	rjmp	.+192    	; 0x19e4 <ATM_Admin_Modifying_Data+0x1da>
				}else
				{
				String_F_PrintLine(PSTR("Please Try Again "));
    1924:	87 e0       	ldi	r24, 0x07	; 7
    1926:	9b e0       	ldi	r25, 0x0B	; 11
    1928:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    192c:	5b c0       	rjmp	.+182    	; 0x19e4 <ATM_Admin_Modifying_Data+0x1da>
				}
			
				break;
			case  ATM_ADMIN_COMMAN_SET_TEMP :
				String_F_PrintLine(PSTR("Enter a new admin MAX Temp value: "));
    192e:	84 ee       	ldi	r24, 0xE4	; 228
    1930:	9a e0       	ldi	r25, 0x0A	; 10
    1932:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
				ATM_Terminal_GetString(TempCard.CardName , CARD_NAME_LEN );
    1936:	6a e0       	ldi	r22, 0x0A	; 10
    1938:	ce 01       	movw	r24, r28
    193a:	02 96       	adiw	r24, 0x02	; 2
    193c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <ATM_Terminal_GetString>
				String_F_PrintLine(PSTR("wait !!!  \n"));				
    1940:	88 ed       	ldi	r24, 0xD8	; 216
    1942:	9a e0       	ldi	r25, 0x0A	; 10
    1944:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    1948:	2f ef       	ldi	r18, 0xFF	; 255
    194a:	8d e3       	ldi	r24, 0x3D	; 61
    194c:	99 e4       	ldi	r25, 0x49	; 73
    194e:	21 50       	subi	r18, 0x01	; 1
    1950:	80 40       	sbci	r24, 0x00	; 0
    1952:	90 40       	sbci	r25, 0x00	; 0
    1954:	e1 f7       	brne	.-8      	; 0x194e <ATM_Admin_Modifying_Data+0x144>
    1956:	00 c0       	rjmp	.+0      	; 0x1958 <ATM_Admin_Modifying_Data+0x14e>
    1958:	00 00       	nop
				_delay_ms(ATM_DLEAY_IN_S);
				if( SERVER_ADMIN_Set_Temp(TempCard.CardName) == SERVER_OPER_OK )
    195a:	ce 01       	movw	r24, r28
    195c:	02 96       	adiw	r24, 0x02	; 2
    195e:	0e 94 a6 11 	call	0x234c	; 0x234c <SERVER_ADMIN_Set_Temp>
    1962:	81 11       	cpse	r24, r1
    1964:	05 c0       	rjmp	.+10     	; 0x1970 <ATM_Admin_Modifying_Data+0x166>
				{
					String_F_PrintLine(PSTR("Admin Data Stored Successfully"));			
    1966:	89 eb       	ldi	r24, 0xB9	; 185
    1968:	9a e0       	ldi	r25, 0x0A	; 10
    196a:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    196e:	3a c0       	rjmp	.+116    	; 0x19e4 <ATM_Admin_Modifying_Data+0x1da>
				}else
				{
					String_F_PrintLine(PSTR("Please Try Again"));
    1970:	88 ea       	ldi	r24, 0xA8	; 168
    1972:	9a e0       	ldi	r25, 0x0A	; 10
    1974:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    1978:	35 c0       	rjmp	.+106    	; 0x19e4 <ATM_Admin_Modifying_Data+0x1da>
				}
			
				break;
			case ATM_ADMIN_ERROR_CLEAR :
				if( SERVER_ADMIN_Error( ADMIN_ERROR_CLEAR ) == SERVER_OPER_OK )
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	0e 94 ce 11 	call	0x239c	; 0x239c <SERVER_ADMIN_Error>
    1980:	81 11       	cpse	r24, r1
    1982:	05 c0       	rjmp	.+10     	; 0x198e <ATM_Admin_Modifying_Data+0x184>
				{
					String_F_PrintLine(PSTR("Error Cleared Successfully"));
    1984:	8d e8       	ldi	r24, 0x8D	; 141
    1986:	9a e0       	ldi	r25, 0x0A	; 10
    1988:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    198c:	2b c0       	rjmp	.+86     	; 0x19e4 <ATM_Admin_Modifying_Data+0x1da>
				}else
				{
					String_F_PrintLine(PSTR("Error Does Not Cleared Successfully !!!!"));
    198e:	84 e6       	ldi	r24, 0x64	; 100
    1990:	9a e0       	ldi	r25, 0x0A	; 10
    1992:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    1996:	26 c0       	rjmp	.+76     	; 0x19e4 <ATM_Admin_Modifying_Data+0x1da>
				}
				break;
			case ATM_ADMIN_MAX_Daliy_Amount :
					String_F_PrintLine(PSTR("Please Enter the MAx Daily Amount"));
    1998:	82 e4       	ldi	r24, 0x42	; 66
    199a:	9a e0       	ldi	r25, 0x0A	; 10
    199c:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
					ATM_Terminal_GetString(MaxDailyWithDraw , MaxDailyWithDraw_Size);
    19a0:	6a e0       	ldi	r22, 0x0A	; 10
    19a2:	ce 01       	movw	r24, r28
    19a4:	85 96       	adiw	r24, 0x25	; 37
    19a6:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <ATM_Terminal_GetString>
					printf_P(PSTR(" \n" ));			 
    19aa:	8f e3       	ldi	r24, 0x3F	; 63
    19ac:	9a e0       	ldi	r25, 0x0A	; 10
    19ae:	9f 93       	push	r25
    19b0:	8f 93       	push	r24
    19b2:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
				if(SERVER_ADMIN_Set_MAximum_DailyAmount(MaxDailyWithDraw) == SERVER_OPER_OK )
    19b6:	ce 01       	movw	r24, r28
    19b8:	85 96       	adiw	r24, 0x25	; 37
    19ba:	0e 94 3b 12 	call	0x2476	; 0x2476 <SERVER_ADMIN_Set_MAximum_DailyAmount>
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	81 11       	cpse	r24, r1
    19c4:	05 c0       	rjmp	.+10     	; 0x19d0 <ATM_Admin_Modifying_Data+0x1c6>
				{
					String_F_PrintLine(PSTR("Maximum Daily Amount Successfully"));
    19c6:	8d e1       	ldi	r24, 0x1D	; 29
    19c8:	9a e0       	ldi	r25, 0x0A	; 10
    19ca:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    19ce:	0a c0       	rjmp	.+20     	; 0x19e4 <ATM_Admin_Modifying_Data+0x1da>
				}else
				{
					String_F_PrintLine(PSTR("Maximum Daily Amount Does Not Set Successfully !!!!"));
    19d0:	89 ee       	ldi	r24, 0xE9	; 233
    19d2:	99 e0       	ldi	r25, 0x09	; 9
    19d4:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    19d8:	05 c0       	rjmp	.+10     	; 0x19e4 <ATM_Admin_Modifying_Data+0x1da>
				}
				break;
			case ATM_ADMIN_Exit :
				String_F_PrintLine(PSTR("EXIT Admin Modifying mode successfully"));
    19da:	82 ec       	ldi	r24, 0xC2	; 194
    19dc:	99 e0       	ldi	r25, 0x09	; 9
    19de:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
				ExitFlag = 1 ;
    19e2:	11 e0       	ldi	r17, 0x01	; 1
void ATM_Admin_Modifying_Data(void)
{
	uint8_t ExitFlag = 0 , command =0  ;
	CardData_t TempCard = {0};
	uint8_t MaxDailyWithDraw[MaxDailyWithDraw_Size]  ;
	while(!ExitFlag)
    19e4:	11 23       	and	r17, r17
    19e6:	09 f4       	brne	.+2      	; 0x19ea <ATM_Admin_Modifying_Data+0x1e0>
    19e8:	25 cf       	rjmp	.-438    	; 0x1834 <ATM_Admin_Modifying_Data+0x2a>
			
			
				break;
				}
		}
}
    19ea:	ae 96       	adiw	r28, 0x2e	; 46
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	08 95       	ret

000019fe <ATM_Programming_mode>:




void ATM_Programming_mode(void)
{
    19fe:	cf 93       	push	r28
 	uint8_t ExitFlag = 0 ;
	uint8_t command = 0; 
	
	
	LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_enter_Programing] ));	
    1a00:	81 ee       	ldi	r24, 0xE1	; 225
    1a02:	9e e0       	ldi	r25, 0x0E	; 14
    1a04:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    1a08:	ac 01       	movw	r20, r24
    1a0a:	61 e0       	ldi	r22, 0x01	; 1
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
	LCD_Send_String_WithLoc(2,1,Print_F(LCD_StrF[LCD_Print_Mode] ));
    1a12:	85 ef       	ldi	r24, 0xF5	; 245
    1a14:	9e e0       	ldi	r25, 0x0E	; 14
    1a16:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    1a1a:	ac 01       	movw	r20, r24
    1a1c:	61 e0       	ldi	r22, 0x01	; 1
    1a1e:	82 e0       	ldi	r24, 0x02	; 2
    1a20:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
	String_F_PrintTwoLines(LCD_StrF[LCD_Print_enter_Programing] , LCD_StrF[LCD_Print_Mode]);
    1a24:	65 ef       	ldi	r22, 0xF5	; 245
    1a26:	7e e0       	ldi	r23, 0x0E	; 14
    1a28:	81 ee       	ldi	r24, 0xE1	; 225
    1a2a:	9e e0       	ldi	r25, 0x0E	; 14
    1a2c:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <String_F_PrintTwoLines>
    1a30:	2f ef       	ldi	r18, 0xFF	; 255
    1a32:	8d e3       	ldi	r24, 0x3D	; 61
    1a34:	99 e4       	ldi	r25, 0x49	; 73
    1a36:	21 50       	subi	r18, 0x01	; 1
    1a38:	80 40       	sbci	r24, 0x00	; 0
    1a3a:	90 40       	sbci	r25, 0x00	; 0
    1a3c:	e1 f7       	brne	.-8      	; 0x1a36 <ATM_Programming_mode+0x38>
    1a3e:	00 c0       	rjmp	.+0      	; 0x1a40 <ATM_Programming_mode+0x42>
    1a40:	00 00       	nop
	
	
	
	_delay_ms(ATM_DLEAY_IN_S );
	LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
	LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_Programing_Mode]));
    1a48:	89 e0       	ldi	r24, 0x09	; 9
    1a4a:	9f e0       	ldi	r25, 0x0F	; 15
    1a4c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    1a50:	ac 01       	movw	r20, r24
    1a52:	61 e0       	ldi	r22, 0x01	; 1
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
	String_F_PrintTwoLines(LCD_StrF[LCD_COMMANED_CLEAR_LCD] , LCD_StrF[LCD_Print_Programing_Mode]);
    1a5a:	69 e0       	ldi	r22, 0x09	; 9
    1a5c:	7f e0       	ldi	r23, 0x0F	; 15
    1a5e:	81 ef       	ldi	r24, 0xF1	; 241
    1a60:	9d e0       	ldi	r25, 0x0D	; 13
    1a62:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <String_F_PrintTwoLines>
    1a66:	2f ef       	ldi	r18, 0xFF	; 255
    1a68:	8d e3       	ldi	r24, 0x3D	; 61
    1a6a:	99 e4       	ldi	r25, 0x49	; 73
    1a6c:	21 50       	subi	r18, 0x01	; 1
    1a6e:	80 40       	sbci	r24, 0x00	; 0
    1a70:	90 40       	sbci	r25, 0x00	; 0
    1a72:	e1 f7       	brne	.-8      	; 0x1a6c <ATM_Programming_mode+0x6e>
    1a74:	00 c0       	rjmp	.+0      	; 0x1a76 <ATM_Programming_mode+0x78>
    1a76:	00 00       	nop



void ATM_Programming_mode(void)
{
 	uint8_t ExitFlag = 0 ;
    1a78:	c0 e0       	ldi	r28, 0x00	; 0
    1a7a:	6e c0       	rjmp	.+220    	; 0x1b58 <ATM_Programming_mode+0x15a>
	
	
	while(!ExitFlag)
	{
		
		command =  ATM_Get_UserCommand();
    1a7c:	0e 94 21 0a 	call	0x1442	; 0x1442 <ATM_Get_UserCommand>
		switch(command)
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	fc 01       	movw	r30, r24
    1a84:	f1 97       	sbiw	r30, 0x31	; 49
    1a86:	e8 30       	cpi	r30, 0x08	; 8
    1a88:	f1 05       	cpc	r31, r1
    1a8a:	08 f0       	brcs	.+2      	; 0x1a8e <ATM_Programming_mode+0x90>
    1a8c:	61 c0       	rjmp	.+194    	; 0x1b50 <ATM_Programming_mode+0x152>
    1a8e:	e6 5d       	subi	r30, 0xD6	; 214
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	0c 94 09 20 	jmp	0x4012	; 0x4012 <__tablejump2__>
			case  ATM_ADD_Card :		// Add card
			
				/********************************************************
				*					Collect Card Data					*
				********************************************************/
			  	ATM_Add_CardData() ;
    1a96:	0e 94 09 0b 	call	0x1612	; 0x1612 <ATM_Add_CardData>
				break; 	
    1a9a:	5e c0       	rjmp	.+188    	; 0x1b58 <ATM_Programming_mode+0x15a>
			case ATM_REMOVE_CARD :		// Remove Card 
				/********************************************************
				*			Remove Card Data From DataBase				*
				********************************************************/
				ATM_Remove_Card();
    1a9c:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <ATM_Remove_Card>
				break;	
    1aa0:	5b c0       	rjmp	.+182    	; 0x1b58 <ATM_Programming_mode+0x15a>
			case  ATM_SEARCH_FOR_CARD_PAN :		// Search For Specific Card
			
					/********************************************************
					*				Search Card Data in DataBase			*
					********************************************************/ 		 
					ATM_Search_Card_WithPAN();
    1aa2:	0e 94 96 0b 	call	0x172c	; 0x172c <ATM_Search_Card_WithPAN>
					break;				
    1aa6:	58 c0       	rjmp	.+176    	; 0x1b58 <ATM_Programming_mode+0x15a>
					
			case  ATM_SEARCH_FOR_CARD_NAME :
					/********************************************************
					*		Search Card Data With Name In DataBASE			*
					********************************************************/ 		
					ATM_Search_Card_ByName();
    1aa8:	0e 94 cf 0b 	call	0x179e	; 0x179e <ATM_Search_Card_ByName>
					break;					
    1aac:	55 c0       	rjmp	.+170    	; 0x1b58 <ATM_Programming_mode+0x15a>
				
			case   ATM_TOTAL_NUM_OF_CARDs :	
				/********************************************************
				*			Return Total Num Of Installed Card 			*
				********************************************************/ 
					printf_P(PSTR("****************************************************\n"));
    1aae:	8c e8       	ldi	r24, 0x8C	; 140
    1ab0:	99 e0       	ldi	r25, 0x09	; 9
    1ab2:	9f 93       	push	r25
    1ab4:	8f 93       	push	r24
    1ab6:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
					printf_P(PSTR("***** The Number of Installed Cards is :" ));
    1aba:	83 e6       	ldi	r24, 0x63	; 99
    1abc:	99 e0       	ldi	r25, 0x09	; 9
    1abe:	9f 93       	push	r25
    1ac0:	8f 93       	push	r24
    1ac2:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
					printf("%i" , SERVER_OPER_GetTotal_CARDNum());
    1ac6:	0e 94 3a 11 	call	0x2274	; 0x2274 <SERVER_OPER_GetTotal_CARDNum>
    1aca:	9f 93       	push	r25
    1acc:	8f 93       	push	r24
    1ace:	8e e2       	ldi	r24, 0x2E	; 46
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	9f 93       	push	r25
    1ad4:	8f 93       	push	r24
    1ad6:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <printf>
					printf_P(PSTR("*********** \n"));
    1ada:	85 e5       	ldi	r24, 0x55	; 85
    1adc:	99 e0       	ldi	r25, 0x09	; 9
    1ade:	9f 93       	push	r25
    1ae0:	8f 93       	push	r24
    1ae2:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
					printf_P(PSTR("****************************************************\n"	));
    1ae6:	8f e1       	ldi	r24, 0x1F	; 31
    1ae8:	99 e0       	ldi	r25, 0x09	; 9
    1aea:	9f 93       	push	r25
    1aec:	8f 93       	push	r24
    1aee:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
					printf_P(PSTR(" \n" ));
    1af2:	8c e1       	ldi	r24, 0x1C	; 28
    1af4:	99 e0       	ldi	r25, 0x09	; 9
    1af6:	9f 93       	push	r25
    1af8:	8f 93       	push	r24
    1afa:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
				break;
    1afe:	8d b7       	in	r24, 0x3d	; 61
    1b00:	9e b7       	in	r25, 0x3e	; 62
    1b02:	0e 96       	adiw	r24, 0x0e	; 14
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	9e bf       	out	0x3e, r25	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	8d bf       	out	0x3d, r24	; 61
    1b0e:	24 c0       	rjmp	.+72     	; 0x1b58 <ATM_Programming_mode+0x15a>
			case   ATM_RESET_DATA_BASE :	
				/********************************************************
				*					Reset Database			 			*
				********************************************************/				
				if(SERVER_OPER_DataBase_Reset() == SERVER_OPER_OK)
    1b10:	0e 94 1f 10 	call	0x203e	; 0x203e <SERVER_OPER_DataBase_Reset>
    1b14:	81 11       	cpse	r24, r1
    1b16:	05 c0       	rjmp	.+10     	; 0x1b22 <ATM_Programming_mode+0x124>
				{
					String_F_PrintLine(PSTR("Deleted successfully"));
    1b18:	87 e0       	ldi	r24, 0x07	; 7
    1b1a:	99 e0       	ldi	r25, 0x09	; 9
    1b1c:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    1b20:	1b c0       	rjmp	.+54     	; 0x1b58 <ATM_Programming_mode+0x15a>
				}else{

					String_F_PrintLine(PSTR("problem With Data Base Call Service Support"));
    1b22:	8b ed       	ldi	r24, 0xDB	; 219
    1b24:	98 e0       	ldi	r25, 0x08	; 8
    1b26:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    1b2a:	16 c0       	rjmp	.+44     	; 0x1b58 <ATM_Programming_mode+0x15a>
				break;
			case  ATM_ADMIN_MODIFY :
				/********************************************************
				*					Modify Admin Data 					*
				********************************************************/		
				ATM_Admin_Modifying_Data();
    1b2c:	0e 94 05 0c 	call	0x180a	; 0x180a <ATM_Admin_Modifying_Data>
				break;
    1b30:	13 c0       	rjmp	.+38     	; 0x1b58 <ATM_Programming_mode+0x15a>
			case    ATM_EXIT_PROGRAMMING_MODE :
				/********************************************************
				*			Switching to Operating Mode					*
				********************************************************/
				String_F_PrintLine(PSTR("wait !!!"));
    1b32:	82 ed       	ldi	r24, 0xD2	; 210
    1b34:	98 e0       	ldi	r25, 0x08	; 8
    1b36:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
    1b3a:	9f ef       	ldi	r25, 0xFF	; 255
    1b3c:	2d e3       	ldi	r18, 0x3D	; 61
    1b3e:	89 e4       	ldi	r24, 0x49	; 73
    1b40:	91 50       	subi	r25, 0x01	; 1
    1b42:	20 40       	sbci	r18, 0x00	; 0
    1b44:	80 40       	sbci	r24, 0x00	; 0
    1b46:	e1 f7       	brne	.-8      	; 0x1b40 <ATM_Programming_mode+0x142>
    1b48:	00 c0       	rjmp	.+0      	; 0x1b4a <ATM_Programming_mode+0x14c>
    1b4a:	00 00       	nop
				_delay_ms(ATM_DLEAY_IN_S);
				ExitFlag = 1 ;
    1b4c:	c1 e0       	ldi	r28, 0x01	; 1
			break;				
    1b4e:	04 c0       	rjmp	.+8      	; 0x1b58 <ATM_Programming_mode+0x15a>
			default:
				/********************************************************
				*			Handling All Wrong Commands					*
				********************************************************/			
				String_F_PrintLine(PSTR("Wrong chose Please Try again"));
    1b50:	85 eb       	ldi	r24, 0xB5	; 181
    1b52:	98 e0       	ldi	r25, 0x08	; 8
    1b54:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
	String_F_PrintTwoLines(LCD_StrF[LCD_COMMANED_CLEAR_LCD] , LCD_StrF[LCD_Print_Programing_Mode]);

	_delay_ms(ATM_DLEAY_IN_S);
	
	
	while(!ExitFlag)
    1b58:	cc 23       	and	r28, r28
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <ATM_Programming_mode+0x160>
    1b5c:	8f cf       	rjmp	.-226    	; 0x1a7c <ATM_Programming_mode+0x7e>
				break ;
			
			
		}	
	}
}
    1b5e:	cf 91       	pop	r28
    1b60:	08 95       	ret

00001b62 <ATM_Operation_mode>:
		uint8_t ExitFlag =0 ; 
void ATM_Operation_mode(void)
{	
	uint8_t index =0 ;
	uint8_t	CommandFlag  =0 ;	
	LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_WELCOME_OPERATE]));
    1b62:	8d ed       	ldi	r24, 0xDD	; 221
    1b64:	9d e0       	ldi	r25, 0x0D	; 13
    1b66:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    1b6a:	ac 01       	movw	r20, r24
    1b6c:	61 e0       	ldi	r22, 0x01	; 1
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
	LCD_Send_String_WithLoc(2,1,Print_F(LCD_StrF[LCD_Print_MODE]));
    1b74:	81 ef       	ldi	r24, 0xF1	; 241
    1b76:	9d e0       	ldi	r25, 0x0D	; 13
    1b78:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    1b7c:	ac 01       	movw	r20, r24
    1b7e:	61 e0       	ldi	r22, 0x01	; 1
    1b80:	82 e0       	ldi	r24, 0x02	; 2
    1b82:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
	String_F_PrintTwoLines(LCD_StrF[LCD_Print_WELCOME_OPERATE] , LCD_StrF[LCD_Print_MODE]);
    1b86:	61 ef       	ldi	r22, 0xF1	; 241
    1b88:	7d e0       	ldi	r23, 0x0D	; 13
    1b8a:	8d ed       	ldi	r24, 0xDD	; 221
    1b8c:	9d e0       	ldi	r25, 0x0D	; 13
    1b8e:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <String_F_PrintTwoLines>
    1b92:	2f ef       	ldi	r18, 0xFF	; 255
    1b94:	8d e3       	ldi	r24, 0x3D	; 61
    1b96:	99 e4       	ldi	r25, 0x49	; 73
    1b98:	21 50       	subi	r18, 0x01	; 1
    1b9a:	80 40       	sbci	r24, 0x00	; 0
    1b9c:	90 40       	sbci	r25, 0x00	; 0
    1b9e:	e1 f7       	brne	.-8      	; 0x1b98 <ATM_Operation_mode+0x36>
    1ba0:	00 c0       	rjmp	.+0      	; 0x1ba2 <ATM_Operation_mode+0x40>
    1ba2:	00 00       	nop
    1ba4:	0b c2       	rjmp	.+1046   	; 0x1fbc <ATM_Operation_mode+0x45a>
	_delay_ms(ATM_DLEAY_IN_S);


	while(!ExitFlag)
	{
		index = 0 , KeyPad_Key = 0;
    1ba6:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <KeyPad_Key>
		memset(TempBlance , 0 , ADMIN_MAX_DAILY_LEN);
    1baa:	86 e0       	ldi	r24, 0x06	; 6
    1bac:	e5 eb       	ldi	r30, 0xB5	; 181
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	df 01       	movw	r26, r30
    1bb2:	1d 92       	st	X+, r1
    1bb4:	8a 95       	dec	r24
    1bb6:	e9 f7       	brne	.-6      	; 0x1bb2 <ATM_Operation_mode+0x50>

		LCD_Send_Command(LCD_COMMANED_CLEAR_LCD) ;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
		LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_PLEASE_ENTER]));
    1bbe:	85 e0       	ldi	r24, 0x05	; 5
    1bc0:	9e e0       	ldi	r25, 0x0E	; 14
    1bc2:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    1bc6:	ac 01       	movw	r20, r24
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
		LCD_Send_String_WithLoc(2,1,Print_F(LCD_StrF[LCD_Print_CARD]));
    1bd0:	8d e1       	ldi	r24, 0x1D	; 29
    1bd2:	9f e0       	ldi	r25, 0x0F	; 15
    1bd4:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    1bd8:	ac 01       	movw	r20, r24
    1bda:	61 e0       	ldi	r22, 0x01	; 1
    1bdc:	82 e0       	ldi	r24, 0x02	; 2
    1bde:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>



		String_F_PrintTwoLines(LCD_StrF[LCD_Print_PLEASE_ENTER] , LCD_StrF[LCD_Print_CARD]);
    1be2:	6d e1       	ldi	r22, 0x1D	; 29
    1be4:	7f e0       	ldi	r23, 0x0F	; 15
    1be6:	85 e0       	ldi	r24, 0x05	; 5
    1be8:	9e e0       	ldi	r25, 0x0E	; 14
    1bea:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <String_F_PrintTwoLines>
		while(Button_Read(ATM_Buttons, ATM_Insert_Card_Button_INDEX) == State_HIGH);
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	81 e7       	ldi	r24, 0x71	; 113
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	0e 94 82 16 	call	0x2d04	; 0x2d04 <Button_Read>
    1bf8:	81 30       	cpi	r24, 0x01	; 1
    1bfa:	c9 f3       	breq	.-14     	; 0x1bee <ATM_Operation_mode+0x8c>
		if(Button_Read(ATM_Buttons, ATM_Insert_Card_Button_INDEX) == State_LOW)
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	81 e7       	ldi	r24, 0x71	; 113
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 82 16 	call	0x2d04	; 0x2d04 <Button_Read>
    1c06:	81 11       	cpse	r24, r1
    1c08:	68 c1       	rjmp	.+720    	; 0x1eda <ATM_Operation_mode+0x378>
		{
			 ATM_Collect_CardData(&CardData);
    1c0a:	80 ef       	ldi	r24, 0xF0	; 240
    1c0c:	91 e0       	ldi	r25, 0x01	; 1
    1c0e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <ATM_Collect_CardData>
			CardAdd = SERVER_OPER_Search_CARD(&CardData , ATM_SEARCH_BY_PAN) ;
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	80 ef       	ldi	r24, 0xF0	; 240
    1c16:	91 e0       	ldi	r25, 0x01	; 1
    1c18:	0e 94 3b 10 	call	0x2076	; 0x2076 <SERVER_OPER_Search_CARD>
    1c1c:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <CardAdd+0x1>
    1c20:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <CardAdd>
		
		if ( CardAdd != -1 ) // if data exist
    1c24:	8f 3f       	cpi	r24, 0xFF	; 255
    1c26:	bf ef       	ldi	r27, 0xFF	; 255
    1c28:	9b 07       	cpc	r25, r27
    1c2a:	e9 f0       	breq	.+58     	; 0x1c66 <ATM_Operation_mode+0x104>
		{
			EEPROM_ReadByteS(CardAdd , (uint8_t *)&TempCardData , ATM_CARD_BLOCK_SIZE);	
    1c2c:	44 e2       	ldi	r20, 0x24	; 36
    1c2e:	65 ea       	ldi	r22, 0xA5	; 165
    1c30:	71 e0       	ldi	r23, 0x01	; 1
    1c32:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <EEPROM_ReadByteS>
			CardBalance = atoi((char *)TempCardData.CardBalance) ;
    1c36:	81 ec       	ldi	r24, 0xC1	; 193
    1c38:	91 e0       	ldi	r25, 0x01	; 1
    1c3a:	0e 94 67 20 	call	0x40ce	; 0x40ce <atoi>
    1c3e:	09 2e       	mov	r0, r25
    1c40:	00 0c       	add	r0, r0
    1c42:	aa 0b       	sbc	r26, r26
    1c44:	bb 0b       	sbc	r27, r27
    1c46:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <CardBalance>
    1c4a:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <CardBalance+0x1>
    1c4e:	a0 93 b3 00 	sts	0x00B3, r26	; 0x8000b3 <CardBalance+0x2>
    1c52:	b0 93 b4 00 	sts	0x00B4, r27	; 0x8000b4 <CardBalance+0x3>
			String_F_PrintLine(PSTR("This card Is Exist"));
    1c56:	86 e2       	ldi	r24, 0x26	; 38
    1c58:	92 e0       	ldi	r25, 0x02	; 2
    1c5a:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
			CardDataExist = 1 ;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <CardDataExist>
    1c64:	06 c0       	rjmp	.+12     	; 0x1c72 <ATM_Operation_mode+0x110>
		}else  // if data dose not exist
		{
			String_F_PrintLine(PSTR("Not exist Card Data"));
    1c66:	82 e1       	ldi	r24, 0x12	; 18
    1c68:	92 e0       	ldi	r25, 0x02	; 2
    1c6a:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
			CardDataExist = 0 ; 
    1c6e:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <CardDataExist>
		}			
		
			
		
			if (CardDataExist == 1)
    1c72:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <CardDataExist>
    1c76:	81 30       	cpi	r24, 0x01	; 1
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <ATM_Operation_mode+0x11a>
    1c7a:	2f c1       	rjmp	.+606    	; 0x1eda <ATM_Operation_mode+0x378>
			{
				
				
				LCD_Send_Command( LCD_COMMANED_CLEAR_LCD );
    1c7c:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
				LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_ENTER_THE]));
    1c80:	8d e2       	ldi	r24, 0x2D	; 45
    1c82:	9e e0       	ldi	r25, 0x0E	; 14
    1c84:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    1c88:	ac 01       	movw	r20, r24
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
				LCD_Send_String_WithLoc(2,1,Print_F(LCD_StrF[LCD_Print_TRANSAC_AMOUNT]));
    1c92:	81 e4       	ldi	r24, 0x41	; 65
    1c94:	9e e0       	ldi	r25, 0x0E	; 14
    1c96:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    1c9a:	ac 01       	movw	r20, r24
    1c9c:	61 e0       	ldi	r22, 0x01	; 1
    1c9e:	82 e0       	ldi	r24, 0x02	; 2
    1ca0:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
				String_F_PrintTwoLines(LCD_StrF[LCD_Print_ENTER_THE] , LCD_StrF[LCD_Print_TRANSAC_AMOUNT]);
    1ca4:	61 e4       	ldi	r22, 0x41	; 65
    1ca6:	7e e0       	ldi	r23, 0x0E	; 14
    1ca8:	8d e2       	ldi	r24, 0x2D	; 45
    1caa:	9e e0       	ldi	r25, 0x0E	; 14
    1cac:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <String_F_PrintTwoLines>
    1cb0:	2f ef       	ldi	r18, 0xFF	; 255
    1cb2:	8d e3       	ldi	r24, 0x3D	; 61
    1cb4:	99 e4       	ldi	r25, 0x49	; 73
    1cb6:	21 50       	subi	r18, 0x01	; 1
    1cb8:	80 40       	sbci	r24, 0x00	; 0
    1cba:	90 40       	sbci	r25, 0x00	; 0
    1cbc:	e1 f7       	brne	.-8      	; 0x1cb6 <ATM_Operation_mode+0x154>
    1cbe:	00 c0       	rjmp	.+0      	; 0x1cc0 <ATM_Operation_mode+0x15e>
    1cc0:	00 00       	nop
				_delay_ms(ATM_DLEAY_IN_S);
				
				
				
				String_F_PrintTwoLines(LCD_StrF[LCD_Print_ENTER_THE] , LCD_StrF[LCD_Print_TRANSAC_AMOUNT]);
    1cc2:	61 e4       	ldi	r22, 0x41	; 65
    1cc4:	7e e0       	ldi	r23, 0x0E	; 14
    1cc6:	8d e2       	ldi	r24, 0x2D	; 45
    1cc8:	9e e0       	ldi	r25, 0x0E	; 14
    1cca:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <String_F_PrintTwoLines>
				LCD_Send_Command( LCD_COMMANED_CLEAR_LCD );
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
				LCD_Send_String_WithLoc(1,1,(uint8_t *) Print_F(LCD_StrF[LCD_Print_TRANSACTION]));
    1cd4:	85 e5       	ldi	r24, 0x55	; 85
    1cd6:	9e e0       	ldi	r25, 0x0E	; 14
    1cd8:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    1cdc:	ac 01       	movw	r20, r24
    1cde:	61 e0       	ldi	r22, 0x01	; 1
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
				LCD_Goto_Location(2,1);
    1ce6:	61 e0       	ldi	r22, 0x01	; 1
    1ce8:	82 e0       	ldi	r24, 0x02	; 2
    1cea:	0e 94 ac 13 	call	0x2758	; 0x2758 <LCD_Goto_Location>
				String_F_PrintLine(LCD_StrF[LCD_Print_TRANSACTION] );
    1cee:	85 e5       	ldi	r24, 0x55	; 85
    1cf0:	9e e0       	ldi	r25, 0x0E	; 14
    1cf2:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
	_delay_ms(ATM_DLEAY_IN_S);


	while(!ExitFlag)
	{
		index = 0 , KeyPad_Key = 0;
    1cf6:	c0 e0       	ldi	r28, 0x00	; 0
    1cf8:	13 c0       	rjmp	.+38     	; 0x1d20 <ATM_Operation_mode+0x1be>
    1cfa:	af ef       	ldi	r26, 0xFF	; 255
    1cfc:	b3 ec       	ldi	r27, 0xC3	; 195
    1cfe:	29 e0       	ldi	r18, 0x09	; 9
    1d00:	a1 50       	subi	r26, 0x01	; 1
    1d02:	b0 40       	sbci	r27, 0x00	; 0
    1d04:	20 40       	sbci	r18, 0x00	; 0
    1d06:	e1 f7       	brne	.-8      	; 0x1d00 <ATM_Operation_mode+0x19e>
    1d08:	00 c0       	rjmp	.+0      	; 0x1d0a <ATM_Operation_mode+0x1a8>
    1d0a:	00 00       	nop
				while(1)
				{
					while(KeyPad_Key == 0)
					{
						_delay_ms(200);
						KeyPad_Key = KeyPad_GetPressedKey(&KeyPad);
    1d0c:	8b eb       	ldi	r24, 0xBB	; 187
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	0e 94 8c 12 	call	0x2518	; 0x2518 <KeyPad_GetPressedKey>
    1d14:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <KeyPad_Key>
						if((KeyPad_Key == '*'))	KeyPad_Key= 0 ; 
    1d18:	8a 32       	cpi	r24, 0x2A	; 42
    1d1a:	11 f4       	brne	.+4      	; 0x1d20 <ATM_Operation_mode+0x1be>
    1d1c:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <KeyPad_Key>
				LCD_Goto_Location(2,1);
				String_F_PrintLine(LCD_StrF[LCD_Print_TRANSACTION] );
				
				while(1)
				{
					while(KeyPad_Key == 0)
    1d20:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <KeyPad_Key>
    1d24:	88 23       	and	r24, r24
    1d26:	49 f3       	breq	.-46     	; 0x1cfa <ATM_Operation_mode+0x198>
						_delay_ms(200);
						KeyPad_Key = KeyPad_GetPressedKey(&KeyPad);
						if((KeyPad_Key == '*'))	KeyPad_Key= 0 ; 
					
					}
					if (KeyPad_Key == '#')
    1d28:	83 32       	cpi	r24, 0x23	; 35
    1d2a:	71 f0       	breq	.+28     	; 0x1d48 <ATM_Operation_mode+0x1e6>
					{
						break; 
					}else
					{
					
						LCD_Send_Character_CurrLoc('*');
    1d2c:	8a e2       	ldi	r24, 0x2A	; 42
    1d2e:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_Send_Character_CurrLoc>
						TempBlance[index++] = KeyPad_Key ;
    1d32:	ec 2f       	mov	r30, r28
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	eb 54       	subi	r30, 0x4B	; 75
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <KeyPad_Key>
    1d3e:	80 83       	st	Z, r24
						KeyPad_Key = 0 ;
    1d40:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <KeyPad_Key>
						break; 
					}else
					{
					
						LCD_Send_Character_CurrLoc('*');
						TempBlance[index++] = KeyPad_Key ;
    1d44:	cf 5f       	subi	r28, 0xFF	; 255
						KeyPad_Key = 0 ;
					}
				
				
				}
    1d46:	ec cf       	rjmp	.-40     	; 0x1d20 <ATM_Operation_mode+0x1be>
			
			
				// Get Card PAN and Balance from  CARD 
				UserTransAmount = atoi( (char *)TempBlance ) ;
    1d48:	85 eb       	ldi	r24, 0xB5	; 181
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	0e 94 67 20 	call	0x40ce	; 0x40ce <atoi>
    1d50:	09 2e       	mov	r0, r25
    1d52:	00 0c       	add	r0, r0
    1d54:	aa 0b       	sbc	r26, r26
    1d56:	bb 0b       	sbc	r27, r27
    1d58:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <UserTransAmount>
    1d5c:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <UserTransAmount+0x1>
    1d60:	a0 93 9d 01 	sts	0x019D, r26	; 0x80019d <UserTransAmount+0x2>
    1d64:	b0 93 9e 01 	sts	0x019E, r27	; 0x80019e <UserTransAmount+0x3>
				LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
				LCD_Send_Integer_CurrLoc(UserTransAmount , 7);
    1d6e:	67 e0       	ldi	r22, 0x07	; 7
    1d70:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <UserTransAmount>
    1d74:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <UserTransAmount+0x1>
    1d78:	0e 94 38 14 	call	0x2870	; 0x2870 <LCD_Send_Integer_CurrLoc>
    1d7c:	8f ef       	ldi	r24, 0xFF	; 255
    1d7e:	9d e3       	ldi	r25, 0x3D	; 61
    1d80:	a9 e4       	ldi	r26, 0x49	; 73
    1d82:	81 50       	subi	r24, 0x01	; 1
    1d84:	90 40       	sbci	r25, 0x00	; 0
    1d86:	a0 40       	sbci	r26, 0x00	; 0
    1d88:	e1 f7       	brne	.-8      	; 0x1d82 <ATM_Operation_mode+0x220>
    1d8a:	00 c0       	rjmp	.+0      	; 0x1d8c <ATM_Operation_mode+0x22a>
    1d8c:	00 00       	nop
				_delay_ms(ATM_DLEAY_IN_S);
				if((UserTransAmount > MaxDailyWithDraw) || (UserTransAmount > CardBalance))
    1d8e:	40 91 9b 01 	lds	r20, 0x019B	; 0x80019b <UserTransAmount>
    1d92:	50 91 9c 01 	lds	r21, 0x019C	; 0x80019c <UserTransAmount+0x1>
    1d96:	60 91 9d 01 	lds	r22, 0x019D	; 0x80019d <UserTransAmount+0x2>
    1d9a:	70 91 9e 01 	lds	r23, 0x019E	; 0x80019e <UserTransAmount+0x3>
    1d9e:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <MaxDailyWithDraw>
    1da2:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <MaxDailyWithDraw+0x1>
    1da6:	a0 91 af 00 	lds	r26, 0x00AF	; 0x8000af <MaxDailyWithDraw+0x2>
    1daa:	b0 91 b0 00 	lds	r27, 0x00B0	; 0x8000b0 <MaxDailyWithDraw+0x3>
    1dae:	84 17       	cp	r24, r20
    1db0:	95 07       	cpc	r25, r21
    1db2:	a6 07       	cpc	r26, r22
    1db4:	b7 07       	cpc	r27, r23
    1db6:	68 f0       	brcs	.+26     	; 0x1dd2 <ATM_Operation_mode+0x270>
    1db8:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <CardBalance>
    1dbc:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <CardBalance+0x1>
    1dc0:	a0 91 b3 00 	lds	r26, 0x00B3	; 0x8000b3 <CardBalance+0x2>
    1dc4:	b0 91 b4 00 	lds	r27, 0x00B4	; 0x8000b4 <CardBalance+0x3>
    1dc8:	84 17       	cp	r24, r20
    1dca:	95 07       	cpc	r25, r21
    1dcc:	a6 07       	cpc	r26, r22
    1dce:	b7 07       	cpc	r27, r23
    1dd0:	28 f5       	brcc	.+74     	; 0x1e1c <ATM_Operation_mode+0x2ba>
				{
					LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
					LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_Wrong]));
    1dd8:	89 e6       	ldi	r24, 0x69	; 105
    1dda:	9e e0       	ldi	r25, 0x0E	; 14
    1ddc:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    1de0:	ac 01       	movw	r20, r24
    1de2:	61 e0       	ldi	r22, 0x01	; 1
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
					LCD_Send_String_WithLoc(2,1,Print_F(LCD_StrF[LCD_Print_Transaction]));
    1dea:	8d e7       	ldi	r24, 0x7D	; 125
    1dec:	9e e0       	ldi	r25, 0x0E	; 14
    1dee:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    1df2:	ac 01       	movw	r20, r24
    1df4:	61 e0       	ldi	r22, 0x01	; 1
    1df6:	82 e0       	ldi	r24, 0x02	; 2
    1df8:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
					String_F_PrintTwoLines(LCD_StrF[LCD_Print_Wrong] , LCD_StrF[LCD_Print_Transaction] );
    1dfc:	6d e7       	ldi	r22, 0x7D	; 125
    1dfe:	7e e0       	ldi	r23, 0x0E	; 14
    1e00:	89 e6       	ldi	r24, 0x69	; 105
    1e02:	9e e0       	ldi	r25, 0x0E	; 14
    1e04:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <String_F_PrintTwoLines>
    1e08:	bf ef       	ldi	r27, 0xFF	; 255
    1e0a:	2d e3       	ldi	r18, 0x3D	; 61
    1e0c:	89 e4       	ldi	r24, 0x49	; 73
    1e0e:	b1 50       	subi	r27, 0x01	; 1
    1e10:	20 40       	sbci	r18, 0x00	; 0
    1e12:	80 40       	sbci	r24, 0x00	; 0
    1e14:	e1 f7       	brne	.-8      	; 0x1e0e <ATM_Operation_mode+0x2ac>
    1e16:	00 c0       	rjmp	.+0      	; 0x1e18 <ATM_Operation_mode+0x2b6>
    1e18:	00 00       	nop
    1e1a:	5f c0       	rjmp	.+190    	; 0x1eda <ATM_Operation_mode+0x378>

					_delay_ms(ATM_DLEAY_IN_S); 
				}else{
					// right transaction
					CardBalance -= UserTransAmount ; 
    1e1c:	84 1b       	sub	r24, r20
    1e1e:	95 0b       	sbc	r25, r21
    1e20:	a6 0b       	sbc	r26, r22
    1e22:	b7 0b       	sbc	r27, r23
    1e24:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <CardBalance>
    1e28:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <CardBalance+0x1>
    1e2c:	a0 93 b3 00 	sts	0x00B3, r26	; 0x8000b3 <CardBalance+0x2>
    1e30:	b0 93 b4 00 	sts	0x00B4, r27	; 0x8000b4 <CardBalance+0x3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1e34:	4a e0       	ldi	r20, 0x0A	; 10
    1e36:	61 ec       	ldi	r22, 0xC1	; 193
    1e38:	71 e0       	ldi	r23, 0x01	; 1
    1e3a:	0e 94 a7 20 	call	0x414e	; 0x414e <__itoa_ncheck>
					itoa(CardBalance , (char *)TempCardData.CardBalance , 10 ) ;
					LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
					LCD_Send_Integer_CurrLoc(CardBalance , 7);
    1e44:	67 e0       	ldi	r22, 0x07	; 7
    1e46:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <CardBalance>
    1e4a:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <CardBalance+0x1>
    1e4e:	0e 94 38 14 	call	0x2870	; 0x2870 <LCD_Send_Integer_CurrLoc>
					printf("Current  balance is : %i \n" , CardBalance);
    1e52:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <CardBalance+0x3>
    1e56:	8f 93       	push	r24
    1e58:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <CardBalance+0x2>
    1e5c:	8f 93       	push	r24
    1e5e:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <CardBalance+0x1>
    1e62:	8f 93       	push	r24
    1e64:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <CardBalance>
    1e68:	8f 93       	push	r24
    1e6a:	81 e3       	ldi	r24, 0x31	; 49
    1e6c:	91 e0       	ldi	r25, 0x01	; 1
    1e6e:	9f 93       	push	r25
    1e70:	8f 93       	push	r24
    1e72:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <printf>
					EEPROM_WriteByteS(CardAdd , (uint8_t *)&TempCardData , ATM_CARD_BLOCK_SIZE);
    1e76:	44 e2       	ldi	r20, 0x24	; 36
    1e78:	65 ea       	ldi	r22, 0xA5	; 165
    1e7a:	71 e0       	ldi	r23, 0x01	; 1
    1e7c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <CardAdd>
    1e80:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <CardAdd+0x1>
    1e84:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <EEPROM_WriteByteS>
					LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_Success]));
    1e88:	8d e6       	ldi	r24, 0x6D	; 109
    1e8a:	9f e0       	ldi	r25, 0x0F	; 15
    1e8c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    1e90:	ac 01       	movw	r20, r24
    1e92:	61 e0       	ldi	r22, 0x01	; 1
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
					LCD_Send_String_WithLoc(2,1,Print_F(LCD_StrF[LCD_Print_Transaction]));
    1e9a:	8d e7       	ldi	r24, 0x7D	; 125
    1e9c:	9e e0       	ldi	r25, 0x0E	; 14
    1e9e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    1ea2:	ac 01       	movw	r20, r24
    1ea4:	61 e0       	ldi	r22, 0x01	; 1
    1ea6:	82 e0       	ldi	r24, 0x02	; 2
    1ea8:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
					Motor_Dir( DIR_LEFT , 70);
    1eac:	66 e4       	ldi	r22, 0x46	; 70
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	0e 94 19 15 	call	0x2a32	; 0x2a32 <Motor_Dir>
    1eb4:	9f ef       	ldi	r25, 0xFF	; 255
    1eb6:	a3 ed       	ldi	r26, 0xD3	; 211
    1eb8:	b0 e3       	ldi	r27, 0x30	; 48
    1eba:	91 50       	subi	r25, 0x01	; 1
    1ebc:	a0 40       	sbci	r26, 0x00	; 0
    1ebe:	b0 40       	sbci	r27, 0x00	; 0
    1ec0:	e1 f7       	brne	.-8      	; 0x1eba <ATM_Operation_mode+0x358>
    1ec2:	00 c0       	rjmp	.+0      	; 0x1ec4 <ATM_Operation_mode+0x362>
    1ec4:	00 00       	nop
					_delay_ms(1000);
					Motor_Dir( DIR_LEFT , 0);
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	0e 94 19 15 	call	0x2a32	; 0x2a32 <Motor_Dir>
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
			}
		}else
		{
			;
		}
		String_F_PrintLine(PSTR("Please Choose one of the following Commands "));
    1eda:	85 ee       	ldi	r24, 0xE5	; 229
    1edc:	91 e0       	ldi	r25, 0x01	; 1
    1ede:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
		printf_P(PSTR("************************ 1- Try another Transaction  **************************************\n" ));
    1ee2:	88 e8       	ldi	r24, 0x88	; 136
    1ee4:	91 e0       	ldi	r25, 0x01	; 1
    1ee6:	9f 93       	push	r25
    1ee8:	8f 93       	push	r24
    1eea:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
		printf_P(PSTR("************************ 2- Exit **********************************************************\n" ));
    1eee:	8b e2       	ldi	r24, 0x2B	; 43
    1ef0:	91 e0       	ldi	r25, 0x01	; 1
    1ef2:	9f 93       	push	r25
    1ef4:	8f 93       	push	r24
    1ef6:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
		String_F_PrintLine(PSTR("END OF SELECTION !!!"));
    1efa:	86 e1       	ldi	r24, 0x16	; 22
    1efc:	91 e0       	ldi	r25, 0x01	; 1
    1efe:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
		printf_P(PSTR("\n" ));
    1f02:	84 e1       	ldi	r24, 0x14	; 20
    1f04:	91 e0       	ldi	r25, 0x01	; 1
    1f06:	9f 93       	push	r25
    1f08:	8f 93       	push	r24
    1f0a:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
		LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
		LCD_Send_String_WithLoc(1,1,(uint8_t *)"Select Command");
    1f14:	4c e4       	ldi	r20, 0x4C	; 76
    1f16:	51 e0       	ldi	r21, 0x01	; 1
    1f18:	61 e0       	ldi	r22, 0x01	; 1
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
		LCD_Send_String_WithLoc(2,1,(uint8_t *)"1.Try   2.Exit");
    1f20:	4b e5       	ldi	r20, 0x5B	; 91
    1f22:	51 e0       	ldi	r21, 0x01	; 1
    1f24:	61 e0       	ldi	r22, 0x01	; 1
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
 
		CommandFlag  = 1;
		while(CommandFlag)
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
		printf_P(PSTR("\n" ));
		LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
		LCD_Send_String_WithLoc(1,1,(uint8_t *)"Select Command");
		LCD_Send_String_WithLoc(2,1,(uint8_t *)"1.Try   2.Exit");
 
		CommandFlag  = 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
		while(CommandFlag)
    1f3a:	3e c0       	rjmp	.+124    	; 0x1fb8 <ATM_Operation_mode+0x456>
		{
			
			KeyPad_Key = 0 ;
    1f3c:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <KeyPad_Key>
			while(KeyPad_Key == 0)
    1f40:	13 c0       	rjmp	.+38     	; 0x1f68 <ATM_Operation_mode+0x406>
    1f42:	2f ef       	ldi	r18, 0xFF	; 255
    1f44:	83 ec       	ldi	r24, 0xC3	; 195
    1f46:	99 e0       	ldi	r25, 0x09	; 9
    1f48:	21 50       	subi	r18, 0x01	; 1
    1f4a:	80 40       	sbci	r24, 0x00	; 0
    1f4c:	90 40       	sbci	r25, 0x00	; 0
    1f4e:	e1 f7       	brne	.-8      	; 0x1f48 <ATM_Operation_mode+0x3e6>
    1f50:	00 c0       	rjmp	.+0      	; 0x1f52 <ATM_Operation_mode+0x3f0>
    1f52:	00 00       	nop
			{
				_delay_ms(200);
				KeyPad_Key = KeyPad_GetPressedKey(&KeyPad);
    1f54:	8b eb       	ldi	r24, 0xBB	; 187
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	0e 94 8c 12 	call	0x2518	; 0x2518 <KeyPad_GetPressedKey>
    1f5c:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <KeyPad_Key>
				if((KeyPad_Key == '*'))	KeyPad_Key= 0 ;
    1f60:	8a 32       	cpi	r24, 0x2A	; 42
    1f62:	11 f4       	brne	.+4      	; 0x1f68 <ATM_Operation_mode+0x406>
    1f64:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <KeyPad_Key>
		CommandFlag  = 1;
		while(CommandFlag)
		{
			
			KeyPad_Key = 0 ;
			while(KeyPad_Key == 0)
    1f68:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <KeyPad_Key>
    1f6c:	88 23       	and	r24, r24
    1f6e:	49 f3       	breq	.-46     	; 0x1f42 <ATM_Operation_mode+0x3e0>
				_delay_ms(200);
				KeyPad_Key = KeyPad_GetPressedKey(&KeyPad);
				if((KeyPad_Key == '*'))	KeyPad_Key= 0 ;
			
			}
			LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
			LCD_Send_String_WithLoc(1,1,(uint8_t *)"You Pressed");
    1f76:	4a e6       	ldi	r20, 0x6A	; 106
    1f78:	51 e0       	ldi	r21, 0x01	; 1
    1f7a:	61 e0       	ldi	r22, 0x01	; 1
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
			LCD_Send_Character_WithLoc(2,6,KeyPad_Key);
    1f82:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <KeyPad_Key>
    1f86:	66 e0       	ldi	r22, 0x06	; 6
    1f88:	82 e0       	ldi	r24, 0x02	; 2
    1f8a:	0e 94 c9 13 	call	0x2792	; 0x2792 <LCD_Send_Character_WithLoc>
			switch(KeyPad_Key)
    1f8e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <KeyPad_Key>
    1f92:	81 33       	cpi	r24, 0x31	; 49
    1f94:	19 f0       	breq	.+6      	; 0x1f9c <ATM_Operation_mode+0x43a>
    1f96:	82 33       	cpi	r24, 0x32	; 50
    1f98:	29 f0       	breq	.+10     	; 0x1fa4 <ATM_Operation_mode+0x442>
    1f9a:	09 c0       	rjmp	.+18     	; 0x1fae <ATM_Operation_mode+0x44c>
			{
				case '1' :
							ExitFlag = 0 ; 
    1f9c:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <ExitFlag>
							CommandFlag = 0 ;
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
					break; 
    1fa2:	0a c0       	rjmp	.+20     	; 0x1fb8 <ATM_Operation_mode+0x456>
					
				case '2' : 
							ExitFlag = 1 ;	
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <ExitFlag>
							CommandFlag = 0 ;	
    1faa:	80 e0       	ldi	r24, 0x00	; 0
					break;
    1fac:	05 c0       	rjmp	.+10     	; 0x1fb8 <ATM_Operation_mode+0x456>
			
				default: 	
					String_F_PrintLine(PSTR("Wrong Command!!!"));
    1fae:	83 e0       	ldi	r24, 0x03	; 3
    1fb0:	91 e0       	ldi	r25, 0x01	; 1
    1fb2:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
					CommandFlag = 1 ;	
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
		LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
		LCD_Send_String_WithLoc(1,1,(uint8_t *)"Select Command");
		LCD_Send_String_WithLoc(2,1,(uint8_t *)"1.Try   2.Exit");
 
		CommandFlag  = 1;
		while(CommandFlag)
    1fb8:	81 11       	cpse	r24, r1
    1fba:	c0 cf       	rjmp	.-128    	; 0x1f3c <ATM_Operation_mode+0x3da>
	String_F_PrintTwoLines(LCD_StrF[LCD_Print_WELCOME_OPERATE] , LCD_StrF[LCD_Print_MODE]);

	_delay_ms(ATM_DLEAY_IN_S);


	while(!ExitFlag)
    1fbc:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <ExitFlag>
    1fc0:	88 23       	and	r24, r24
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <ATM_Operation_mode+0x464>
    1fc4:	f0 cd       	rjmp	.-1056   	; 0x1ba6 <ATM_Operation_mode+0x44>
    1fc6:	af ef       	ldi	r26, 0xFF	; 255
    1fc8:	b7 ea       	ldi	r27, 0xA7	; 167
    1fca:	21 e6       	ldi	r18, 0x61	; 97
    1fcc:	a1 50       	subi	r26, 0x01	; 1
    1fce:	b0 40       	sbci	r27, 0x00	; 0
    1fd0:	20 40       	sbci	r18, 0x00	; 0
    1fd2:	e1 f7       	brne	.-8      	; 0x1fcc <ATM_Operation_mode+0x46a>
    1fd4:	00 c0       	rjmp	.+0      	; 0x1fd6 <ATM_Operation_mode+0x474>
    1fd6:	00 00       	nop
				}
		}
	
	}
		_delay_ms(2000);
		String_F_PrintLine(PSTR("Thank You   "));
    1fd8:	86 ef       	ldi	r24, 0xF6	; 246
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	0e 94 99 16 	call	0x2d32	; 0x2d32 <String_F_PrintLine>
		LCD_Send_Command( LCD_COMMANED_CLEAR_LCD );
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
		LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_ENTER_THANK]));
    1fe6:	85 e4       	ldi	r24, 0x45	; 69
    1fe8:	9f e0       	ldi	r25, 0x0F	; 15
    1fea:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    1fee:	ac 01       	movw	r20, r24
    1ff0:	61 e0       	ldi	r22, 0x01	; 1
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
		LCD_Send_String_WithLoc(2,1,Print_F(LCD_StrF[LCD_Print_YOU]));
    1ff8:	89 e5       	ldi	r24, 0x59	; 89
    1ffa:	9f e0       	ldi	r25, 0x0F	; 15
    1ffc:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    2000:	ac 01       	movw	r20, r24
    2002:	61 e0       	ldi	r22, 0x01	; 1
    2004:	82 e0       	ldi	r24, 0x02	; 2
    2006:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
    200a:	ff cf       	rjmp	.-2      	; 0x200a <ATM_Operation_mode+0x4a8>

0000200c <ATM_Lock_Fun>:


void ATM_Lock_Fun(void)
{
	  
	LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_ERROR_Temp]));
    200c:	81 e9       	ldi	r24, 0x91	; 145
    200e:	9e e0       	ldi	r25, 0x0E	; 14
    2010:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    2014:	ac 01       	movw	r20, r24
    2016:	61 e0       	ldi	r22, 0x01	; 1
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
	LCD_Send_String_WithLoc(2,1,Print_F(LCD_StrF[LCD_Print_CALL_XXXXXX]));
    201e:	85 ea       	ldi	r24, 0xA5	; 165
    2020:	9e e0       	ldi	r25, 0x0E	; 14
    2022:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print_F>
    2026:	ac 01       	movw	r20, r24
    2028:	61 e0       	ldi	r22, 0x01	; 1
    202a:	82 e0       	ldi	r24, 0x02	; 2
    202c:	0e 94 29 14 	call	0x2852	; 0x2852 <LCD_Send_String_WithLoc>
	String_F_PrintTwoLines(PSTR("LOCKED") , PSTR("Please Call XXXX")  );
    2030:	66 ed       	ldi	r22, 0xD6	; 214
    2032:	70 e0       	ldi	r23, 0x00	; 0
    2034:	8f ec       	ldi	r24, 0xCF	; 207
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <String_F_PrintTwoLines>
    203c:	ff cf       	rjmp	.-2      	; 0x203c <ATM_Lock_Fun+0x30>

0000203e <SERVER_OPER_DataBase_Reset>:

#include "Server.h"


SERVER_OPER_Status_t SERVER_OPER_DataBase_Reset(void)
{
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
    2042:	00 d0       	rcall	.+0      	; 0x2044 <SERVER_OPER_DataBase_Reset+0x6>
    2044:	00 d0       	rcall	.+0      	; 0x2046 <SERVER_OPER_DataBase_Reset+0x8>
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62

	// add dummy card 
	uint16_t TXBuffer[2]  ={0,ATM_SERVER_CARD_START_ADD};
    204a:	1a 82       	std	Y+2, r1	; 0x02
    204c:	19 82       	std	Y+1, r1	; 0x01
    204e:	8a ec       	ldi	r24, 0xCA	; 202
    2050:	9b e6       	ldi	r25, 0x6B	; 107
    2052:	9c 83       	std	Y+4, r25	; 0x04
    2054:	8b 83       	std	Y+3, r24	; 0x03
	EEPROM_WriteByteS(0, (uint8_t *)&TXBuffer ,4);			// write number of card 
    2056:	44 e0       	ldi	r20, 0x04	; 4
    2058:	be 01       	movw	r22, r28
    205a:	6f 5f       	subi	r22, 0xFF	; 255
    205c:	7f 4f       	sbci	r23, 0xFF	; 255
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <EEPROM_WriteByteS>
	
	return SERVER_OPER_OK ;
}
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	08 95       	ret

00002076 <SERVER_OPER_Search_CARD>:
	return SERVER_OPER_OK ;
}

	CardData_t TempCardData = {0};	uint16_t TempAdd = 0 , TempNumCards =0 ;
uint16_t SERVER_OPER_Search_CARD(CardData_t * CardData , uint8_t SearchBase )
{
    2076:	ff 92       	push	r15
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	8c 01       	movw	r16, r24
    2082:	f6 2e       	mov	r15, r22

	EEPROM_ReadByteS(0,(uint8_t*)&TempNumCards , 2);
    2084:	42 e0       	ldi	r20, 0x02	; 2
    2086:	61 ea       	ldi	r22, 0xA1	; 161
    2088:	71 e0       	ldi	r23, 0x01	; 1
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <EEPROM_ReadByteS>
	if(TempNumCards == 0)	{printf_P(PSTR("Hint!!!! Empty DataBase \n")) ; return -1  ;}
    2092:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <TempNumCards>
    2096:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <TempNumCards+0x1>
    209a:	89 2b       	or	r24, r25
    209c:	09 f0       	breq	.+2      	; 0x20a0 <SERVER_OPER_Search_CARD+0x2a>
    209e:	4c c0       	rjmp	.+152    	; 0x2138 <SERVER_OPER_Search_CARD+0xc2>
    20a0:	8d e6       	ldi	r24, 0x6D	; 109
    20a2:	9f e0       	ldi	r25, 0x0F	; 15
    20a4:	9f 93       	push	r25
    20a6:	8f 93       	push	r24
    20a8:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	8f ef       	ldi	r24, 0xFF	; 255
    20b2:	9f ef       	ldi	r25, 0xFF	; 255
    20b4:	4d c0       	rjmp	.+154    	; 0x2150 <SERVER_OPER_Search_CARD+0xda>
	for (uint16_t iter = 2 ; iter < ATM_SERVER_TOTAL_CAPCITY *  ATM_CARD_ADDRESS_SIZE ; iter += ATM_CARD_ADDRESS_SIZE)
	{
		EEPROM_ReadByteS(iter ,(uint8_t *)&TempAdd  , ATM_CARD_ADDRESS_SIZE);
    20b6:	42 e0       	ldi	r20, 0x02	; 2
    20b8:	63 ea       	ldi	r22, 0xA3	; 163
    20ba:	71 e0       	ldi	r23, 0x01	; 1
    20bc:	ce 01       	movw	r24, r28
    20be:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <EEPROM_ReadByteS>
		if (TempAdd != 0xffffu)
    20c2:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <TempAdd>
    20c6:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <TempAdd+0x1>
    20ca:	8f 3f       	cpi	r24, 0xFF	; 255
    20cc:	2f ef       	ldi	r18, 0xFF	; 255
    20ce:	92 07       	cpc	r25, r18
    20d0:	89 f1       	breq	.+98     	; 0x2134 <SERVER_OPER_Search_CARD+0xbe>
		{
			TempNumCards--;
    20d2:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <TempNumCards>
    20d6:	30 91 a2 01 	lds	r19, 0x01A2	; 0x8001a2 <TempNumCards+0x1>
    20da:	21 50       	subi	r18, 0x01	; 1
    20dc:	31 09       	sbc	r19, r1
    20de:	30 93 a2 01 	sts	0x01A2, r19	; 0x8001a2 <TempNumCards+0x1>
    20e2:	20 93 a1 01 	sts	0x01A1, r18	; 0x8001a1 <TempNumCards>
			EEPROM_ReadByteS(TempAdd , (uint8_t *)&TempCardData , ATM_CARD_BLOCK_SIZE );
    20e6:	44 e2       	ldi	r20, 0x24	; 36
    20e8:	65 ea       	ldi	r22, 0xA5	; 165
    20ea:	71 e0       	ldi	r23, 0x01	; 1
    20ec:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <EEPROM_ReadByteS>
			if ( ATM_SEARCH_BY_PAN == SearchBase)
    20f0:	f1 10       	cpse	r15, r1
    20f2:	0e c0       	rjmp	.+28     	; 0x2110 <SERVER_OPER_Search_CARD+0x9a>
			{
				if (strcmp((char *)TempCardData.CardPAN,(char *)CardData->CardPAN)== 0 )
    20f4:	b8 01       	movw	r22, r16
    20f6:	65 5f       	subi	r22, 0xF5	; 245
    20f8:	7f 4f       	sbci	r23, 0xFF	; 255
    20fa:	80 eb       	ldi	r24, 0xB0	; 176
    20fc:	91 e0       	ldi	r25, 0x01	; 1
    20fe:	0e 94 93 20 	call	0x4126	; 0x4126 <strcmp>
    2102:	89 2b       	or	r24, r25
    2104:	89 f4       	brne	.+34     	; 0x2128 <SERVER_OPER_Search_CARD+0xb2>
				{
					return TempAdd ;
    2106:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <TempAdd>
    210a:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <TempAdd+0x1>
    210e:	20 c0       	rjmp	.+64     	; 0x2150 <SERVER_OPER_Search_CARD+0xda>
				}
			}else{
				
				if (strcmp((char *)TempCardData.CardName,(char *)CardData->CardName)== 0 )
    2110:	b8 01       	movw	r22, r16
    2112:	85 ea       	ldi	r24, 0xA5	; 165
    2114:	91 e0       	ldi	r25, 0x01	; 1
    2116:	0e 94 93 20 	call	0x4126	; 0x4126 <strcmp>
    211a:	89 2b       	or	r24, r25
    211c:	29 f4       	brne	.+10     	; 0x2128 <SERVER_OPER_Search_CARD+0xb2>
				{
					return TempAdd ;
    211e:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <TempAdd>
    2122:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <TempAdd+0x1>
    2126:	14 c0       	rjmp	.+40     	; 0x2150 <SERVER_OPER_Search_CARD+0xda>

								
			}
			
							
			if (TempNumCards == 0)
    2128:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <TempNumCards>
    212c:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <TempNumCards+0x1>
    2130:	89 2b       	or	r24, r25
    2132:	61 f0       	breq	.+24     	; 0x214c <SERVER_OPER_Search_CARD+0xd6>
uint16_t SERVER_OPER_Search_CARD(CardData_t * CardData , uint8_t SearchBase )
{

	EEPROM_ReadByteS(0,(uint8_t*)&TempNumCards , 2);
	if(TempNumCards == 0)	{printf_P(PSTR("Hint!!!! Empty DataBase \n")) ; return -1  ;}
	for (uint16_t iter = 2 ; iter < ATM_SERVER_TOTAL_CAPCITY *  ATM_CARD_ADDRESS_SIZE ; iter += ATM_CARD_ADDRESS_SIZE)
    2134:	22 96       	adiw	r28, 0x02	; 2
    2136:	02 c0       	rjmp	.+4      	; 0x213c <SERVER_OPER_Search_CARD+0xc6>
    2138:	c2 e0       	ldi	r28, 0x02	; 2
    213a:	d0 e0       	ldi	r29, 0x00	; 0
    213c:	ca 3c       	cpi	r28, 0xCA	; 202
    213e:	8b e6       	ldi	r24, 0x6B	; 107
    2140:	d8 07       	cpc	r29, r24
    2142:	08 f4       	brcc	.+2      	; 0x2146 <SERVER_OPER_Search_CARD+0xd0>
    2144:	b8 cf       	rjmp	.-144    	; 0x20b6 <SERVER_OPER_Search_CARD+0x40>
		{
			;
		}
	}
	
	return -1 ; 
    2146:	8f ef       	ldi	r24, 0xFF	; 255
    2148:	9f ef       	ldi	r25, 0xFF	; 255
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <SERVER_OPER_Search_CARD+0xda>
			}
			
							
			if (TempNumCards == 0)
			{
				return -1 ;
    214c:	8f ef       	ldi	r24, 0xFF	; 255
    214e:	9f ef       	ldi	r25, 0xFF	; 255
			;
		}
	}
	
	return -1 ; 
}
    2150:	df 91       	pop	r29
    2152:	cf 91       	pop	r28
    2154:	1f 91       	pop	r17
    2156:	0f 91       	pop	r16
    2158:	ff 90       	pop	r15
    215a:	08 95       	ret

0000215c <SERVER_OPER_Add_CARD>:




SERVER_OPER_Status_t SERVER_OPER_Add_CARD(CardData_t * CardData)
{
    215c:	0f 93       	push	r16
    215e:	1f 93       	push	r17
    2160:	cf 93       	push	r28
    2162:	df 93       	push	r29
    2164:	00 d0       	rcall	.+0      	; 0x2166 <SERVER_OPER_Add_CARD+0xa>
    2166:	00 d0       	rcall	.+0      	; 0x2168 <SERVER_OPER_Add_CARD+0xc>
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	8c 01       	movw	r16, r24

	uint16_t NewAdd = 0 , NumOfCards  =0	;
    216e:	1a 82       	std	Y+2, r1	; 0x02
    2170:	19 82       	std	Y+1, r1	; 0x01
    2172:	1c 82       	std	Y+4, r1	; 0x04
    2174:	1b 82       	std	Y+3, r1	; 0x03
	EEPROM_ReadByteS(0, (uint8_t *)&NumOfCards ,2);
    2176:	42 e0       	ldi	r20, 0x02	; 2
    2178:	be 01       	movw	r22, r28
    217a:	6d 5f       	subi	r22, 0xFD	; 253
    217c:	7f 4f       	sbci	r23, 0xFF	; 255
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <EEPROM_ReadByteS>
	if(NumOfCards >= ATM_SERVER_TOTAL_CAPCITY)
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	9c 81       	ldd	r25, Y+4	; 0x04
    218a:	85 3e       	cpi	r24, 0xE5	; 229
    218c:	95 43       	sbci	r25, 0x35	; 53
    218e:	70 f5       	brcc	.+92     	; 0x21ec <SERVER_OPER_Add_CARD+0x90>
	{
		return SERVER_OPER_FullSpace ; 
	}else if (SERVER_OPER_Search_CARD(CardData , ATM_SEARCH_BY_PAN) == -1 )
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	c8 01       	movw	r24, r16
    2194:	0e 94 3b 10 	call	0x2076	; 0x2076 <SERVER_OPER_Search_CARD>
    2198:	01 96       	adiw	r24, 0x01	; 1
    219a:	51 f5       	brne	.+84     	; 0x21f0 <SERVER_OPER_Add_CARD+0x94>
	{
		NewAdd = ATM_SERVER_CARD_START_ADD + ( NumOfCards++ * ATM_CARD_BLOCK_SIZE) ;
    219c:	2b 81       	ldd	r18, Y+3	; 0x03
    219e:	3c 81       	ldd	r19, Y+4	; 0x04
    21a0:	c9 01       	movw	r24, r18
    21a2:	01 96       	adiw	r24, 0x01	; 1
    21a4:	9c 83       	std	Y+4, r25	; 0x04
    21a6:	8b 83       	std	Y+3, r24	; 0x03
    21a8:	44 e2       	ldi	r20, 0x24	; 36
    21aa:	42 9f       	mul	r20, r18
    21ac:	c0 01       	movw	r24, r0
    21ae:	43 9f       	mul	r20, r19
    21b0:	90 0d       	add	r25, r0
    21b2:	11 24       	eor	r1, r1
    21b4:	86 53       	subi	r24, 0x36	; 54
    21b6:	94 49       	sbci	r25, 0x94	; 148
    21b8:	9a 83       	std	Y+2, r25	; 0x02
    21ba:	89 83       	std	Y+1, r24	; 0x01
		EEPROM_WriteByteS(NewAdd , (uint8_t *)CardData , ATM_CARD_BLOCK_SIZE );											// store card data
    21bc:	b8 01       	movw	r22, r16
    21be:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <EEPROM_WriteByteS>
		EEPROM_WriteByteS(NumOfCards*ATM_CARD_ADDRESS_SIZE+2 ,  (uint8_t *)&NewAdd , ATM_CARD_ADDRESS_SIZE );			// store card address
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	9c 81       	ldd	r25, Y+4	; 0x04
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	42 e0       	ldi	r20, 0x02	; 2
    21ca:	be 01       	movw	r22, r28
    21cc:	6f 5f       	subi	r22, 0xFF	; 255
    21ce:	7f 4f       	sbci	r23, 0xFF	; 255
    21d0:	88 0f       	add	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <EEPROM_WriteByteS>
		EEPROM_WriteByteS(ATM_SERVER_FIRST_ADDRESS , (uint8_t *)&NumOfCards , ATM_CARD_ADDRESS_SIZE );
    21d8:	42 e0       	ldi	r20, 0x02	; 2
    21da:	be 01       	movw	r22, r28
    21dc:	6d 5f       	subi	r22, 0xFD	; 253
    21de:	7f 4f       	sbci	r23, 0xFF	; 255
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <EEPROM_WriteByteS>
		return SERVER_OPER_Exist ;
	}

	
	
	return SERVER_OPER_OK ;
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	03 c0       	rjmp	.+6      	; 0x21f2 <SERVER_OPER_Add_CARD+0x96>

	uint16_t NewAdd = 0 , NumOfCards  =0	;
	EEPROM_ReadByteS(0, (uint8_t *)&NumOfCards ,2);
	if(NumOfCards >= ATM_SERVER_TOTAL_CAPCITY)
	{
		return SERVER_OPER_FullSpace ; 
    21ec:	83 e0       	ldi	r24, 0x03	; 3
    21ee:	01 c0       	rjmp	.+2      	; 0x21f2 <SERVER_OPER_Add_CARD+0x96>
		EEPROM_WriteByteS(NewAdd , (uint8_t *)CardData , ATM_CARD_BLOCK_SIZE );											// store card data
		EEPROM_WriteByteS(NumOfCards*ATM_CARD_ADDRESS_SIZE+2 ,  (uint8_t *)&NewAdd , ATM_CARD_ADDRESS_SIZE );			// store card address
		EEPROM_WriteByteS(ATM_SERVER_FIRST_ADDRESS , (uint8_t *)&NumOfCards , ATM_CARD_ADDRESS_SIZE );
	}else
	{
		return SERVER_OPER_Exist ;
    21f0:	81 e0       	ldi	r24, 0x01	; 1
	}

	
	
	return SERVER_OPER_OK ;
}
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	df 91       	pop	r29
    21fc:	cf 91       	pop	r28
    21fe:	1f 91       	pop	r17
    2200:	0f 91       	pop	r16
    2202:	08 95       	ret

00002204 <SERVER_OPER_Remove_CARD>:
}



SERVER_OPER_Status_t SERVER_OPER_Remove_CARD(CardData_t * CardData)
{
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	00 d0       	rcall	.+0      	; 0x220a <SERVER_OPER_Remove_CARD+0x6>
    220a:	00 d0       	rcall	.+0      	; 0x220c <SERVER_OPER_Remove_CARD+0x8>
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
	uint16_t TempIndex = SERVER_OPER_Search_CARD(CardData , ATM_SEARCH_BY_PAN) ;
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	0e 94 3b 10 	call	0x2076	; 0x2076 <SERVER_OPER_Search_CARD>
	uint16_t ResetIndex = 0xffffu ;
    2216:	2f ef       	ldi	r18, 0xFF	; 255
    2218:	3f ef       	ldi	r19, 0xFF	; 255
    221a:	3a 83       	std	Y+2, r19	; 0x02
    221c:	29 83       	std	Y+1, r18	; 0x01
	uint16_t NumOfCards =0 ; 
    221e:	1c 82       	std	Y+4, r1	; 0x04
    2220:	1b 82       	std	Y+3, r1	; 0x03
	if(TempIndex != -1)
    2222:	8f 3f       	cpi	r24, 0xFF	; 255
    2224:	2f ef       	ldi	r18, 0xFF	; 255
    2226:	92 07       	cpc	r25, r18
    2228:	e9 f0       	breq	.+58     	; 0x2264 <SERVER_OPER_Remove_CARD+0x60>
	{
		EEPROM_WriteByteS(TempIndex ,(uint8_t *)&ResetIndex , 2 );
    222a:	42 e0       	ldi	r20, 0x02	; 2
    222c:	be 01       	movw	r22, r28
    222e:	6f 5f       	subi	r22, 0xFF	; 255
    2230:	7f 4f       	sbci	r23, 0xFF	; 255
    2232:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <EEPROM_WriteByteS>
		EEPROM_ReadByteS(0 ,(uint8_t * )&NumOfCards ,2 );
    2236:	42 e0       	ldi	r20, 0x02	; 2
    2238:	be 01       	movw	r22, r28
    223a:	6d 5f       	subi	r22, 0xFD	; 253
    223c:	7f 4f       	sbci	r23, 0xFF	; 255
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <EEPROM_ReadByteS>
		--NumOfCards ;
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	9c 81       	ldd	r25, Y+4	; 0x04
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	9c 83       	std	Y+4, r25	; 0x04
    224e:	8b 83       	std	Y+3, r24	; 0x03
		EEPROM_WriteByteS(0 , (uint8_t * )&NumOfCards , 2);
    2250:	42 e0       	ldi	r20, 0x02	; 2
    2252:	be 01       	movw	r22, r28
    2254:	6d 5f       	subi	r22, 0xFD	; 253
    2256:	7f 4f       	sbci	r23, 0xFF	; 255
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <EEPROM_WriteByteS>
	{
		return SERVER_OPER_Not_Exist ; 
	}
	

	return SERVER_OPER_OK ;
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	01 c0       	rjmp	.+2      	; 0x2266 <SERVER_OPER_Remove_CARD+0x62>
		EEPROM_ReadByteS(0 ,(uint8_t * )&NumOfCards ,2 );
		--NumOfCards ;
		EEPROM_WriteByteS(0 , (uint8_t * )&NumOfCards , 2);
	}else
	{
		return SERVER_OPER_Not_Exist ; 
    2264:	82 e0       	ldi	r24, 0x02	; 2
	}
	

	return SERVER_OPER_OK ;
}
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	08 95       	ret

00002274 <SERVER_OPER_GetTotal_CARDNum>:




uint16_t SERVER_OPER_GetTotal_CARDNum(void)
{
    2274:	cf 93       	push	r28
    2276:	df 93       	push	r29
    2278:	00 d0       	rcall	.+0      	; 0x227a <SERVER_OPER_GetTotal_CARDNum+0x6>
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
		uint16_t Totla_CardNum  = 0 ;
    227e:	1a 82       	std	Y+2, r1	; 0x02
    2280:	19 82       	std	Y+1, r1	; 0x01
		EEPROM_ReadByteS(ATM_SERVER_FIRST_ADDRESS ,(uint8_t *)&Totla_CardNum  , ATM_CARD_ADDRESS_SIZE);
    2282:	42 e0       	ldi	r20, 0x02	; 2
    2284:	be 01       	movw	r22, r28
    2286:	6f 5f       	subi	r22, 0xFF	; 255
    2288:	7f 4f       	sbci	r23, 0xFF	; 255
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <EEPROM_ReadByteS>
		return Totla_CardNum ;
}
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	9a 81       	ldd	r25, Y+2	; 0x02
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	08 95       	ret

000022a0 <SERVER_ADMIN_Set_Pass>:




SERVER_OPER_Status_t SERVER_ADMIN_Set_Pass(uint8_t * StrName , uint8_t * Password)
{
    22a0:	ef 92       	push	r14
    22a2:	ff 92       	push	r15
    22a4:	0f 93       	push	r16
    22a6:	1f 93       	push	r17
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29
    22ac:	1f 92       	push	r1
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	7c 01       	movw	r14, r24
    22b4:	8b 01       	movw	r16, r22
		uint8_t AdminFlag  = 'S';
    22b6:	83 e5       	ldi	r24, 0x53	; 83
    22b8:	89 83       	std	Y+1, r24	; 0x01
		EEPROM_WriteByteS(SERVER_ADMIN_FLAG_START_ADD ,(uint8_t *)&AdminFlag	, 1);		
    22ba:	41 e0       	ldi	r20, 0x01	; 1
    22bc:	be 01       	movw	r22, r28
    22be:	6f 5f       	subi	r22, 0xFF	; 255
    22c0:	7f 4f       	sbci	r23, 0xFF	; 255
    22c2:	88 ee       	ldi	r24, 0xE8	; 232
    22c4:	9d ef       	ldi	r25, 0xFD	; 253
    22c6:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <EEPROM_WriteByteS>
		EEPROM_WriteByteS(SERVER_ADMIN_NAME_START_ADD ,(uint8_t *)StrName		, ADMIN_USERNAME_LEN-1);
    22ca:	49 e0       	ldi	r20, 0x09	; 9
    22cc:	b7 01       	movw	r22, r14
    22ce:	82 ef       	ldi	r24, 0xF2	; 242
    22d0:	9d ef       	ldi	r25, 0xFD	; 253
    22d2:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <EEPROM_WriteByteS>
		EEPROM_WriteByteS(SERVER_ADMIN_PASS_START_ADD ,(uint8_t *)Password		, ADMIN_PASSWARD_LEN-1);
    22d6:	49 e0       	ldi	r20, 0x09	; 9
    22d8:	b8 01       	movw	r22, r16
    22da:	8c ef       	ldi	r24, 0xFC	; 252
    22dc:	9d ef       	ldi	r25, 0xFD	; 253
    22de:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <EEPROM_WriteByteS>
	return SERVER_OPER_OK ;

}
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	0f 90       	pop	r0
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	ff 90       	pop	r15
    22f0:	ef 90       	pop	r14
    22f2:	08 95       	ret

000022f4 <SERVER_ADMIN_Get_Pass>:




SERVER_OPER_Status_t SERVER_ADMIN_Get_Pass(uint8_t * StrName , uint8_t * Password)
{
    22f4:	ef 92       	push	r14
    22f6:	ff 92       	push	r15
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	1f 92       	push	r1
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	7c 01       	movw	r14, r24
    2308:	8b 01       	movw	r16, r22
	uint8_t AdminFlag  = 0 ;
    230a:	19 82       	std	Y+1, r1	; 0x01
	EEPROM_ReadByteS(SERVER_ADMIN_FLAG_START_ADD ,(uint8_t *)&AdminFlag ,1);
    230c:	41 e0       	ldi	r20, 0x01	; 1
    230e:	be 01       	movw	r22, r28
    2310:	6f 5f       	subi	r22, 0xFF	; 255
    2312:	7f 4f       	sbci	r23, 0xFF	; 255
    2314:	88 ee       	ldi	r24, 0xE8	; 232
    2316:	9d ef       	ldi	r25, 0xFD	; 253
    2318:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <EEPROM_ReadByteS>
	if (AdminFlag == 'S')
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	83 35       	cpi	r24, 0x53	; 83
    2320:	61 f4       	brne	.+24     	; 0x233a <SERVER_ADMIN_Get_Pass+0x46>
	{
		EEPROM_ReadByteS(SERVER_ADMIN_NAME_START_ADD ,(uint8_t *)StrName , ADMIN_USERNAME_LEN  );
    2322:	4a e0       	ldi	r20, 0x0A	; 10
    2324:	b7 01       	movw	r22, r14
    2326:	82 ef       	ldi	r24, 0xF2	; 242
    2328:	9d ef       	ldi	r25, 0xFD	; 253
    232a:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <EEPROM_ReadByteS>
		EEPROM_ReadByteS(SERVER_ADMIN_PASS_START_ADD ,(uint8_t *)Password , ADMIN_PASSWARD_LEN );
    232e:	4a e0       	ldi	r20, 0x0A	; 10
    2330:	b8 01       	movw	r22, r16
    2332:	8c ef       	ldi	r24, 0xFC	; 252
    2334:	9d ef       	ldi	r25, 0xFD	; 253
    2336:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <EEPROM_ReadByteS>
	}
	

	return SERVER_OPER_OK ;

}
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	0f 90       	pop	r0
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ff 90       	pop	r15
    2348:	ef 90       	pop	r14
    234a:	08 95       	ret

0000234c <SERVER_ADMIN_Set_Temp>:




SERVER_OPER_Status_t SERVER_ADMIN_Set_Temp(uint8_t * MaxTemp)
{
    234c:	0f 93       	push	r16
    234e:	1f 93       	push	r17
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	00 d0       	rcall	.+0      	; 0x2356 <SERVER_ADMIN_Set_Temp+0xa>
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	8c 01       	movw	r16, r24
	uint16_t AdminFlag  =0 ;
    235c:	1a 82       	std	Y+2, r1	; 0x02
    235e:	19 82       	std	Y+1, r1	; 0x01

	EEPROM_WriteByteS(SERVER_ADMIN_FLAG_START_ADD ,(uint8_t *)&AdminFlag ,ATM_CARD_ADDRESS_SIZE);
    2360:	42 e0       	ldi	r20, 0x02	; 2
    2362:	be 01       	movw	r22, r28
    2364:	6f 5f       	subi	r22, 0xFF	; 255
    2366:	7f 4f       	sbci	r23, 0xFF	; 255
    2368:	88 ee       	ldi	r24, 0xE8	; 232
    236a:	9d ef       	ldi	r25, 0xFD	; 253
    236c:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <EEPROM_WriteByteS>
	EEPROM_WriteByteS(SERVER_ADMIN_TEMP_START_ADD ,(uint8_t *)MaxTemp ,ADMIN_TEMP_LEN);
    2370:	45 e0       	ldi	r20, 0x05	; 5
    2372:	b8 01       	movw	r22, r16
    2374:	86 e0       	ldi	r24, 0x06	; 6
    2376:	9e ef       	ldi	r25, 0xFE	; 254
    2378:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <EEPROM_WriteByteS>
	return SERVER_OPER_OK ;
}
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	df 91       	pop	r29
    2384:	cf 91       	pop	r28
    2386:	1f 91       	pop	r17
    2388:	0f 91       	pop	r16
    238a:	08 95       	ret

0000238c <SERVER_ADMIN_Get_Temp>:
SERVER_OPER_Status_t SERVER_ADMIN_Get_Temp(uint8_t * MaxTemp)
{
//	uint16_t AdminFlag  =0 ;
//	EEPROM_ReadByteS(SERVER_ADMIN_FLAG_START_ADD ,(uint8_t *)&AdminFlag ,ATM_CARD_ADDRESS_SIZE);
//	if(AdminFlag == 0)
	EEPROM_ReadByteS(SERVER_ADMIN_TEMP_START_ADD ,(uint8_t *)MaxTemp ,ADMIN_PASSWARD_LEN);
    238c:	4a e0       	ldi	r20, 0x0A	; 10
    238e:	bc 01       	movw	r22, r24
    2390:	86 e0       	ldi	r24, 0x06	; 6
    2392:	9e ef       	ldi	r25, 0xFE	; 254
    2394:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <EEPROM_ReadByteS>
	
//	*MaxTemp = atoi((char *)Temp_MAxTemp);
	return SERVER_OPER_OK ;
}
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	08 95       	ret

0000239c <SERVER_ADMIN_Error>:



SERVER_OPER_Status_t SERVER_ADMIN_Error(Admin_ErrorAction_t Action )
{
    239c:	cf 93       	push	r28
    239e:	df 93       	push	r29
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	2a 97       	sbiw	r28, 0x0a	; 10
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	cd bf       	out	0x3d, r28	; 61
	uint8_t  Error[ADMIN_ERROR_LEN] = "ERROR" ; 
    23b0:	96 e0       	ldi	r25, 0x06	; 6
    23b2:	ec ef       	ldi	r30, 0xFC	; 252
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	de 01       	movw	r26, r28
    23b8:	11 96       	adiw	r26, 0x01	; 1
    23ba:	01 90       	ld	r0, Z+
    23bc:	0d 92       	st	X+, r0
    23be:	9a 95       	dec	r25
    23c0:	e1 f7       	brne	.-8      	; 0x23ba <SERVER_ADMIN_Error+0x1e>
    23c2:	fe 01       	movw	r30, r28
    23c4:	37 96       	adiw	r30, 0x07	; 7
    23c6:	94 e0       	ldi	r25, 0x04	; 4
    23c8:	df 01       	movw	r26, r30
    23ca:	1d 92       	st	X+, r1
    23cc:	9a 95       	dec	r25
    23ce:	e9 f7       	brne	.-6      	; 0x23ca <SERVER_ADMIN_Error+0x2e>
	if (Action == ADMIN_ERROR_SET)
    23d0:	81 11       	cpse	r24, r1
    23d2:	09 c0       	rjmp	.+18     	; 0x23e6 <SERVER_ADMIN_Error+0x4a>
	{
		EEPROM_WriteByteS(SERVER_ADMIN_ERROR_START_ADD ,(uint8_t *)Error ,ADMIN_ERROR_LEN);
    23d4:	4a e0       	ldi	r20, 0x0A	; 10
    23d6:	be 01       	movw	r22, r28
    23d8:	6f 5f       	subi	r22, 0xFF	; 255
    23da:	7f 4f       	sbci	r23, 0xFF	; 255
    23dc:	80 e1       	ldi	r24, 0x10	; 16
    23de:	9e ef       	ldi	r25, 0xFE	; 254
    23e0:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <EEPROM_WriteByteS>
    23e4:	0f c0       	rjmp	.+30     	; 0x2404 <SERVER_ADMIN_Error+0x68>
		
	}else if (Action == ADMIN_ERROR_CLEAR )
    23e6:	81 30       	cpi	r24, 0x01	; 1
    23e8:	69 f4       	brne	.+26     	; 0x2404 <SERVER_ADMIN_Error+0x68>
	{
		memset(Error , 0 , ADMIN_ERROR_LEN);
    23ea:	be 01       	movw	r22, r28
    23ec:	6f 5f       	subi	r22, 0xFF	; 255
    23ee:	7f 4f       	sbci	r23, 0xFF	; 255
    23f0:	8a e0       	ldi	r24, 0x0A	; 10
    23f2:	fb 01       	movw	r30, r22
    23f4:	11 92       	st	Z+, r1
    23f6:	8a 95       	dec	r24
    23f8:	e9 f7       	brne	.-6      	; 0x23f4 <SERVER_ADMIN_Error+0x58>
		EEPROM_WriteByteS(SERVER_ADMIN_ERROR_START_ADD ,(uint8_t *)Error ,ADMIN_ERROR_LEN);
    23fa:	4a e0       	ldi	r20, 0x0A	; 10
    23fc:	80 e1       	ldi	r24, 0x10	; 16
    23fe:	9e ef       	ldi	r25, 0xFE	; 254
    2400:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <EEPROM_WriteByteS>
	}
	return SERVER_OPER_OK ; 
}
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	2a 96       	adiw	r28, 0x0a	; 10
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	df 91       	pop	r29
    2414:	cf 91       	pop	r28
    2416:	08 95       	ret

00002418 <SERVER_ADMIN_Error_Get>:

uint8_t SERVER_ADMIN_Error_Get(void)
{
    2418:	0f 93       	push	r16
    241a:	1f 93       	push	r17
    241c:	cf 93       	push	r28
    241e:	df 93       	push	r29
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	2a 97       	sbiw	r28, 0x0a	; 10
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	de bf       	out	0x3e, r29	; 62
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t  Error[ADMIN_ERROR_LEN] = {0} ;
    2430:	8e 01       	movw	r16, r28
    2432:	0f 5f       	subi	r16, 0xFF	; 255
    2434:	1f 4f       	sbci	r17, 0xFF	; 255
    2436:	8a e0       	ldi	r24, 0x0A	; 10
    2438:	f8 01       	movw	r30, r16
    243a:	11 92       	st	Z+, r1
    243c:	8a 95       	dec	r24
    243e:	e9 f7       	brne	.-6      	; 0x243a <SERVER_ADMIN_Error_Get+0x22>
	EEPROM_ReadByteS(SERVER_ADMIN_ERROR_START_ADD ,(uint8_t *)Error , ADMIN_ERROR_LEN);
    2440:	4a e0       	ldi	r20, 0x0A	; 10
    2442:	b8 01       	movw	r22, r16
    2444:	80 e1       	ldi	r24, 0x10	; 16
    2446:	9e ef       	ldi	r25, 0xFE	; 254
    2448:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <EEPROM_ReadByteS>
	if (strcmp((char *)Error , "ERROR") == 0)
    244c:	6c ef       	ldi	r22, 0xFC	; 252
    244e:	70 e0       	ldi	r23, 0x00	; 0
    2450:	c8 01       	movw	r24, r16
    2452:	0e 94 93 20 	call	0x4126	; 0x4126 <strcmp>
    2456:	89 2b       	or	r24, r25
    2458:	11 f4       	brne	.+4      	; 0x245e <SERVER_ADMIN_Error_Get+0x46>
	{
		return 1 ;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	01 c0       	rjmp	.+2      	; 0x2460 <SERVER_ADMIN_Error_Get+0x48>
	}else{
		return 0 ; 
    245e:	80 e0       	ldi	r24, 0x00	; 0
	}
	return SERVER_OPER_OK ;
}
    2460:	2a 96       	adiw	r28, 0x0a	; 10
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
    246c:	df 91       	pop	r29
    246e:	cf 91       	pop	r28
    2470:	1f 91       	pop	r17
    2472:	0f 91       	pop	r16
    2474:	08 95       	ret

00002476 <SERVER_ADMIN_Set_MAximum_DailyAmount>:



SERVER_OPER_Status_t SERVER_ADMIN_Set_MAximum_DailyAmount(uint8_t * MaxDailyAmount)
{
	EEPROM_WriteByteS(SERVER_ADMIN_MAX_DAILY_AMOUNT , MaxDailyAmount , ADMIN_MAX_DAILY_LEN );
    2476:	46 e0       	ldi	r20, 0x06	; 6
    2478:	bc 01       	movw	r22, r24
    247a:	8a e1       	ldi	r24, 0x1A	; 26
    247c:	9e ef       	ldi	r25, 0xFE	; 254
    247e:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <EEPROM_WriteByteS>
	return SERVER_OPER_OK ;
}
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	08 95       	ret

00002486 <KeyPad_Initialization>:
 * brief  : this function used to initialize keypad
 * param. : KeyPadInit pointer to the handler of keypad
 * return : void 
 */
void KeyPad_Initialization(KeyPad_t * KeyPad)
{
    2486:	ff 92       	push	r15
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	8c 01       	movw	r16, r24
    /* for output pins  --> all colomn will set as autput pins*/
	KeyPad_gpio.mode = GPIO_MODE_OUTPUT ;
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <KeyPad_gpio+0x1>
	for(uint8_t iter =0 ; iter < _NUM_OF_ColumnS ;iter++)
    2498:	f1 2c       	mov	r15, r1
    249a:	19 c0       	rjmp	.+50     	; 0x24ce <KeyPad_Initialization+0x48>
	{
		KeyPad_gpio.pin = KeyPad->ColumnPins[iter].Pin ;
    249c:	cf 2d       	mov	r28, r15
    249e:	d0 e0       	ldi	r29, 0x00	; 0
    24a0:	ce 01       	movw	r24, r28
    24a2:	88 0f       	add	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	c8 0f       	add	r28, r24
    24a8:	d9 1f       	adc	r29, r25
    24aa:	c0 0f       	add	r28, r16
    24ac:	d1 1f       	adc	r29, r17
    24ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    24b0:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <KeyPad_gpio>
		HAL_GPIO_Pin_Init(KeyPad->ColumnPins[iter].Port , &KeyPad_gpio);
    24b4:	68 ec       	ldi	r22, 0xC8	; 200
    24b6:	71 e0       	ldi	r23, 0x01	; 1
    24b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    24ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    24bc:	0e 94 3a 18 	call	0x3074	; 0x3074 <HAL_GPIO_Pin_Init>
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iter].Port , KeyPad->ColumnPins[iter].Pin , WRIGHT_SECOND);
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	6e 85       	ldd	r22, Y+14	; 0x0e
    24c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    24c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    24c8:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
 */
void KeyPad_Initialization(KeyPad_t * KeyPad)
{
    /* for output pins  --> all colomn will set as autput pins*/
	KeyPad_gpio.mode = GPIO_MODE_OUTPUT ;
	for(uint8_t iter =0 ; iter < _NUM_OF_ColumnS ;iter++)
    24cc:	f3 94       	inc	r15
    24ce:	82 e0       	ldi	r24, 0x02	; 2
    24d0:	8f 15       	cp	r24, r15
    24d2:	20 f7       	brcc	.-56     	; 0x249c <KeyPad_Initialization+0x16>
		HAL_GPIO_Pin_Init(KeyPad->ColumnPins[iter].Port , &KeyPad_gpio);
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iter].Port , KeyPad->ColumnPins[iter].Pin , WRIGHT_SECOND);
	}


	KeyPad_gpio.mode = GPIO_MODE_INPUT ;
    24d4:	e8 ec       	ldi	r30, 0xC8	; 200
    24d6:	f1 e0       	ldi	r31, 0x01	; 1
    24d8:	11 82       	std	Z+1, r1	; 0x01
	KeyPad_gpio.pull = WRIGHT_SECOND ;
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	82 83       	std	Z+2, r24	; 0x02
	for(uint8_t iter =0 ; iter < _NUM_OF_ROWS ;iter++)
    24de:	c0 e0       	ldi	r28, 0x00	; 0
    24e0:	13 c0       	rjmp	.+38     	; 0x2508 <KeyPad_Initialization+0x82>
	{
		KeyPad_gpio.pin = KeyPad->RowPins[iter].Pin ;
    24e2:	ec 2f       	mov	r30, r28
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	cf 01       	movw	r24, r30
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	e8 0f       	add	r30, r24
    24ee:	f9 1f       	adc	r31, r25
    24f0:	e0 0f       	add	r30, r16
    24f2:	f1 1f       	adc	r31, r17
    24f4:	82 81       	ldd	r24, Z+2	; 0x02
    24f6:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <KeyPad_gpio>
		HAL_GPIO_Pin_Init(KeyPad->RowPins[iter].Port , &KeyPad_gpio);
    24fa:	68 ec       	ldi	r22, 0xC8	; 200
    24fc:	71 e0       	ldi	r23, 0x01	; 1
    24fe:	80 81       	ld	r24, Z
    2500:	91 81       	ldd	r25, Z+1	; 0x01
    2502:	0e 94 3a 18 	call	0x3074	; 0x3074 <HAL_GPIO_Pin_Init>
	}


	KeyPad_gpio.mode = GPIO_MODE_INPUT ;
	KeyPad_gpio.pull = WRIGHT_SECOND ;
	for(uint8_t iter =0 ; iter < _NUM_OF_ROWS ;iter++)
    2506:	cf 5f       	subi	r28, 0xFF	; 255
    2508:	c4 30       	cpi	r28, 0x04	; 4
    250a:	58 f3       	brcs	.-42     	; 0x24e2 <KeyPad_Initialization+0x5c>
		HAL_GPIO_Pin_Init(KeyPad->RowPins[iter].Port , &KeyPad_gpio);
	}	
	


}/* END_FUN KeyPad_Initialization()*/
    250c:	df 91       	pop	r29
    250e:	cf 91       	pop	r28
    2510:	1f 91       	pop	r17
    2512:	0f 91       	pop	r16
    2514:	ff 90       	pop	r15
    2516:	08 95       	ret

00002518 <KeyPad_GetPressedKey>:
 * brief  : this function used to return the pressed key 
 * param. : void
 * return : pressed character 
 */
char KeyPad_GetPressedKey(KeyPad_t * KeyPad)
{
    2518:	cf 92       	push	r12
    251a:	df 92       	push	r13
    251c:	ef 92       	push	r14
    251e:	ff 92       	push	r15
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	ec 01       	movw	r28, r24
	char Key = 0;
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
    252a:	c1 2c       	mov	r12, r1
    252c:	4d c0       	rjmp	.+154    	; 0x25c8 <KeyPad_GetPressedKey+0xb0>
	{

		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_FIRST) ;
    252e:	0c 2d       	mov	r16, r12
    2530:	10 e0       	ldi	r17, 0x00	; 0
    2532:	f8 01       	movw	r30, r16
    2534:	ee 0f       	add	r30, r30
    2536:	ff 1f       	adc	r31, r31
    2538:	e0 0f       	add	r30, r16
    253a:	f1 1f       	adc	r31, r17
    253c:	ec 0f       	add	r30, r28
    253e:	fd 1f       	adc	r31, r29
    2540:	40 e0       	ldi	r20, 0x00	; 0
    2542:	66 85       	ldd	r22, Z+14	; 0x0e
    2544:	84 85       	ldd	r24, Z+12	; 0x0c
    2546:	95 85       	ldd	r25, Z+13	; 0x0d
    2548:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
		for (uint8_t iterROW = 0 ; iterROW < _NUM_OF_ROWS ; iterROW++)
    254c:	d1 2c       	mov	r13, r1
    254e:	2a c0       	rjmp	.+84     	; 0x25a4 <KeyPad_GetPressedKey+0x8c>
		{
			
			if ( HAL_GPIO_READPIN(KeyPad->RowPins[iterROW].Port ,KeyPad->RowPins[iterROW].Pin ) == WRIGHT_FIRST )
    2550:	ed 2c       	mov	r14, r13
    2552:	f1 2c       	mov	r15, r1
    2554:	f7 01       	movw	r30, r14
    2556:	ee 0f       	add	r30, r30
    2558:	ff 1f       	adc	r31, r31
    255a:	ee 0d       	add	r30, r14
    255c:	ff 1d       	adc	r31, r15
    255e:	ec 0f       	add	r30, r28
    2560:	fd 1f       	adc	r31, r29
    2562:	62 81       	ldd	r22, Z+2	; 0x02
    2564:	80 81       	ld	r24, Z
    2566:	91 81       	ldd	r25, Z+1	; 0x01
    2568:	0e 94 4d 18 	call	0x309a	; 0x309a <HAL_GPIO_READPIN>
    256c:	81 11       	cpse	r24, r1
    256e:	19 c0       	rjmp	.+50     	; 0x25a2 <KeyPad_GetPressedKey+0x8a>
			{
				
				HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;
    2570:	c8 01       	movw	r24, r16
    2572:	88 0f       	add	r24, r24
    2574:	99 1f       	adc	r25, r25
    2576:	80 0f       	add	r24, r16
    2578:	91 1f       	adc	r25, r17
    257a:	c8 0f       	add	r28, r24
    257c:	d9 1f       	adc	r29, r25
    257e:	41 e0       	ldi	r20, 0x01	; 1
    2580:	6e 85       	ldd	r22, Y+14	; 0x0e
    2582:	8c 85       	ldd	r24, Y+12	; 0x0c
    2584:	9d 85       	ldd	r25, Y+13	; 0x0d
    2586:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
				return arr_KeyPad_char[iterROW][iterCOL] ;
    258a:	c7 01       	movw	r24, r14
    258c:	88 0f       	add	r24, r24
    258e:	99 1f       	adc	r25, r25
    2590:	8e 0d       	add	r24, r14
    2592:	9f 1d       	adc	r25, r15
    2594:	80 53       	subi	r24, 0x30	; 48
    2596:	9f 4f       	sbci	r25, 0xFF	; 255
    2598:	fc 01       	movw	r30, r24
    259a:	e0 0f       	add	r30, r16
    259c:	f1 1f       	adc	r31, r17
    259e:	80 81       	ld	r24, Z
    25a0:	18 c0       	rjmp	.+48     	; 0x25d2 <KeyPad_GetPressedKey+0xba>
	char Key = 0;
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
	{

		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_FIRST) ;
		for (uint8_t iterROW = 0 ; iterROW < _NUM_OF_ROWS ; iterROW++)
    25a2:	d3 94       	inc	r13
    25a4:	83 e0       	ldi	r24, 0x03	; 3
    25a6:	8d 15       	cp	r24, r13
    25a8:	98 f6       	brcc	.-90     	; 0x2550 <KeyPad_GetPressedKey+0x38>
				return arr_KeyPad_char[iterROW][iterCOL] ;
			}else{
				;
			}
		}
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;
    25aa:	f8 01       	movw	r30, r16
    25ac:	ee 0f       	add	r30, r30
    25ae:	ff 1f       	adc	r31, r31
    25b0:	0e 0f       	add	r16, r30
    25b2:	1f 1f       	adc	r17, r31
    25b4:	fe 01       	movw	r30, r28
    25b6:	e0 0f       	add	r30, r16
    25b8:	f1 1f       	adc	r31, r17
    25ba:	41 e0       	ldi	r20, 0x01	; 1
    25bc:	66 85       	ldd	r22, Z+14	; 0x0e
    25be:	84 85       	ldd	r24, Z+12	; 0x0c
    25c0:	95 85       	ldd	r25, Z+13	; 0x0d
    25c2:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
 * return : pressed character 
 */
char KeyPad_GetPressedKey(KeyPad_t * KeyPad)
{
	char Key = 0;
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
    25c6:	c3 94       	inc	r12
    25c8:	82 e0       	ldi	r24, 0x02	; 2
    25ca:	8c 15       	cp	r24, r12
    25cc:	08 f0       	brcs	.+2      	; 0x25d0 <KeyPad_GetPressedKey+0xb8>
    25ce:	af cf       	rjmp	.-162    	; 0x252e <KeyPad_GetPressedKey+0x16>
		}
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;

	}
	
return Key ;
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	df 91       	pop	r29
    25d4:	cf 91       	pop	r28
    25d6:	1f 91       	pop	r17
    25d8:	0f 91       	pop	r16
    25da:	ff 90       	pop	r15
    25dc:	ef 90       	pop	r14
    25de:	df 90       	pop	r13
    25e0:	cf 90       	pop	r12
    25e2:	08 95       	ret

000025e4 <LCD_Triger_Enable>:
 * return : void 
 */


static void LCD_Triger_Enable(void)
{
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
	
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_E_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_E_PIN].Pin,GPIO_PIN_SET);  // set enable pin
    25e8:	cc ed       	ldi	r28, 0xDC	; 220
    25ea:	d0 e0       	ldi	r29, 0x00	; 0
    25ec:	41 e0       	ldi	r20, 0x01	; 1
    25ee:	68 85       	ldd	r22, Y+8	; 0x08
    25f0:	8e 81       	ldd	r24, Y+6	; 0x06
    25f2:	9f 81       	ldd	r25, Y+7	; 0x07
    25f4:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    25f8:	85 e0       	ldi	r24, 0x05	; 5
    25fa:	8a 95       	dec	r24
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <LCD_Triger_Enable+0x16>
    25fe:	00 00       	nop
	_delay_us(1);
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_E_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_E_PIN].Pin,GPIO_PIN_RESET);  // set enable pin
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	68 85       	ldd	r22, Y+8	; 0x08
    2604:	8e 81       	ldd	r24, Y+6	; 0x06
    2606:	9f 81       	ldd	r25, Y+7	; 0x07
    2608:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    260c:	8f e3       	ldi	r24, 0x3F	; 63
    260e:	9f e1       	ldi	r25, 0x1F	; 31
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	f1 f7       	brne	.-4      	; 0x2610 <LCD_Triger_Enable+0x2c>
    2614:	00 c0       	rjmp	.+0      	; 0x2616 <LCD_Triger_Enable+0x32>
    2616:	00 00       	nop
	_delay_ms(2);	
	
} /* END_FUN LCD_Triger_Enable()*/
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	08 95       	ret

0000261e <LCD_Send_4BitData>:
 * brief  : this function used to send Data to LCD in 4 bit form 
 * param. : data the specific byte that you want to send to LCD 
 * return : void 
 */
static void LCD_Send_4BitData(uint8_t data)
{
    261e:	0f 93       	push	r16
    2620:	1f 93       	push	r17
    2622:	cf 93       	push	r28
    2624:	c8 2f       	mov	r28, r24
	
		for(int i =3 ; i < 7 ;i++)																			
    2626:	83 e0       	ldi	r24, 0x03	; 3
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	23 c0       	rjmp	.+70     	; 0x2672 <LCD_Send_4BitData+0x54>
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i+1))&(data))>>(i+1));	/* set the high nibble */
    262c:	8c 01       	movw	r16, r24
    262e:	0f 5f       	subi	r16, 0xFF	; 255
    2630:	1f 4f       	sbci	r17, 0xFF	; 255
    2632:	41 e0       	ldi	r20, 0x01	; 1
    2634:	50 e0       	ldi	r21, 0x00	; 0
    2636:	00 2e       	mov	r0, r16
    2638:	02 c0       	rjmp	.+4      	; 0x263e <LCD_Send_4BitData+0x20>
    263a:	44 0f       	add	r20, r20
    263c:	55 1f       	adc	r21, r21
    263e:	0a 94       	dec	r0
    2640:	e2 f7       	brpl	.-8      	; 0x263a <LCD_Send_4BitData+0x1c>
    2642:	2c 2f       	mov	r18, r28
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	42 23       	and	r20, r18
    2648:	53 23       	and	r21, r19
    264a:	00 2e       	mov	r0, r16
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <LCD_Send_4BitData+0x34>
    264e:	55 95       	asr	r21
    2650:	47 95       	ror	r20
    2652:	0a 94       	dec	r0
    2654:	e2 f7       	brpl	.-8      	; 0x264e <LCD_Send_4BitData+0x30>
    2656:	fc 01       	movw	r30, r24
    2658:	ee 0f       	add	r30, r30
    265a:	ff 1f       	adc	r31, r31
    265c:	8e 0f       	add	r24, r30
    265e:	9f 1f       	adc	r25, r31
    2660:	fc 01       	movw	r30, r24
    2662:	e4 52       	subi	r30, 0x24	; 36
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	62 81       	ldd	r22, Z+2	; 0x02
    2668:	80 81       	ld	r24, Z
    266a:	91 81       	ldd	r25, Z+1	; 0x01
    266c:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
 * return : void 
 */
static void LCD_Send_4BitData(uint8_t data)
{
	
		for(int i =3 ; i < 7 ;i++)																			
    2670:	c8 01       	movw	r24, r16
    2672:	87 30       	cpi	r24, 0x07	; 7
    2674:	91 05       	cpc	r25, r1
    2676:	d4 f2       	brlt	.-76     	; 0x262c <LCD_Send_4BitData+0xe>
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i+1))&(data))>>(i+1));	/* set the high nibble */
		LCD_Triger_Enable();
    2678:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <LCD_Triger_Enable>
		for(int i =3 ; i < 7 ;i++)
    267c:	03 e0       	ldi	r16, 0x03	; 3
    267e:	10 e0       	ldi	r17, 0x00	; 0
    2680:	21 c0       	rjmp	.+66     	; 0x26c4 <LCD_Send_4BitData+0xa6>
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i-3))&(data))>>(i-3));	/* set the high nibble */
    2682:	c8 01       	movw	r24, r16
    2684:	03 97       	sbiw	r24, 0x03	; 3
    2686:	41 e0       	ldi	r20, 0x01	; 1
    2688:	50 e0       	ldi	r21, 0x00	; 0
    268a:	08 2e       	mov	r0, r24
    268c:	02 c0       	rjmp	.+4      	; 0x2692 <LCD_Send_4BitData+0x74>
    268e:	44 0f       	add	r20, r20
    2690:	55 1f       	adc	r21, r21
    2692:	0a 94       	dec	r0
    2694:	e2 f7       	brpl	.-8      	; 0x268e <LCD_Send_4BitData+0x70>
    2696:	2c 2f       	mov	r18, r28
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	42 23       	and	r20, r18
    269c:	53 23       	and	r21, r19
    269e:	02 c0       	rjmp	.+4      	; 0x26a4 <LCD_Send_4BitData+0x86>
    26a0:	55 95       	asr	r21
    26a2:	47 95       	ror	r20
    26a4:	8a 95       	dec	r24
    26a6:	e2 f7       	brpl	.-8      	; 0x26a0 <LCD_Send_4BitData+0x82>
    26a8:	f8 01       	movw	r30, r16
    26aa:	ee 0f       	add	r30, r30
    26ac:	ff 1f       	adc	r31, r31
    26ae:	e0 0f       	add	r30, r16
    26b0:	f1 1f       	adc	r31, r17
    26b2:	e4 52       	subi	r30, 0x24	; 36
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	62 81       	ldd	r22, Z+2	; 0x02
    26b8:	80 81       	ld	r24, Z
    26ba:	91 81       	ldd	r25, Z+1	; 0x01
    26bc:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
{
	
		for(int i =3 ; i < 7 ;i++)																			
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i+1))&(data))>>(i+1));	/* set the high nibble */
		LCD_Triger_Enable();
		for(int i =3 ; i < 7 ;i++)
    26c0:	0f 5f       	subi	r16, 0xFF	; 255
    26c2:	1f 4f       	sbci	r17, 0xFF	; 255
    26c4:	07 30       	cpi	r16, 0x07	; 7
    26c6:	11 05       	cpc	r17, r1
    26c8:	e4 f2       	brlt	.-72     	; 0x2682 <LCD_Send_4BitData+0x64>
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i-3))&(data))>>(i-3));	/* set the high nibble */
		LCD_Triger_Enable();
    26ca:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <LCD_Triger_Enable>


} /* END_FUN LCD_Send_4BitData()*/
    26ce:	cf 91       	pop	r28
    26d0:	1f 91       	pop	r17
    26d2:	0f 91       	pop	r16
    26d4:	08 95       	ret

000026d6 <LCD_Send_Character_CurrLoc>:
 * brief  : this function used to send an character to LCD with the current location 
 * param. : Character the specific character to send to LCD 
 * return : void 
 */ 
LCD_Status_t LCD_Send_Character_CurrLoc(uint8_t character)
{
    26d6:	1f 93       	push	r17
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	18 2f       	mov	r17, r24
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Pin,GPIO_PIN_SET);  // set enable pin
    26de:	cc ed       	ldi	r28, 0xDC	; 220
    26e0:	d0 e0       	ldi	r29, 0x00	; 0
    26e2:	41 e0       	ldi	r20, 0x01	; 1
    26e4:	6a 81       	ldd	r22, Y+2	; 0x02
    26e6:	88 81       	ld	r24, Y
    26e8:	99 81       	ldd	r25, Y+1	; 0x01
    26ea:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Pin,GPIO_PIN_RESET);  // set enable pin
    26ee:	40 e0       	ldi	r20, 0x00	; 0
    26f0:	6d 81       	ldd	r22, Y+5	; 0x05
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	9c 81       	ldd	r25, Y+4	; 0x04
    26f6:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>

	LCD_Send_4BitData(character);
    26fa:	81 2f       	mov	r24, r17
    26fc:	0e 94 0f 13 	call	0x261e	; 0x261e <LCD_Send_4BitData>
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Character_CurrLoc()*/
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	df 91       	pop	r29
    2704:	cf 91       	pop	r28
    2706:	1f 91       	pop	r17
    2708:	08 95       	ret

0000270a <LCD_Send_Command>:
 * brief  : this function used to send command to LCD  
 * param. : command the specific command to send to LCD chose one of @ LCD_COMMANED_ 
 * return : void 
 */
LCD_Status_t LCD_Send_Command(uint8_t command)
{
    270a:	1f 93       	push	r17
    270c:	cf 93       	push	r28
    270e:	df 93       	push	r29
    2710:	18 2f       	mov	r17, r24
	
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Pin,GPIO_PIN_RESET);  // set enable pin		
    2712:	cc ed       	ldi	r28, 0xDC	; 220
    2714:	d0 e0       	ldi	r29, 0x00	; 0
    2716:	40 e0       	ldi	r20, 0x00	; 0
    2718:	6a 81       	ldd	r22, Y+2	; 0x02
    271a:	88 81       	ld	r24, Y
    271c:	99 81       	ldd	r25, Y+1	; 0x01
    271e:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Pin,GPIO_PIN_RESET);  // set enable pin
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	6d 81       	ldd	r22, Y+5	; 0x05
    2726:	8b 81       	ldd	r24, Y+3	; 0x03
    2728:	9c 81       	ldd	r25, Y+4	; 0x04
    272a:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
	LCD_Send_4BitData(command);
    272e:	81 2f       	mov	r24, r17
    2730:	0e 94 0f 13 	call	0x261e	; 0x261e <LCD_Send_4BitData>
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Command()*/
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	df 91       	pop	r29
    2738:	cf 91       	pop	r28
    273a:	1f 91       	pop	r17
    273c:	08 95       	ret

0000273e <LCD_Send_String_CurrLoc>:
 * brief  : this function used to send an string to LCD with the current location 
 * param. : Character the specific character to send to LCD 
 * return : void 
 */
LCD_Status_t LCD_Send_String_CurrLoc(uint8_t *string)
{
    273e:	cf 93       	push	r28
    2740:	df 93       	push	r29
    2742:	ec 01       	movw	r28, r24
	while (*string != 0)
    2744:	03 c0       	rjmp	.+6      	; 0x274c <LCD_Send_String_CurrLoc+0xe>
	{
		LCD_Send_Character_CurrLoc(*string++);
    2746:	21 96       	adiw	r28, 0x01	; 1
    2748:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_Send_Character_CurrLoc>
 * param. : Character the specific character to send to LCD 
 * return : void 
 */
LCD_Status_t LCD_Send_String_CurrLoc(uint8_t *string)
{
	while (*string != 0)
    274c:	88 81       	ld	r24, Y
    274e:	81 11       	cpse	r24, r1
    2750:	fa cf       	rjmp	.-12     	; 0x2746 <LCD_Send_String_CurrLoc+0x8>

	}
	
	
	return LCD_OK ;
} /* END_FUN LCD_Send_String_CurrLoc()*/
    2752:	df 91       	pop	r29
    2754:	cf 91       	pop	r28
    2756:	08 95       	ret

00002758 <LCD_Goto_Location>:
 * param. :  y  is specify the new Y axises
 * param. :  x  is specify the new X axises
 * return : void 
 */
LCD_Status_t LCD_Goto_Location(uint8_t y , uint8_t x)
{
    2758:	cf 93       	push	r28
    275a:	df 93       	push	r29
    275c:	00 d0       	rcall	.+0      	; 0x275e <LCD_Goto_Location+0x6>
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62
	uint8_t column_position [2] = {0x80,0xc0};
    2762:	90 e8       	ldi	r25, 0x80	; 128
    2764:	99 83       	std	Y+1, r25	; 0x01
    2766:	90 ec       	ldi	r25, 0xC0	; 192
    2768:	9a 83       	std	Y+2, r25	; 0x02
	LCD_Send_Command(column_position[y-1]+(x-1));
    276a:	e8 2f       	mov	r30, r24
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	31 97       	sbiw	r30, 0x01	; 1
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	8c 0f       	add	r24, r28
    2776:	9d 1f       	adc	r25, r29
    2778:	e8 0f       	add	r30, r24
    277a:	f9 1f       	adc	r31, r25
    277c:	80 81       	ld	r24, Z
    277e:	86 0f       	add	r24, r22
    2780:	81 50       	subi	r24, 0x01	; 1
    2782:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>


	return LCD_OK ;	
} /* END_FUN LCD_Goto_Location()*/
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	df 91       	pop	r29
    278e:	cf 91       	pop	r28
    2790:	08 95       	ret

00002792 <LCD_Send_Character_WithLoc>:
 * param. :  x  is specify the new X axises
 * param. : character the specific character to send to LCD 
 * return : void 
 */
LCD_Status_t LCD_Send_Character_WithLoc(uint8_t y,uint8_t x,uint8_t character)
{
    2792:	1f 93       	push	r17
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	14 2f       	mov	r17, r20
	
	LCD_Goto_Location(y,x);
    279a:	0e 94 ac 13 	call	0x2758	; 0x2758 <LCD_Goto_Location>
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Pin,GPIO_PIN_SET);  // set enable pin
    279e:	cc ed       	ldi	r28, 0xDC	; 220
    27a0:	d0 e0       	ldi	r29, 0x00	; 0
    27a2:	41 e0       	ldi	r20, 0x01	; 1
    27a4:	6a 81       	ldd	r22, Y+2	; 0x02
    27a6:	88 81       	ld	r24, Y
    27a8:	99 81       	ldd	r25, Y+1	; 0x01
    27aa:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Pin,GPIO_PIN_RESET);  // set enable pin
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	6d 81       	ldd	r22, Y+5	; 0x05
    27b2:	8b 81       	ldd	r24, Y+3	; 0x03
    27b4:	9c 81       	ldd	r25, Y+4	; 0x04
    27b6:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
	LCD_Send_4BitData(character);
    27ba:	81 2f       	mov	r24, r17
    27bc:	0e 94 0f 13 	call	0x261e	; 0x261e <LCD_Send_4BitData>
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Character_WithLoc()*/
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	df 91       	pop	r29
    27c4:	cf 91       	pop	r28
    27c6:	1f 91       	pop	r17
    27c8:	08 95       	ret

000027ca <LCD_Initializaion>:
/*
 * brief  : this function used to initialize (GPIO &LCD) 
 * return : void 
 */ 
LCD_Status_t LCD_Initializaion(void)
{
    27ca:	0f 93       	push	r16
    27cc:	1f 93       	push	r17
    27ce:	cf 93       	push	r28
    27d0:	df 93       	push	r29
    27d2:	00 d0       	rcall	.+0      	; 0x27d4 <LCD_Initializaion+0xa>
    27d4:	1f 92       	push	r1
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	2f ef       	ldi	r18, 0xFF	; 255
    27dc:	89 ef       	ldi	r24, 0xF9	; 249
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	21 50       	subi	r18, 0x01	; 1
    27e2:	80 40       	sbci	r24, 0x00	; 0
    27e4:	90 40       	sbci	r25, 0x00	; 0
    27e6:	e1 f7       	brne	.-8      	; 0x27e0 <LCD_Initializaion+0x16>
    27e8:	00 c0       	rjmp	.+0      	; 0x27ea <LCD_Initializaion+0x20>
    27ea:	00 00       	nop
	GPIO_InitTypeDef LCD_GPIO_Handler ;
	
	
	_delay_ms(20);
	/* Set portB pin 1,2,3 as output */
	LCD_GPIO_Handler.mode = GPIO_MODE_OUTPUT ;
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	8a 83       	std	Y+2, r24	; 0x02
	LCD_GPIO_Handler.pull =GPIO_NOPULL ;
    27f0:	1b 82       	std	Y+3, r1	; 0x03
	
	
	
	
	for(int i =0 ; i < 7 ;i++)
    27f2:	00 e0       	ldi	r16, 0x00	; 0
    27f4:	10 e0       	ldi	r17, 0x00	; 0
    27f6:	12 c0       	rjmp	.+36     	; 0x281c <LCD_Initializaion+0x52>
	{
		LCD_GPIO_Handler.pin = LcdBitSelect.LcdBits[i].Pin ;
    27f8:	f8 01       	movw	r30, r16
    27fa:	ee 0f       	add	r30, r30
    27fc:	ff 1f       	adc	r31, r31
    27fe:	e0 0f       	add	r30, r16
    2800:	f1 1f       	adc	r31, r17
    2802:	e4 52       	subi	r30, 0x24	; 36
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	82 81       	ldd	r24, Z+2	; 0x02
    2808:	89 83       	std	Y+1, r24	; 0x01
		  
		HAL_GPIO_Pin_Init(LcdBitSelect.LcdBits[i].Port,&LCD_GPIO_Handler);
    280a:	be 01       	movw	r22, r28
    280c:	6f 5f       	subi	r22, 0xFF	; 255
    280e:	7f 4f       	sbci	r23, 0xFF	; 255
    2810:	80 81       	ld	r24, Z
    2812:	91 81       	ldd	r25, Z+1	; 0x01
    2814:	0e 94 3a 18 	call	0x3074	; 0x3074 <HAL_GPIO_Pin_Init>
	LCD_GPIO_Handler.pull =GPIO_NOPULL ;
	
	
	
	
	for(int i =0 ; i < 7 ;i++)
    2818:	0f 5f       	subi	r16, 0xFF	; 255
    281a:	1f 4f       	sbci	r17, 0xFF	; 255
    281c:	07 30       	cpi	r16, 0x07	; 7
    281e:	11 05       	cpc	r17, r1
    2820:	5c f3       	brlt	.-42     	; 0x27f8 <LCD_Initializaion+0x2e>
		  
		HAL_GPIO_Pin_Init(LcdBitSelect.LcdBits[i].Port,&LCD_GPIO_Handler);
	}

	/* LCD Initialization command*/
	LCD_Send_Command(0x33U);  
    2822:	83 e3       	ldi	r24, 0x33	; 51
    2824:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
	LCD_Send_Command(0x32U);
    2828:	82 e3       	ldi	r24, 0x32	; 50
    282a:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
	LCD_Send_Command(LCD_COMMANED2LINE_4_BIT_MODE);
    282e:	88 e2       	ldi	r24, 0x28	; 40
    2830:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
	LCD_Send_Command(LCD_COMMANED_CLEAR_CURSOR_OFF);
    2834:	8c e0       	ldi	r24, 0x0C	; 12
    2836:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
	LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	0e 94 85 13 	call	0x270a	; 0x270a <LCD_Send_Command>
	

	return LCD_OK ;
	
} /* END_FUN LCD_Initializaion()*/
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	df 91       	pop	r29
    284a:	cf 91       	pop	r28
    284c:	1f 91       	pop	r17
    284e:	0f 91       	pop	r16
    2850:	08 95       	ret

00002852 <LCD_Send_String_WithLoc>:
 * param. :  x  is specify y axises location start from 1
 * param. : StringOfCharacters pointer to string that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_String_WithLoc(uint8_t y, uint8_t x, uint8_t * StringOfCharacters)
{
    2852:	cf 93       	push	r28
    2854:	df 93       	push	r29
    2856:	ea 01       	movw	r28, r20
	LCD_Goto_Location(y,x);
    2858:	0e 94 ac 13 	call	0x2758	; 0x2758 <LCD_Goto_Location>
	while (*StringOfCharacters != 0)
    285c:	03 c0       	rjmp	.+6      	; 0x2864 <LCD_Send_String_WithLoc+0x12>
	{
		LCD_Send_Character_CurrLoc(*StringOfCharacters++);  
    285e:	21 96       	adiw	r28, 0x01	; 1
    2860:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_Send_Character_CurrLoc>
 * return : void 
 */
LCD_Status_t LCD_Send_String_WithLoc(uint8_t y, uint8_t x, uint8_t * StringOfCharacters)
{
	LCD_Goto_Location(y,x);
	while (*StringOfCharacters != 0)
    2864:	88 81       	ld	r24, Y
    2866:	81 11       	cpse	r24, r1
    2868:	fa cf       	rjmp	.-12     	; 0x285e <LCD_Send_String_WithLoc+0xc>
		LCD_Send_Character_CurrLoc(*StringOfCharacters++);  
	}
	
	
	return LCD_OK ;
} /* END_FUN Send_A_String_WithLoc()*/
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	08 95       	ret

00002870 <LCD_Send_Integer_CurrLoc>:
 * param. : IntegerToDisplay this is the integer value that you want to display
 * param. : NumberOfDigits number of digits of the integer number that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_Integer_CurrLoc(uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
    2870:	ef 92       	push	r14
    2872:	ff 92       	push	r15
    2874:	0f 93       	push	r16
    2876:	1f 93       	push	r17
    2878:	cf 93       	push	r28
    287a:	df 93       	push	r29
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
		itoa(IntegerToDisplay,StringToDisplay,10); /* convert from int num. to char num. */
		LCD_Send_String_CurrLoc(StringToDisplay);  /* print char array on the screen */
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Integer_CurrLoc()*/
    2880:	ed b6       	in	r14, 0x3d	; 61
    2882:	fe b6       	in	r15, 0x3e	; 62
 * param. : NumberOfDigits number of digits of the integer number that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_Integer_CurrLoc(uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
		uint8_t StringToDisplay[NumberOfDigits];   /* create array with required size */ 
    2884:	2d b7       	in	r18, 0x3d	; 61
    2886:	3e b7       	in	r19, 0x3e	; 62
    2888:	26 1b       	sub	r18, r22
    288a:	31 09       	sbc	r19, r1
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	f8 94       	cli
    2890:	3e bf       	out	0x3e, r19	; 62
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	2d bf       	out	0x3d, r18	; 61
    2896:	0d b7       	in	r16, 0x3d	; 61
    2898:	1e b7       	in	r17, 0x3e	; 62
    289a:	0f 5f       	subi	r16, 0xFF	; 255
    289c:	1f 4f       	sbci	r17, 0xFF	; 255
		itoa(IntegerToDisplay,StringToDisplay,10); /* convert from int num. to char num. */
    289e:	4a e0       	ldi	r20, 0x0A	; 10
    28a0:	50 e0       	ldi	r21, 0x00	; 0
    28a2:	b8 01       	movw	r22, r16
    28a4:	0e 94 9c 20 	call	0x4138	; 0x4138 <itoa>
		LCD_Send_String_CurrLoc(StringToDisplay);  /* print char array on the screen */
    28a8:	c8 01       	movw	r24, r16
    28aa:	0e 94 9f 13 	call	0x273e	; 0x273e <LCD_Send_String_CurrLoc>
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Integer_CurrLoc()*/
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	fe be       	out	0x3e, r15	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	ed be       	out	0x3d, r14	; 61
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	1f 91       	pop	r17
    28c0:	0f 91       	pop	r16
    28c2:	ff 90       	pop	r15
    28c4:	ef 90       	pop	r14
    28c6:	08 95       	ret

000028c8 <Motor_Stop>:
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__L] , MOTORS.Motor[Motor_num].Pin[MOTOR__L] , GPIO_PIN_SET);	
}


static void Motor_Stop(uint8_t Motor_num)
{
    28c8:	ef 92       	push	r14
    28ca:	ff 92       	push	r15
    28cc:	0f 93       	push	r16
    28ce:	1f 93       	push	r17
    28d0:	cf 93       	push	r28
    28d2:	df 93       	push	r29
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__H] , MOTORS.Motor[Motor_num].Pin[MOTOR__H] , GPIO_PIN_RESET);
    28d4:	c8 2f       	mov	r28, r24
    28d6:	d0 e0       	ldi	r29, 0x00	; 0
    28d8:	7e 01       	movw	r14, r28
    28da:	ee 0c       	add	r14, r14
    28dc:	ff 1c       	adc	r15, r15
    28de:	87 01       	movw	r16, r14
    28e0:	0c 0f       	add	r16, r28
    28e2:	1d 1f       	adc	r17, r29
    28e4:	00 0f       	add	r16, r16
    28e6:	11 1f       	adc	r17, r17
    28e8:	0a 58       	subi	r16, 0x8A	; 138
    28ea:	1e 4f       	sbci	r17, 0xFE	; 254
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	f8 01       	movw	r30, r16
    28f0:	64 81       	ldd	r22, Z+4	; 0x04
    28f2:	80 81       	ld	r24, Z
    28f4:	91 81       	ldd	r25, Z+1	; 0x01
    28f6:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__L] , MOTORS.Motor[Motor_num].Pin[MOTOR__L] , GPIO_PIN_RESET);
    28fa:	e8 01       	movw	r28, r16
    28fc:	40 e0       	ldi	r20, 0x00	; 0
    28fe:	6d 81       	ldd	r22, Y+5	; 0x05
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	9b 81       	ldd	r25, Y+3	; 0x03
    2904:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
}
    2908:	df 91       	pop	r29
    290a:	cf 91       	pop	r28
    290c:	1f 91       	pop	r17
    290e:	0f 91       	pop	r16
    2910:	ff 90       	pop	r15
    2912:	ef 90       	pop	r14
    2914:	08 95       	ret

00002916 <Motor_ACW>:
	return MOTOR_OK ;
	
}

static void Motor_ACW(uint8_t Motor_num)
{
    2916:	ef 92       	push	r14
    2918:	ff 92       	push	r15
    291a:	0f 93       	push	r16
    291c:	1f 93       	push	r17
    291e:	cf 93       	push	r28
    2920:	df 93       	push	r29
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__H] , MOTORS.Motor[Motor_num].Pin[MOTOR__H] , GPIO_PIN_SET);
    2922:	c8 2f       	mov	r28, r24
    2924:	d0 e0       	ldi	r29, 0x00	; 0
    2926:	7e 01       	movw	r14, r28
    2928:	ee 0c       	add	r14, r14
    292a:	ff 1c       	adc	r15, r15
    292c:	87 01       	movw	r16, r14
    292e:	0c 0f       	add	r16, r28
    2930:	1d 1f       	adc	r17, r29
    2932:	00 0f       	add	r16, r16
    2934:	11 1f       	adc	r17, r17
    2936:	0a 58       	subi	r16, 0x8A	; 138
    2938:	1e 4f       	sbci	r17, 0xFE	; 254
    293a:	41 e0       	ldi	r20, 0x01	; 1
    293c:	f8 01       	movw	r30, r16
    293e:	64 81       	ldd	r22, Z+4	; 0x04
    2940:	80 81       	ld	r24, Z
    2942:	91 81       	ldd	r25, Z+1	; 0x01
    2944:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__L] , MOTORS.Motor[Motor_num].Pin[MOTOR__L] , GPIO_PIN_RESET);
    2948:	e8 01       	movw	r28, r16
    294a:	40 e0       	ldi	r20, 0x00	; 0
    294c:	6d 81       	ldd	r22, Y+5	; 0x05
    294e:	8a 81       	ldd	r24, Y+2	; 0x02
    2950:	9b 81       	ldd	r25, Y+3	; 0x03
    2952:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
}
    2956:	df 91       	pop	r29
    2958:	cf 91       	pop	r28
    295a:	1f 91       	pop	r17
    295c:	0f 91       	pop	r16
    295e:	ff 90       	pop	r15
    2960:	ef 90       	pop	r14
    2962:	08 95       	ret

00002964 <Motor_CW>:


static void Motor_CW(uint8_t Motor_num)
{
    2964:	ef 92       	push	r14
    2966:	ff 92       	push	r15
    2968:	0f 93       	push	r16
    296a:	1f 93       	push	r17
    296c:	cf 93       	push	r28
    296e:	df 93       	push	r29
	
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__H] , MOTORS.Motor[Motor_num].Pin[MOTOR__H] , GPIO_PIN_RESET);
    2970:	c8 2f       	mov	r28, r24
    2972:	d0 e0       	ldi	r29, 0x00	; 0
    2974:	7e 01       	movw	r14, r28
    2976:	ee 0c       	add	r14, r14
    2978:	ff 1c       	adc	r15, r15
    297a:	87 01       	movw	r16, r14
    297c:	0c 0f       	add	r16, r28
    297e:	1d 1f       	adc	r17, r29
    2980:	00 0f       	add	r16, r16
    2982:	11 1f       	adc	r17, r17
    2984:	0a 58       	subi	r16, 0x8A	; 138
    2986:	1e 4f       	sbci	r17, 0xFE	; 254
    2988:	40 e0       	ldi	r20, 0x00	; 0
    298a:	f8 01       	movw	r30, r16
    298c:	64 81       	ldd	r22, Z+4	; 0x04
    298e:	80 81       	ld	r24, Z
    2990:	91 81       	ldd	r25, Z+1	; 0x01
    2992:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__L] , MOTORS.Motor[Motor_num].Pin[MOTOR__L] , GPIO_PIN_SET);	
    2996:	e8 01       	movw	r28, r16
    2998:	41 e0       	ldi	r20, 0x01	; 1
    299a:	6d 81       	ldd	r22, Y+5	; 0x05
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	9b 81       	ldd	r25, Y+3	; 0x03
    29a0:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
}
    29a4:	df 91       	pop	r29
    29a6:	cf 91       	pop	r28
    29a8:	1f 91       	pop	r17
    29aa:	0f 91       	pop	r16
    29ac:	ff 90       	pop	r15
    29ae:	ef 90       	pop	r14
    29b0:	08 95       	ret

000029b2 <Motor_Init>:
static TIMInit_t  Tim_PWM_Handler ={ .Instance = TIM0 ,.COMPConfig.TIM8Bit.CompAction = TIM_COMP_PIN_OUT_Normal   , .TIM_Interrupt = TIM_0_IT_COMP ,.TimPreScaler = TIM_0_Prescaler_256  , .COMPConfig.TIM8Bit.CompValue = 0  };
#endif


MOTOR_STATUS_t Motor_Init(void)
{
    29b2:	0f 93       	push	r16
    29b4:	1f 93       	push	r17
    29b6:	cf 93       	push	r28
    29b8:	df 93       	push	r29
    29ba:	00 d0       	rcall	.+0      	; 0x29bc <Motor_Init+0xa>
    29bc:	1f 92       	push	r1
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
		GPIO_InitTypeDef   PIN_CONFIG = {.mode = GPIO_MODE_OUTPUT , .pull = GPIO_NOPULL }; 
    29c2:	19 82       	std	Y+1, r1	; 0x01
    29c4:	1a 82       	std	Y+2, r1	; 0x02
    29c6:	1b 82       	std	Y+3, r1	; 0x03
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	8a 83       	std	Y+2, r24	; 0x02
		if(Software_PWM_Init( GPIOD , GPIO_PIN_7 ,  &Tim_PWM_Handler ) != UTIL_OK)
    29cc:	42 ef       	ldi	r20, 0xF2	; 242
    29ce:	50 e0       	ldi	r21, 0x00	; 0
    29d0:	60 e8       	ldi	r22, 0x80	; 128
    29d2:	80 e3       	ldi	r24, 0x30	; 48
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <Software_PWM_Init>
    29da:	81 11       	cpse	r24, r1
    29dc:	18 c0       	rjmp	.+48     	; 0x2a0e <Motor_Init+0x5c>
    29de:	10 e0       	ldi	r17, 0x00	; 0
    29e0:	12 c0       	rjmp	.+36     	; 0x2a06 <Motor_Init+0x54>
		}

		
		for (uint8_t iter = 0 ; iter < Total_MOTORS ; iter++)
		{
			PIN_CONFIG.pin = MOTORS.Motor[MOTOR_1].Pin[MOTOR__H];
    29e2:	04 e0       	ldi	r16, 0x04	; 4
    29e4:	09 83       	std	Y+1, r16	; 0x01
			HAL_GPIO_Pin_Init(MOTORS.Motor[MOTOR_1].Port[MOTOR__L] , &PIN_CONFIG);
    29e6:	be 01       	movw	r22, r28
    29e8:	6f 5f       	subi	r22, 0xFF	; 255
    29ea:	7f 4f       	sbci	r23, 0xFF	; 255
    29ec:	86 e3       	ldi	r24, 0x36	; 54
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	0e 94 3a 18 	call	0x3074	; 0x3074 <HAL_GPIO_Pin_Init>
			PIN_CONFIG.pin = MOTORS.Motor[MOTOR_1].Pin[MOTOR__H];
    29f4:	09 83       	std	Y+1, r16	; 0x01
			HAL_GPIO_Pin_Init(MOTORS.Motor[MOTOR_1].Port[MOTOR__L] , &PIN_CONFIG);
    29f6:	be 01       	movw	r22, r28
    29f8:	6f 5f       	subi	r22, 0xFF	; 255
    29fa:	7f 4f       	sbci	r23, 0xFF	; 255
    29fc:	86 e3       	ldi	r24, 0x36	; 54
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	0e 94 3a 18 	call	0x3074	; 0x3074 <HAL_GPIO_Pin_Init>
		{
			return MOTOR_PWM_ERROR ; 
		}

		
		for (uint8_t iter = 0 ; iter < Total_MOTORS ; iter++)
    2a04:	1f 5f       	subi	r17, 0xFF	; 255
    2a06:	12 30       	cpi	r17, 0x02	; 2
    2a08:	60 f3       	brcs	.-40     	; 0x29e2 <Motor_Init+0x30>
			HAL_GPIO_Pin_Init(MOTORS.Motor[MOTOR_1].Port[MOTOR__L] , &PIN_CONFIG);
			PIN_CONFIG.pin = MOTORS.Motor[MOTOR_1].Pin[MOTOR__H];
			HAL_GPIO_Pin_Init(MOTORS.Motor[MOTOR_1].Port[MOTOR__L] , &PIN_CONFIG);
		}
	
	return MOTOR_OK ; 
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	01 c0       	rjmp	.+2      	; 0x2a10 <Motor_Init+0x5e>
MOTOR_STATUS_t Motor_Init(void)
{
		GPIO_InitTypeDef   PIN_CONFIG = {.mode = GPIO_MODE_OUTPUT , .pull = GPIO_NOPULL }; 
		if(Software_PWM_Init( GPIOD , GPIO_PIN_7 ,  &Tim_PWM_Handler ) != UTIL_OK)
		{
			return MOTOR_PWM_ERROR ; 
    2a0e:	83 e0       	ldi	r24, 0x03	; 3
			PIN_CONFIG.pin = MOTORS.Motor[MOTOR_1].Pin[MOTOR__H];
			HAL_GPIO_Pin_Init(MOTORS.Motor[MOTOR_1].Port[MOTOR__L] , &PIN_CONFIG);
		}
	
	return MOTOR_OK ; 
}
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	df 91       	pop	r29
    2a18:	cf 91       	pop	r28
    2a1a:	1f 91       	pop	r17
    2a1c:	0f 91       	pop	r16
    2a1e:	08 95       	ret

00002a20 <Motor_Start>:


MOTOR_STATUS_t Motor_Start(void)
{
	
		if (Software_PWM_Start (&Tim_PWM_Handler) != UTIL_OK)
    2a20:	82 ef       	ldi	r24, 0xF2	; 242
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <Software_PWM_Start>
    2a28:	88 23       	and	r24, r24
    2a2a:	11 f0       	breq	.+4      	; 0x2a30 <Motor_Start+0x10>
		{
			return MOTOR_PWM_ERROR ;
    2a2c:	83 e0       	ldi	r24, 0x03	; 3
    2a2e:	08 95       	ret
		}
	
	
}
    2a30:	08 95       	ret

00002a32 <Motor_Dir>:

MOTOR_STATUS_t Motor_Dir(Motor_DIR_t DIR , uint8_t Speed )
{
    2a32:	cf 93       	push	r28
	static	uint8_t Motor_Speed = 0 ;
	static	Motor_DIR_t Motor_Dir = DID_STOP ;
	
	if ((Motor_Speed == Speed)&&(Motor_Dir == DIR))
    2a34:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <Motor_Speed.1984>
    2a38:	96 13       	cpse	r25, r22
    2a3a:	05 c0       	rjmp	.+10     	; 0x2a46 <Motor_Dir+0x14>
    2a3c:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <Motor_Dir.1985>
    2a40:	98 17       	cp	r25, r24
    2a42:	09 f4       	brne	.+2      	; 0x2a46 <Motor_Dir+0x14>
    2a44:	62 c0       	rjmp	.+196    	; 0x2b0a <Motor_Dir+0xd8>
    2a46:	c6 2f       	mov	r28, r22
	{
		return MOTOR_OK ; 
	}
	
	switch(DIR)
    2a48:	82 30       	cpi	r24, 0x02	; 2
    2a4a:	71 f1       	breq	.+92     	; 0x2aa8 <Motor_Dir+0x76>
    2a4c:	30 f4       	brcc	.+12     	; 0x2a5a <Motor_Dir+0x28>
    2a4e:	88 23       	and	r24, r24
    2a50:	e1 f1       	breq	.+120    	; 0x2aca <Motor_Dir+0x98>
    2a52:	81 30       	cpi	r24, 0x01	; 1
    2a54:	09 f4       	brne	.+2      	; 0x2a58 <Motor_Dir+0x26>
    2a56:	49 c0       	rjmp	.+146    	; 0x2aea <Motor_Dir+0xb8>
    2a58:	58 c0       	rjmp	.+176    	; 0x2b0a <Motor_Dir+0xd8>
    2a5a:	83 30       	cpi	r24, 0x03	; 3
    2a5c:	a1 f0       	breq	.+40     	; 0x2a86 <Motor_Dir+0x54>
    2a5e:	84 30       	cpi	r24, 0x04	; 4
    2a60:	09 f0       	breq	.+2      	; 0x2a64 <Motor_Dir+0x32>
    2a62:	53 c0       	rjmp	.+166    	; 0x2b0a <Motor_Dir+0xd8>
	{
		case DID_STOP :
			Motor_Stop(MOTOR_1);
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	0e 94 64 14 	call	0x28c8	; 0x28c8 <Motor_Stop>
			Motor_Stop(MOTOR_2);
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	0e 94 64 14 	call	0x28c8	; 0x28c8 <Motor_Stop>
			Motor_Dir = DID_STOP ; 
    2a70:	84 e0       	ldi	r24, 0x04	; 4
    2a72:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <Motor_Dir.1985>
			Motor_Speed = 0 ;
    2a76:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <Motor_Speed.1984>

			Software_PWM_UpdateDuty( 0 ,&Tim_PWM_Handler );
    2a7a:	62 ef       	ldi	r22, 0xF2	; 242
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <Software_PWM_UpdateDuty>
		break; 
    2a84:	42 c0       	rjmp	.+132    	; 0x2b0a <Motor_Dir+0xd8>
		case  DIR_BACKWARD :
			Motor_ACW(MOTOR_1);
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	0e 94 8b 14 	call	0x2916	; 0x2916 <Motor_ACW>
			Motor_ACW(MOTOR_2);
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	0e 94 8b 14 	call	0x2916	; 0x2916 <Motor_ACW>
			Motor_Dir = DIR_BACKWARD ;
    2a92:	83 e0       	ldi	r24, 0x03	; 3
    2a94:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <Motor_Dir.1985>
			Motor_Speed = Speed ;
    2a98:	c0 93 cb 01 	sts	0x01CB, r28	; 0x8001cb <Motor_Speed.1984>
			Software_PWM_UpdateDuty( Speed ,&Tim_PWM_Handler );
    2a9c:	62 ef       	ldi	r22, 0xF2	; 242
    2a9e:	70 e0       	ldi	r23, 0x00	; 0
    2aa0:	8c 2f       	mov	r24, r28
    2aa2:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <Software_PWM_UpdateDuty>
		break; 
    2aa6:	31 c0       	rjmp	.+98     	; 0x2b0a <Motor_Dir+0xd8>
		case  DIR_FORWARD :
			Motor_CW(MOTOR_1);
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	0e 94 b2 14 	call	0x2964	; 0x2964 <Motor_CW>
			Motor_CW(MOTOR_2);
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	0e 94 b2 14 	call	0x2964	; 0x2964 <Motor_CW>
			Motor_Dir = DIR_FORWARD ;
    2ab4:	82 e0       	ldi	r24, 0x02	; 2
    2ab6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <Motor_Dir.1985>
			Motor_Speed = Speed ;
    2aba:	c0 93 cb 01 	sts	0x01CB, r28	; 0x8001cb <Motor_Speed.1984>
			Software_PWM_UpdateDuty( Speed ,&Tim_PWM_Handler );
    2abe:	62 ef       	ldi	r22, 0xF2	; 242
    2ac0:	70 e0       	ldi	r23, 0x00	; 0
    2ac2:	8c 2f       	mov	r24, r28
    2ac4:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <Software_PWM_UpdateDuty>
		break; 
    2ac8:	20 c0       	rjmp	.+64     	; 0x2b0a <Motor_Dir+0xd8>
		case  DIR_LEFT :
			Motor_CW(MOTOR_1);
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	0e 94 b2 14 	call	0x2964	; 0x2964 <Motor_CW>
			Motor_ACW(MOTOR_2);
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	0e 94 8b 14 	call	0x2916	; 0x2916 <Motor_ACW>
			Motor_Dir = DIR_LEFT ;
    2ad6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <Motor_Dir.1985>
			Motor_Speed = Speed ;
    2ada:	c0 93 cb 01 	sts	0x01CB, r28	; 0x8001cb <Motor_Speed.1984>
			Software_PWM_UpdateDuty( Speed ,&Tim_PWM_Handler );
    2ade:	62 ef       	ldi	r22, 0xF2	; 242
    2ae0:	70 e0       	ldi	r23, 0x00	; 0
    2ae2:	8c 2f       	mov	r24, r28
    2ae4:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <Software_PWM_UpdateDuty>
		break; 
    2ae8:	10 c0       	rjmp	.+32     	; 0x2b0a <Motor_Dir+0xd8>
		case DIR_RIGHT :
			Motor_ACW(MOTOR_1);
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	0e 94 8b 14 	call	0x2916	; 0x2916 <Motor_ACW>
			Motor_CW(MOTOR_2);
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	0e 94 b2 14 	call	0x2964	; 0x2964 <Motor_CW>
			Motor_Dir = DIR_RIGHT ;
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <Motor_Dir.1985>
			Motor_Speed = Speed ;
    2afc:	c0 93 cb 01 	sts	0x01CB, r28	; 0x8001cb <Motor_Speed.1984>
			Software_PWM_UpdateDuty( Speed ,&Tim_PWM_Handler );
    2b00:	62 ef       	ldi	r22, 0xF2	; 242
    2b02:	70 e0       	ldi	r23, 0x00	; 0
    2b04:	8c 2f       	mov	r24, r28
    2b06:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <Software_PWM_UpdateDuty>
		
	}
	
	return MOTOR_OK ;
	
}
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	cf 91       	pop	r28
    2b0e:	08 95       	ret

00002b10 <EEPROM_Init>:
	
	
	HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS ,(PageNum )*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE), ATM_CARD_ADDRESS_SIZE , TXBuffer , EEPROM_NUMBER_OF_BYTES_FOR_PAGE);
	return EEPROM_OK ;
	
}
    2b10:	86 e9       	ldi	r24, 0x96	; 150
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	0e 94 62 18 	call	0x30c4	; 0x30c4 <I2C_Init>
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	08 95       	ret

00002b1c <EEPROM_ReadByteS>:


EEPROM_Status_t EEPROM_ReadByteS(uint16_t StartByteNum , uint8_t * RXByte , uint8_t DataSize)
{
    2b1c:	8f 92       	push	r8
    2b1e:	9f 92       	push	r9
    2b20:	af 92       	push	r10
    2b22:	bf 92       	push	r11
    2b24:	cf 92       	push	r12
    2b26:	df 92       	push	r13
    2b28:	ef 92       	push	r14
    2b2a:	0f 93       	push	r16
    2b2c:	1f 93       	push	r17
    2b2e:	cf 93       	push	r28
	
	if ((RXByte == NULL) || ( DataSize <= 0))
    2b30:	61 15       	cp	r22, r1
    2b32:	71 05       	cpc	r23, r1
    2b34:	09 f4       	brne	.+2      	; 0x2b38 <EEPROM_ReadByteS+0x1c>
    2b36:	46 c0       	rjmp	.+140    	; 0x2bc4 <EEPROM_ReadByteS+0xa8>
    2b38:	44 23       	and	r20, r20
    2b3a:	09 f4       	brne	.+2      	; 0x2b3e <EEPROM_ReadByteS+0x22>
    2b3c:	45 c0       	rjmp	.+138    	; 0x2bc8 <EEPROM_ReadByteS+0xac>
    2b3e:	c4 2f       	mov	r28, r20
    2b40:	6b 01       	movw	r12, r22
    2b42:	ac 01       	movw	r20, r24
	
		

		
		uint16_t PageNum =0 , ByteAddress =0 ;
		PageNum = StartByteNum/EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
    2b44:	5c 01       	movw	r10, r24
    2b46:	aa 0c       	add	r10, r10
    2b48:	ab 2c       	mov	r10, r11
    2b4a:	aa 1c       	adc	r10, r10
    2b4c:	bb 08       	sbc	r11, r11
    2b4e:	b1 94       	neg	r11
		ByteAddress = StartByteNum%EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
    2b50:	4c 01       	movw	r8, r24
    2b52:	e8 94       	clt
    2b54:	87 f8       	bld	r8, 7
    2b56:	99 24       	eor	r9, r9
		if((ByteAddress + DataSize ) > EEPROM_NUMBER_OF_BYTES_FOR_PAGE )
    2b58:	c4 01       	movw	r24, r8
    2b5a:	8c 0f       	add	r24, r28
    2b5c:	91 1d       	adc	r25, r1
    2b5e:	81 38       	cpi	r24, 0x81	; 129
    2b60:	91 05       	cpc	r25, r1
    2b62:	30 f1       	brcs	.+76     	; 0x2bb0 <EEPROM_ReadByteS+0x94>
		{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte ,
    2b64:	80 e8       	ldi	r24, 0x80	; 128
    2b66:	e8 2e       	mov	r14, r24
    2b68:	e8 18       	sub	r14, r8
    2b6a:	8b 01       	movw	r16, r22
    2b6c:	22 e0       	ldi	r18, 0x02	; 2
    2b6e:	60 ea       	ldi	r22, 0xA0	; 160
    2b70:	86 e9       	ldi	r24, 0x96	; 150
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	0e 94 e6 18 	call	0x31cc	; 0x31cc <HAL_I2C_Mem_Read>
							  EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress);
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE)   ,
						ATM_CARD_ADDRESS_SIZE , RXByte + EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress , DataSize - EEPROM_NUMBER_OF_BYTES_FOR_PAGE + ByteAddress);
    2b78:	00 e8       	ldi	r16, 0x80	; 128
    2b7a:	10 e0       	ldi	r17, 0x00	; 0
    2b7c:	08 19       	sub	r16, r8
    2b7e:	19 09       	sbc	r17, r9
		ByteAddress = StartByteNum%EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
		if((ByteAddress + DataSize ) > EEPROM_NUMBER_OF_BYTES_FOR_PAGE )
		{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte ,
							  EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress);
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE)   ,
    2b80:	8c 2f       	mov	r24, r28
    2b82:	88 0d       	add	r24, r8
    2b84:	68 94       	set
    2b86:	ee 24       	eor	r14, r14
    2b88:	e7 f8       	bld	r14, 7
    2b8a:	e8 0e       	add	r14, r24
    2b8c:	0c 0d       	add	r16, r12
    2b8e:	1d 1d       	adc	r17, r13
    2b90:	a5 01       	movw	r20, r10
    2b92:	4f 5f       	subi	r20, 0xFF	; 255
    2b94:	5f 4f       	sbci	r21, 0xFF	; 255
    2b96:	56 95       	lsr	r21
    2b98:	54 2f       	mov	r21, r20
    2b9a:	44 27       	eor	r20, r20
    2b9c:	57 95       	ror	r21
    2b9e:	47 95       	ror	r20
    2ba0:	22 e0       	ldi	r18, 0x02	; 2
    2ba2:	60 ea       	ldi	r22, 0xA0	; 160
    2ba4:	86 e9       	ldi	r24, 0x96	; 150
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	0e 94 e6 18 	call	0x31cc	; 0x31cc <HAL_I2C_Mem_Read>
		}
		else{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte , DataSize );
		}
	
	return EEPROM_OK ;	
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	0d c0       	rjmp	.+26     	; 0x2bca <EEPROM_ReadByteS+0xae>
							  EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress);
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE)   ,
						ATM_CARD_ADDRESS_SIZE , RXByte + EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress , DataSize - EEPROM_NUMBER_OF_BYTES_FOR_PAGE + ByteAddress);
		}
		else{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte , DataSize );
    2bb0:	ec 2e       	mov	r14, r28
    2bb2:	8b 01       	movw	r16, r22
    2bb4:	22 e0       	ldi	r18, 0x02	; 2
    2bb6:	60 ea       	ldi	r22, 0xA0	; 160
    2bb8:	86 e9       	ldi	r24, 0x96	; 150
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	0e 94 e6 18 	call	0x31cc	; 0x31cc <HAL_I2C_Mem_Read>
		}
	
	return EEPROM_OK ;	
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	03 c0       	rjmp	.+6      	; 0x2bca <EEPROM_ReadByteS+0xae>
EEPROM_Status_t EEPROM_ReadByteS(uint16_t StartByteNum , uint8_t * RXByte , uint8_t DataSize)
{
	
	if ((RXByte == NULL) || ( DataSize <= 0))
	{
		return EEPROM_PARAM_ERROR ;
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	01 c0       	rjmp	.+2      	; 0x2bca <EEPROM_ReadByteS+0xae>
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
		else{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte , DataSize );
		}
	
	return EEPROM_OK ;	
}
    2bca:	cf 91       	pop	r28
    2bcc:	1f 91       	pop	r17
    2bce:	0f 91       	pop	r16
    2bd0:	ef 90       	pop	r14
    2bd2:	df 90       	pop	r13
    2bd4:	cf 90       	pop	r12
    2bd6:	bf 90       	pop	r11
    2bd8:	af 90       	pop	r10
    2bda:	9f 90       	pop	r9
    2bdc:	8f 90       	pop	r8
    2bde:	08 95       	ret

00002be0 <EEPROM_WriteByteS>:

EEPROM_Status_t EEPROM_WriteByteS(uint16_t StartByteNum , uint8_t  * TXByte , uint8_t BufferSize)
{
    2be0:	8f 92       	push	r8
    2be2:	9f 92       	push	r9
    2be4:	af 92       	push	r10
    2be6:	bf 92       	push	r11
    2be8:	cf 92       	push	r12
    2bea:	df 92       	push	r13
    2bec:	ef 92       	push	r14
    2bee:	0f 93       	push	r16
    2bf0:	1f 93       	push	r17
    2bf2:	cf 93       	push	r28
	uint16_t PageNum =0 , ByteAddress =0  ;
	if ((TXByte == NULL) || (BufferSize <= 0))
    2bf4:	61 15       	cp	r22, r1
    2bf6:	71 05       	cpc	r23, r1
    2bf8:	09 f4       	brne	.+2      	; 0x2bfc <EEPROM_WriteByteS+0x1c>
    2bfa:	46 c0       	rjmp	.+140    	; 0x2c88 <EEPROM_WriteByteS+0xa8>
    2bfc:	44 23       	and	r20, r20
    2bfe:	09 f4       	brne	.+2      	; 0x2c02 <EEPROM_WriteByteS+0x22>
    2c00:	45 c0       	rjmp	.+138    	; 0x2c8c <EEPROM_WriteByteS+0xac>
    2c02:	c4 2f       	mov	r28, r20
    2c04:	6b 01       	movw	r12, r22
    2c06:	ac 01       	movw	r20, r24
	{
		;
	}
	

		PageNum = StartByteNum/EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
    2c08:	5c 01       	movw	r10, r24
    2c0a:	aa 0c       	add	r10, r10
    2c0c:	ab 2c       	mov	r10, r11
    2c0e:	aa 1c       	adc	r10, r10
    2c10:	bb 08       	sbc	r11, r11
    2c12:	b1 94       	neg	r11
		ByteAddress = StartByteNum%EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
    2c14:	4c 01       	movw	r8, r24
    2c16:	e8 94       	clt
    2c18:	87 f8       	bld	r8, 7
    2c1a:	99 24       	eor	r9, r9

	if((ByteAddress + BufferSize ) > EEPROM_NUMBER_OF_BYTES_FOR_PAGE )
    2c1c:	c4 01       	movw	r24, r8
    2c1e:	8c 0f       	add	r24, r28
    2c20:	91 1d       	adc	r25, r1
    2c22:	81 38       	cpi	r24, 0x81	; 129
    2c24:	91 05       	cpc	r25, r1
    2c26:	30 f1       	brcs	.+76     	; 0x2c74 <EEPROM_WriteByteS+0x94>
	{
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , TXByte ,  
    2c28:	80 e8       	ldi	r24, 0x80	; 128
    2c2a:	e8 2e       	mov	r14, r24
    2c2c:	e8 18       	sub	r14, r8
    2c2e:	8b 01       	movw	r16, r22
    2c30:	22 e0       	ldi	r18, 0x02	; 2
    2c32:	60 ea       	ldi	r22, 0xA0	; 160
    2c34:	86 e9       	ldi	r24, 0x96	; 150
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	0e 94 a3 18 	call	0x3146	; 0x3146 <HAL_I2C_Mem_Write>
							EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress );
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE) , ATM_CARD_ADDRESS_SIZE , TXByte + (EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress), 
    2c3c:	00 e8       	ldi	r16, 0x80	; 128
    2c3e:	10 e0       	ldi	r17, 0x00	; 0
    2c40:	08 19       	sub	r16, r8
    2c42:	19 09       	sbc	r17, r9
    2c44:	8c 2f       	mov	r24, r28
    2c46:	88 0d       	add	r24, r8
    2c48:	68 94       	set
    2c4a:	ee 24       	eor	r14, r14
    2c4c:	e7 f8       	bld	r14, 7
    2c4e:	e8 0e       	add	r14, r24
    2c50:	0c 0d       	add	r16, r12
    2c52:	1d 1d       	adc	r17, r13
    2c54:	a5 01       	movw	r20, r10
    2c56:	4f 5f       	subi	r20, 0xFF	; 255
    2c58:	5f 4f       	sbci	r21, 0xFF	; 255
    2c5a:	56 95       	lsr	r21
    2c5c:	54 2f       	mov	r21, r20
    2c5e:	44 27       	eor	r20, r20
    2c60:	57 95       	ror	r21
    2c62:	47 95       	ror	r20
    2c64:	22 e0       	ldi	r18, 0x02	; 2
    2c66:	60 ea       	ldi	r22, 0xA0	; 160
    2c68:	86 e9       	ldi	r24, 0x96	; 150
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	0e 94 a3 18 	call	0x3146	; 0x3146 <HAL_I2C_Mem_Write>
		}else
		{
			this means this can be done in one transaction 
		}
	*/
return EEPROM_OK ; 	
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	0d c0       	rjmp	.+26     	; 0x2c8e <EEPROM_WriteByteS+0xae>
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , TXByte ,  
							EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress );
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE) , ATM_CARD_ADDRESS_SIZE , TXByte + (EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress), 
							 BufferSize - EEPROM_NUMBER_OF_BYTES_FOR_PAGE + ByteAddress);	
	}else{
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , TXByte , BufferSize);
    2c74:	ec 2e       	mov	r14, r28
    2c76:	8b 01       	movw	r16, r22
    2c78:	22 e0       	ldi	r18, 0x02	; 2
    2c7a:	60 ea       	ldi	r22, 0xA0	; 160
    2c7c:	86 e9       	ldi	r24, 0x96	; 150
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e 94 a3 18 	call	0x3146	; 0x3146 <HAL_I2C_Mem_Write>
		}else
		{
			this means this can be done in one transaction 
		}
	*/
return EEPROM_OK ; 	
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	03 c0       	rjmp	.+6      	; 0x2c8e <EEPROM_WriteByteS+0xae>
EEPROM_Status_t EEPROM_WriteByteS(uint16_t StartByteNum , uint8_t  * TXByte , uint8_t BufferSize)
{
	uint16_t PageNum =0 , ByteAddress =0  ;
	if ((TXByte == NULL) || (BufferSize <= 0))
	{
		return EEPROM_PARAM_ERROR ;
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	01 c0       	rjmp	.+2      	; 0x2c8e <EEPROM_WriteByteS+0xae>
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
			this means this can be done in one transaction 
		}
	*/
return EEPROM_OK ; 	

}
    2c8e:	cf 91       	pop	r28
    2c90:	1f 91       	pop	r17
    2c92:	0f 91       	pop	r16
    2c94:	ef 90       	pop	r14
    2c96:	df 90       	pop	r13
    2c98:	cf 90       	pop	r12
    2c9a:	bf 90       	pop	r11
    2c9c:	af 90       	pop	r10
    2c9e:	9f 90       	pop	r9
    2ca0:	8f 90       	pop	r8
    2ca2:	08 95       	ret

00002ca4 <Button_Init>:
 * brief : this function used to initialize all Buttons  
 * parameter(input) : Buttons pointer to array of Buttons configurations 
 * return : status  
 */
ButtonStatus_t Button_Init(ButtonConfig_t * Buttons )
{
    2ca4:	ef 92       	push	r14
    2ca6:	ff 92       	push	r15
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	00 d0       	rcall	.+0      	; 0x2cb0 <Button_Init+0xc>
    2cb0:	1f 92       	push	r1
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
	
	if(Buttons == NULL )
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	d9 f0       	breq	.+54     	; 0x2cf0 <Button_Init+0x4c>
    2cba:	7c 01       	movw	r14, r24
	}
	else
	{
		
		GPIO_InitTypeDef ButtoninInit ; 
		ButtoninInit.mode = GPIO_MODE_INPUT ; 
    2cbc:	1a 82       	std	Y+2, r1	; 0x02
	
	
		for (uint8_t itera = 0 ; itera < NumberOFButtons ; itera++ )
    2cbe:	10 e0       	ldi	r17, 0x00	; 0
    2cc0:	13 c0       	rjmp	.+38     	; 0x2ce8 <Button_Init+0x44>
		{
			ButtoninInit.pin = 	Buttons[itera].PINNum ;
    2cc2:	e1 2f       	mov	r30, r17
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	cf 01       	movw	r24, r30
    2cc8:	88 0f       	add	r24, r24
    2cca:	99 1f       	adc	r25, r25
    2ccc:	e8 0f       	add	r30, r24
    2cce:	f9 1f       	adc	r31, r25
    2cd0:	ee 0d       	add	r30, r14
    2cd2:	ff 1d       	adc	r31, r15
    2cd4:	82 81       	ldd	r24, Z+2	; 0x02
    2cd6:	89 83       	std	Y+1, r24	; 0x01
			HAL_GPIO_Pin_Init(Buttons[itera].PORT , &ButtoninInit) ;
    2cd8:	be 01       	movw	r22, r28
    2cda:	6f 5f       	subi	r22, 0xFF	; 255
    2cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cde:	80 81       	ld	r24, Z
    2ce0:	91 81       	ldd	r25, Z+1	; 0x01
    2ce2:	0e 94 3a 18 	call	0x3074	; 0x3074 <HAL_GPIO_Pin_Init>
		
		GPIO_InitTypeDef ButtoninInit ; 
		ButtoninInit.mode = GPIO_MODE_INPUT ; 
	
	
		for (uint8_t itera = 0 ; itera < NumberOFButtons ; itera++ )
    2ce6:	1f 5f       	subi	r17, 0xFF	; 255
    2ce8:	12 30       	cpi	r17, 0x02	; 2
    2cea:	58 f3       	brcs	.-42     	; 0x2cc2 <Button_Init+0x1e>
	
	
	
	}
	
	return  FUN_Ok ;
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	01 c0       	rjmp	.+2      	; 0x2cf2 <Button_Init+0x4e>
ButtonStatus_t Button_Init(ButtonConfig_t * Buttons )
{
	
	if(Buttons == NULL )
	{
		return FUN_Param_ERROR ;
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return  FUN_Ok ;
	
	
}
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	df 91       	pop	r29
    2cfa:	cf 91       	pop	r28
    2cfc:	1f 91       	pop	r17
    2cfe:	ff 90       	pop	r15
    2d00:	ef 90       	pop	r14
    2d02:	08 95       	ret

00002d04 <Button_Read>:
 * return : states of specified pin 
 */
ButtonState_t Button_Read(ButtonConfig_t * Buttons , uint8_t ButtonIndex  )
{
	
	if ((Buttons == NULL) || (ButtonIndex > NumberOFButtons))
    2d04:	00 97       	sbiw	r24, 0x00	; 0
    2d06:	89 f0       	breq	.+34     	; 0x2d2a <Button_Read+0x26>
    2d08:	63 30       	cpi	r22, 0x03	; 3
    2d0a:	88 f4       	brcc	.+34     	; 0x2d2e <Button_Read+0x2a>
	{
		return -1 ;
	}else
	{
		return HAL_GPIO_READPIN(Buttons[ButtonIndex].PORT , Buttons[ButtonIndex].PINNum) ;
    2d0c:	70 e0       	ldi	r23, 0x00	; 0
    2d0e:	fb 01       	movw	r30, r22
    2d10:	ee 0f       	add	r30, r30
    2d12:	ff 1f       	adc	r31, r31
    2d14:	6e 0f       	add	r22, r30
    2d16:	7f 1f       	adc	r23, r31
    2d18:	fc 01       	movw	r30, r24
    2d1a:	e6 0f       	add	r30, r22
    2d1c:	f7 1f       	adc	r31, r23
    2d1e:	62 81       	ldd	r22, Z+2	; 0x02
    2d20:	80 81       	ld	r24, Z
    2d22:	91 81       	ldd	r25, Z+1	; 0x01
    2d24:	0e 94 4d 18 	call	0x309a	; 0x309a <HAL_GPIO_READPIN>
    2d28:	08 95       	ret
ButtonState_t Button_Read(ButtonConfig_t * Buttons , uint8_t ButtonIndex  )
{
	
	if ((Buttons == NULL) || (ButtonIndex > NumberOFButtons))
	{
		return -1 ;
    2d2a:	8f ef       	ldi	r24, 0xFF	; 255
    2d2c:	08 95       	ret
    2d2e:	8f ef       	ldi	r24, 0xFF	; 255
	}else
	{
		return HAL_GPIO_READPIN(Buttons[ButtonIndex].PORT , Buttons[ButtonIndex].PINNum) ;
	}
	
}
    2d30:	08 95       	ret

00002d32 <String_F_PrintLine>:




String_F_Status_t String_F_PrintLine(char * Str_F)
{
    2d32:	cf 93       	push	r28
    2d34:	df 93       	push	r29
	if (Str_F == NULL)
    2d36:	00 97       	sbiw	r24, 0x00	; 0
    2d38:	69 f1       	breq	.+90     	; 0x2d94 <String_F_PrintLine+0x62>
    2d3a:	ec 01       	movw	r28, r24
	{
		return String_F_NOK ; 
	}
		printf_P(PSTR("\n"));
    2d3c:	83 e4       	ldi	r24, 0x43	; 67
    2d3e:	91 e1       	ldi	r25, 0x11	; 17
    2d40:	9f 93       	push	r25
    2d42:	8f 93       	push	r24
    2d44:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
		printf_P(PSTR("*******************************************************************************************\n                " ));
    2d48:	86 ed       	ldi	r24, 0xD6	; 214
    2d4a:	90 e1       	ldi	r25, 0x10	; 16
    2d4c:	9f 93       	push	r25
    2d4e:	8f 93       	push	r24
    2d50:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
		printf_P(Str_F);
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
		printf_P(PSTR("                \n"));		
    2d5c:	84 ec       	ldi	r24, 0xC4	; 196
    2d5e:	90 e1       	ldi	r25, 0x10	; 16
    2d60:	9f 93       	push	r25
    2d62:	8f 93       	push	r24
    2d64:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
		printf_P(PSTR("*******************************************************************************************\n"));
    2d68:	87 e6       	ldi	r24, 0x67	; 103
    2d6a:	90 e1       	ldi	r25, 0x10	; 16
    2d6c:	9f 93       	push	r25
    2d6e:	8f 93       	push	r24
    2d70:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
		printf_P(PSTR("\n"));
    2d74:	85 e6       	ldi	r24, 0x65	; 101
    2d76:	90 e1       	ldi	r25, 0x10	; 16
    2d78:	9f 93       	push	r25
    2d7a:	8f 93       	push	r24
    2d7c:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
		return   String_F_OK ;	
    2d80:	8d b7       	in	r24, 0x3d	; 61
    2d82:	9e b7       	in	r25, 0x3e	; 62
    2d84:	0c 96       	adiw	r24, 0x0c	; 12
    2d86:	0f b6       	in	r0, 0x3f	; 63
    2d88:	f8 94       	cli
    2d8a:	9e bf       	out	0x3e, r25	; 62
    2d8c:	0f be       	out	0x3f, r0	; 63
    2d8e:	8d bf       	out	0x3d, r24	; 61
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	01 c0       	rjmp	.+2      	; 0x2d96 <String_F_PrintLine+0x64>

String_F_Status_t String_F_PrintLine(char * Str_F)
{
	if (Str_F == NULL)
	{
		return String_F_NOK ; 
    2d94:	81 e0       	ldi	r24, 0x01	; 1
		printf_P(Str_F);
		printf_P(PSTR("                \n"));		
		printf_P(PSTR("*******************************************************************************************\n"));
		printf_P(PSTR("\n"));
		return   String_F_OK ;	
}
    2d96:	df 91       	pop	r29
    2d98:	cf 91       	pop	r28
    2d9a:	08 95       	ret

00002d9c <String_F_PrintTwoLines>:



String_F_Status_t String_F_PrintTwoLines(char *  Str_F1 ,char *  Str_F2)
{
    2d9c:	0f 93       	push	r16
    2d9e:	1f 93       	push	r17
    2da0:	cf 93       	push	r28
    2da2:	df 93       	push	r29
	if ((Str_F1 == NULL)||(Str_F2 == NULL))
    2da4:	00 97       	sbiw	r24, 0x00	; 0
    2da6:	79 f1       	breq	.+94     	; 0x2e06 <String_F_PrintTwoLines+0x6a>
    2da8:	61 15       	cp	r22, r1
    2daa:	71 05       	cpc	r23, r1
    2dac:	71 f1       	breq	.+92     	; 0x2e0a <String_F_PrintTwoLines+0x6e>
    2dae:	8b 01       	movw	r16, r22
    2db0:	ec 01       	movw	r28, r24
	{
		return String_F_NOK ;
	}
	printf_P(PSTR("*******************************************************************************************\n                " ));
    2db2:	88 ef       	ldi	r24, 0xF8	; 248
    2db4:	9f e0       	ldi	r25, 0x0F	; 15
    2db6:	9f 93       	push	r25
    2db8:	8f 93       	push	r24
    2dba:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(Str_F1);	
    2dbe:	df 93       	push	r29
    2dc0:	cf 93       	push	r28
    2dc2:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(PSTR("\n                "));	
    2dc6:	86 ee       	ldi	r24, 0xE6	; 230
    2dc8:	9f e0       	ldi	r25, 0x0F	; 15
    2dca:	9f 93       	push	r25
    2dcc:	8f 93       	push	r24
    2dce:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(Str_F2);
    2dd2:	1f 93       	push	r17
    2dd4:	0f 93       	push	r16
    2dd6:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(PSTR("\n"));
    2dda:	84 ee       	ldi	r24, 0xE4	; 228
    2ddc:	9f e0       	ldi	r25, 0x0F	; 15
    2dde:	9f 93       	push	r25
    2de0:	8f 93       	push	r24
    2de2:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	printf_P(PSTR("*******************************************************************************************\n"));
    2de6:	87 e8       	ldi	r24, 0x87	; 135
    2de8:	9f e0       	ldi	r25, 0x0F	; 15
    2dea:	9f 93       	push	r25
    2dec:	8f 93       	push	r24
    2dee:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <printf_P>
	return   String_F_OK ;
    2df2:	8d b7       	in	r24, 0x3d	; 61
    2df4:	9e b7       	in	r25, 0x3e	; 62
    2df6:	0c 96       	adiw	r24, 0x0c	; 12
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	f8 94       	cli
    2dfc:	9e bf       	out	0x3e, r25	; 62
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	8d bf       	out	0x3d, r24	; 61
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	03 c0       	rjmp	.+6      	; 0x2e0c <String_F_PrintTwoLines+0x70>

String_F_Status_t String_F_PrintTwoLines(char *  Str_F1 ,char *  Str_F2)
{
	if ((Str_F1 == NULL)||(Str_F2 == NULL))
	{
		return String_F_NOK ;
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	01 c0       	rjmp	.+2      	; 0x2e0c <String_F_PrintTwoLines+0x70>
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
	printf_P(Str_F2);
	printf_P(PSTR("\n"));
	printf_P(PSTR("*******************************************************************************************\n"));
	return   String_F_OK ;
	
}
    2e0c:	df 91       	pop	r29
    2e0e:	cf 91       	pop	r28
    2e10:	1f 91       	pop	r17
    2e12:	0f 91       	pop	r16
    2e14:	08 95       	ret

00002e16 <main>:

int main(void)
{
	
    /* Replace with your application code */
	APP_Init();
    2e16:	0e 94 cc 09 	call	0x1398	; 0x1398 <APP_Init>
    Motor_Start();
    2e1a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <Motor_Start>
	sei();
    2e1e:	78 94       	sei

	while (1) 
    {
		APP_UPdate();
    2e20:	0e 94 58 09 	call	0x12b0	; 0x12b0 <APP_UPdate>
    2e24:	fd cf       	rjmp	.-6      	; 0x2e20 <main+0xa>

00002e26 <__vector_1>:
}


/* INIT0 Function */
ISR(INT0_vect)
{
    2e26:	1f 92       	push	r1
    2e28:	0f 92       	push	r0
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	0f 92       	push	r0
    2e2e:	11 24       	eor	r1, r1
    2e30:	2f 93       	push	r18
    2e32:	3f 93       	push	r19
    2e34:	4f 93       	push	r20
    2e36:	5f 93       	push	r21
    2e38:	6f 93       	push	r22
    2e3a:	7f 93       	push	r23
    2e3c:	8f 93       	push	r24
    2e3e:	9f 93       	push	r25
    2e40:	af 93       	push	r26
    2e42:	bf 93       	push	r27
    2e44:	ef 93       	push	r30
    2e46:	ff 93       	push	r31
	ptr_INT0();
    2e48:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <ptr_INT0>
    2e4c:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <ptr_INT0+0x1>
    2e50:	09 95       	icall
}
    2e52:	ff 91       	pop	r31
    2e54:	ef 91       	pop	r30
    2e56:	bf 91       	pop	r27
    2e58:	af 91       	pop	r26
    2e5a:	9f 91       	pop	r25
    2e5c:	8f 91       	pop	r24
    2e5e:	7f 91       	pop	r23
    2e60:	6f 91       	pop	r22
    2e62:	5f 91       	pop	r21
    2e64:	4f 91       	pop	r20
    2e66:	3f 91       	pop	r19
    2e68:	2f 91       	pop	r18
    2e6a:	0f 90       	pop	r0
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	0f 90       	pop	r0
    2e70:	1f 90       	pop	r1
    2e72:	18 95       	reti

00002e74 <__vector_2>:
/* INIT0 Function */
ISR(INT1_vect)
{
    2e74:	1f 92       	push	r1
    2e76:	0f 92       	push	r0
    2e78:	0f b6       	in	r0, 0x3f	; 63
    2e7a:	0f 92       	push	r0
    2e7c:	11 24       	eor	r1, r1
    2e7e:	2f 93       	push	r18
    2e80:	3f 93       	push	r19
    2e82:	4f 93       	push	r20
    2e84:	5f 93       	push	r21
    2e86:	6f 93       	push	r22
    2e88:	7f 93       	push	r23
    2e8a:	8f 93       	push	r24
    2e8c:	9f 93       	push	r25
    2e8e:	af 93       	push	r26
    2e90:	bf 93       	push	r27
    2e92:	ef 93       	push	r30
    2e94:	ff 93       	push	r31
	ptr_INT1();
    2e96:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <ptr_INT1>
    2e9a:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <ptr_INT1+0x1>
    2e9e:	09 95       	icall
}
    2ea0:	ff 91       	pop	r31
    2ea2:	ef 91       	pop	r30
    2ea4:	bf 91       	pop	r27
    2ea6:	af 91       	pop	r26
    2ea8:	9f 91       	pop	r25
    2eaa:	8f 91       	pop	r24
    2eac:	7f 91       	pop	r23
    2eae:	6f 91       	pop	r22
    2eb0:	5f 91       	pop	r21
    2eb2:	4f 91       	pop	r20
    2eb4:	3f 91       	pop	r19
    2eb6:	2f 91       	pop	r18
    2eb8:	0f 90       	pop	r0
    2eba:	0f be       	out	0x3f, r0	; 63
    2ebc:	0f 90       	pop	r0
    2ebe:	1f 90       	pop	r1
    2ec0:	18 95       	reti

00002ec2 <__vector_3>:
/* INIT0 Function */
ISR(INT2_vect)
{
    2ec2:	1f 92       	push	r1
    2ec4:	0f 92       	push	r0
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	0f 92       	push	r0
    2eca:	11 24       	eor	r1, r1
    2ecc:	2f 93       	push	r18
    2ece:	3f 93       	push	r19
    2ed0:	4f 93       	push	r20
    2ed2:	5f 93       	push	r21
    2ed4:	6f 93       	push	r22
    2ed6:	7f 93       	push	r23
    2ed8:	8f 93       	push	r24
    2eda:	9f 93       	push	r25
    2edc:	af 93       	push	r26
    2ede:	bf 93       	push	r27
    2ee0:	ef 93       	push	r30
    2ee2:	ff 93       	push	r31
	ptr_INT2();
    2ee4:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <ptr_INT2>
    2ee8:	f0 91 16 02 	lds	r31, 0x0216	; 0x800216 <ptr_INT2+0x1>
    2eec:	09 95       	icall
    2eee:	ff 91       	pop	r31
    2ef0:	ef 91       	pop	r30
    2ef2:	bf 91       	pop	r27
    2ef4:	af 91       	pop	r26
    2ef6:	9f 91       	pop	r25
    2ef8:	8f 91       	pop	r24
    2efa:	7f 91       	pop	r23
    2efc:	6f 91       	pop	r22
    2efe:	5f 91       	pop	r21
    2f00:	4f 91       	pop	r20
    2f02:	3f 91       	pop	r19
    2f04:	2f 91       	pop	r18
    2f06:	0f 90       	pop	r0
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	0f 90       	pop	r0
    2f0c:	1f 90       	pop	r1
    2f0e:	18 95       	reti

00002f10 <ADC_START>:
	
}


 void CallBackFun(void (*fun)(void))
 {
    2f10:	86 b1       	in	r24, 0x06	; 6
    2f12:	80 64       	ori	r24, 0x40	; 64
    2f14:	86 b9       	out	0x06, r24	; 6
    2f16:	08 95       	ret

00002f18 <ADC_Init>:
    2f18:	fc 01       	movw	r30, r24
    2f1a:	80 b7       	in	r24, 0x30	; 48
    2f1c:	8f 71       	andi	r24, 0x1F	; 31
    2f1e:	80 bf       	out	0x30, r24	; 48
    2f20:	20 b7       	in	r18, 0x30	; 48
    2f22:	90 81       	ld	r25, Z
    2f24:	30 e2       	ldi	r19, 0x20	; 32
    2f26:	93 9f       	mul	r25, r19
    2f28:	c0 01       	movw	r24, r0
    2f2a:	11 24       	eor	r1, r1
    2f2c:	82 2b       	or	r24, r18
    2f2e:	80 bf       	out	0x30, r24	; 48
    2f30:	16 b8       	out	0x06, r1	; 6
    2f32:	93 81       	ldd	r25, Z+3	; 0x03
    2f34:	81 81       	ldd	r24, Z+1	; 0x01
    2f36:	89 2b       	or	r24, r25
    2f38:	80 6a       	ori	r24, 0xA0	; 160
    2f3a:	86 b9       	out	0x06, r24	; 6
    2f3c:	17 b8       	out	0x07, r1	; 7
    2f3e:	94 81       	ldd	r25, Z+4	; 0x04
    2f40:	82 81       	ldd	r24, Z+2	; 0x02
    2f42:	89 2b       	or	r24, r25
    2f44:	87 b9       	out	0x07, r24	; 7
    2f46:	83 81       	ldd	r24, Z+3	; 0x03
    2f48:	88 23       	and	r24, r24
    2f4a:	09 f0       	breq	.+2      	; 0x2f4e <ADC_Init+0x36>
    2f4c:	78 94       	sei
    2f4e:	08 95       	ret

00002f50 <ADC_Get_Value_IT>:
 
 
 
 
 PUBLIC void ADC_Get_Value_IT(ADC_Handler_t *Handler,ADC_CH_t AdcChannel)
 {
    2f50:	cf 93       	push	r28
    2f52:	c6 2f       	mov	r28, r22
	 // first we initialize GPIO port to be ready to receive analog signal
	 ADC_GPIO.mode = GPIO_MODE_INPUT ;
    2f54:	ec ec       	ldi	r30, 0xCC	; 204
    2f56:	f1 e0       	ldi	r31, 0x01	; 1
    2f58:	11 82       	std	Z+1, r1	; 0x01
	 ADC_GPIO.pin = (1<<AdcChannel) ;
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	01 c0       	rjmp	.+2      	; 0x2f60 <ADC_Get_Value_IT+0x10>
    2f5e:	88 0f       	add	r24, r24
    2f60:	6a 95       	dec	r22
    2f62:	ea f7       	brpl	.-6      	; 0x2f5e <ADC_Get_Value_IT+0xe>
    2f64:	80 83       	st	Z, r24
	 ADC_GPIO.pull = GPIO_NOPULL ;
    2f66:	12 82       	std	Z+2, r1	; 0x02
	 HAL_GPIO_Pin_Init(GPIOA , &ADC_GPIO);  /* set selected pin as GPIO analog pin */
    2f68:	bf 01       	movw	r22, r30
    2f6a:	89 e3       	ldi	r24, 0x39	; 57
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	0e 94 3a 18 	call	0x3074	; 0x3074 <HAL_GPIO_Pin_Init>
	 
	 ADMUX &=~(0x1f);		  /* clear first before reconfiguration */
    2f72:	87 b1       	in	r24, 0x07	; 7
    2f74:	80 7e       	andi	r24, 0xE0	; 224
    2f76:	87 b9       	out	0x07, r24	; 7
	 ADMUX |= (AdcChannel);	 /* select channel */
    2f78:	67 b1       	in	r22, 0x07	; 7
    2f7a:	6c 2b       	or	r22, r28
    2f7c:	67 b9       	out	0x07, r22	; 7
	 ADC_START();
    2f7e:	0e 94 88 17 	call	0x2f10	; 0x2f10 <ADC_START>
	 
	 
 }
    2f82:	cf 91       	pop	r28
    2f84:	08 95       	ret

00002f86 <__vector_16>:


 ISR(ADC_vect)
 {	
    2f86:	1f 92       	push	r1
    2f88:	0f 92       	push	r0
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	0f 92       	push	r0
    2f8e:	11 24       	eor	r1, r1
    2f90:	2f 93       	push	r18
    2f92:	3f 93       	push	r19
    2f94:	4f 93       	push	r20
    2f96:	5f 93       	push	r21
    2f98:	6f 93       	push	r22
    2f9a:	7f 93       	push	r23
    2f9c:	8f 93       	push	r24
    2f9e:	9f 93       	push	r25
    2fa0:	af 93       	push	r26
    2fa2:	bf 93       	push	r27
    2fa4:	ef 93       	push	r30
    2fa6:	ff 93       	push	r31

		if(ADC_Adjust_Left & ADMUX ) /* if left adjust is selected */ 
    2fa8:	3d 9b       	sbis	0x07, 5	; 7
    2faa:	15 c0       	rjmp	.+42     	; 0x2fd6 <__vector_16+0x50>
		{
			value =  (ADCL>>6)|(ADCH);	/* ADCL must read first then ADCH to Re_enable access to ADCL & ADCH */
    2fac:	64 b1       	in	r22, 0x04	; 4
    2fae:	85 b1       	in	r24, 0x05	; 5
    2fb0:	62 95       	swap	r22
    2fb2:	66 95       	lsr	r22
    2fb4:	66 95       	lsr	r22
    2fb6:	63 70       	andi	r22, 0x03	; 3
    2fb8:	68 2b       	or	r22, r24
    2fba:	70 e0       	ldi	r23, 0x00	; 0
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__floatsisf>
    2fc4:	60 93 cf 01 	sts	0x01CF, r22	; 0x8001cf <value>
    2fc8:	70 93 d0 01 	sts	0x01D0, r23	; 0x8001d0 <value+0x1>
    2fcc:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <value+0x2>
    2fd0:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <value+0x3>
    2fd4:	14 c0       	rjmp	.+40     	; 0x2ffe <__vector_16+0x78>
		}else{							   /* if right adjust is selected */ 
			value = (ADCL)|(ADCH<<8);
    2fd6:	84 b1       	in	r24, 0x04	; 4
    2fd8:	65 b1       	in	r22, 0x05	; 5
    2fda:	70 e0       	ldi	r23, 0x00	; 0
    2fdc:	76 2f       	mov	r23, r22
    2fde:	66 27       	eor	r22, r22
    2fe0:	68 2b       	or	r22, r24
    2fe2:	07 2e       	mov	r0, r23
    2fe4:	00 0c       	add	r0, r0
    2fe6:	88 0b       	sbc	r24, r24
    2fe8:	99 0b       	sbc	r25, r25
    2fea:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__floatsisf>
    2fee:	60 93 cf 01 	sts	0x01CF, r22	; 0x8001cf <value>
    2ff2:	70 93 d0 01 	sts	0x01D0, r23	; 0x8001d0 <value+0x1>
    2ff6:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <value+0x2>
    2ffa:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <value+0x3>
		}
		
		value = ((( value )*0.0048828 )/0.01) ;
    2ffe:	25 ee       	ldi	r18, 0xE5	; 229
    3000:	3f ef       	ldi	r19, 0xFF	; 255
    3002:	4f e9       	ldi	r20, 0x9F	; 159
    3004:	5b e3       	ldi	r21, 0x3B	; 59
    3006:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <value>
    300a:	70 91 d0 01 	lds	r23, 0x01D0	; 0x8001d0 <value+0x1>
    300e:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <value+0x2>
    3012:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <value+0x3>
    3016:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <__mulsf3>
    301a:	2a e0       	ldi	r18, 0x0A	; 10
    301c:	37 ed       	ldi	r19, 0xD7	; 215
    301e:	43 e2       	ldi	r20, 0x23	; 35
    3020:	5c e3       	ldi	r21, 0x3C	; 60
    3022:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__divsf3>
    3026:	60 93 cf 01 	sts	0x01CF, r22	; 0x8001cf <value>
    302a:	70 93 d0 01 	sts	0x01D0, r23	; 0x8001d0 <value+0x1>
    302e:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <value+0x2>
    3032:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <value+0x3>
		if ((uint16_t)value >  Max_Temp )
    3036:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <__fixunssfsi>
    303a:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <__data_end>
    303e:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <__data_end+0x1>
    3042:	26 17       	cp	r18, r22
    3044:	37 07       	cpc	r19, r23
    3046:	28 f4       	brcc	.+10     	; 0x3052 <__vector_16+0xcc>
		{
			SERVER_ADMIN_Error(ADMIN_ERROR_SET);
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	0e 94 ce 11 	call	0x239c	; 0x239c <SERVER_ADMIN_Error>
			ATM_Lock_Fun();
    304e:	0e 94 06 10 	call	0x200c	; 0x200c <ATM_Lock_Fun>
		}

    3052:	ff 91       	pop	r31
    3054:	ef 91       	pop	r30
    3056:	bf 91       	pop	r27
    3058:	af 91       	pop	r26
    305a:	9f 91       	pop	r25
    305c:	8f 91       	pop	r24
    305e:	7f 91       	pop	r23
    3060:	6f 91       	pop	r22
    3062:	5f 91       	pop	r21
    3064:	4f 91       	pop	r20
    3066:	3f 91       	pop	r19
    3068:	2f 91       	pop	r18
    306a:	0f 90       	pop	r0
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	0f 90       	pop	r0
    3070:	1f 90       	pop	r1
    3072:	18 95       	reti

00003074 <HAL_GPIO_Pin_Init>:
 * param. : PORT pointer to GPIO port
 * param. : PIN_CONFIG pointer to struct hold all configuration
 * return : void 
 */
void HAL_GPIO_Pin_Init(StrGPIO_t PORT, GPIO_InitTypeDef *  PIN_CONFIG)
{
    3074:	fc 01       	movw	r30, r24

		if(PIN_CONFIG->mode == GPIO_MODE_OUTPUT)
    3076:	db 01       	movw	r26, r22
    3078:	11 96       	adiw	r26, 0x01	; 1
    307a:	8c 91       	ld	r24, X
    307c:	11 97       	sbiw	r26, 0x01	; 1
    307e:	81 30       	cpi	r24, 0x01	; 1
    3080:	29 f4       	brne	.+10     	; 0x308c <HAL_GPIO_Pin_Init+0x18>
		{
			PORT->DDR_REG  |= PIN_CONFIG->pin ;      //SET ALL PINS AS OUTPUT
    3082:	8c 91       	ld	r24, X
    3084:	91 81       	ldd	r25, Z+1	; 0x01
    3086:	89 2b       	or	r24, r25
    3088:	81 83       	std	Z+1, r24	; 0x01
    308a:	08 95       	ret
		}else{  // PINS MODE CONFIGURED AS INPUT
			if(PIN_CONFIG->pull == GPIO_PULLUP)
			{
			//	PORT->PIN_REG |= PIN_CONFIG->pin ;     // SET PULL UP RES.
			}
			PORT->DDR_REG &= ~(PIN_CONFIG->pin);
    308c:	db 01       	movw	r26, r22
    308e:	9c 91       	ld	r25, X
    3090:	90 95       	com	r25
    3092:	81 81       	ldd	r24, Z+1	; 0x01
    3094:	98 23       	and	r25, r24
    3096:	91 83       	std	Z+1, r25	; 0x01
    3098:	08 95       	ret

0000309a <HAL_GPIO_READPIN>:
 * param. : PIN_NUM the pin number must be one of GPIO_PIN_ 
 * return : return on of  GPIO_PIN_RESET or GPIO_PIN_SET 
 */
GPIO_PinState HAL_GPIO_READPIN(StrGPIO_t PORT,uint8_t PIN_NUM)
{
	if(PORT->PIN_REG & PIN_NUM)  /* check if specific pin is set */
    309a:	fc 01       	movw	r30, r24
    309c:	80 81       	ld	r24, Z
    309e:	68 23       	and	r22, r24
    30a0:	11 f0       	breq	.+4      	; 0x30a6 <HAL_GPIO_READPIN+0xc>
	{
		return GPIO_PIN_SET ;
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	08 95       	ret
	}
	else              /* if read pin is zero */
	{
		return GPIO_PIN_RESET ;
    30a6:	80 e0       	ldi	r24, 0x00	; 0
	}
}/* END_FUN HAL_GPIO_READPIN()*/
    30a8:	08 95       	ret

000030aa <HAL_GPIO_WRITEPIN>:
 * param. : PIN_NUM the pin number must be one of GPIO_PIN_RESET or GPIO_PIN_SET
 * return : void  
 */
void HAL_GPIO_WRITEPIN(StrGPIO_t PORT,uint8_t PIN_NUM,GPIO_PinState PIN_STATE)
{
	if(PIN_STATE != GPIO_PIN_RESET)
    30aa:	44 23       	and	r20, r20
    30ac:	29 f0       	breq	.+10     	; 0x30b8 <HAL_GPIO_WRITEPIN+0xe>
	{
		PORT->PORT_REG |= PIN_NUM ;
    30ae:	fc 01       	movw	r30, r24
    30b0:	22 81       	ldd	r18, Z+2	; 0x02
    30b2:	62 2b       	or	r22, r18
    30b4:	62 83       	std	Z+2, r22	; 0x02
    30b6:	08 95       	ret
	}
	else
	{
		PORT->PORT_REG &= ~(PIN_NUM);
    30b8:	60 95       	com	r22
    30ba:	fc 01       	movw	r30, r24
    30bc:	22 81       	ldd	r18, Z+2	; 0x02
    30be:	62 23       	and	r22, r18
    30c0:	62 83       	std	Z+2, r22	; 0x02
    30c2:	08 95       	ret

000030c4 <I2C_Init>:
		I2C_EN_NACK() ;
	
	
		return I2C_NORMAL ;
	
}/* END_FUN I2C_SLAVE_TRANSMIT() */
    30c4:	8f 92       	push	r8
    30c6:	9f 92       	push	r9
    30c8:	af 92       	push	r10
    30ca:	bf 92       	push	r11
    30cc:	cf 92       	push	r12
    30ce:	df 92       	push	r13
    30d0:	ef 92       	push	r14
    30d2:	ff 92       	push	r15
    30d4:	0f 93       	push	r16
    30d6:	cf 93       	push	r28
    30d8:	df 93       	push	r29
    30da:	ec 01       	movw	r28, r24
    30dc:	28 81       	ld	r18, Y
    30de:	39 81       	ldd	r19, Y+1	; 0x01
    30e0:	4a 81       	ldd	r20, Y+2	; 0x02
    30e2:	5b 81       	ldd	r21, Y+3	; 0x03
    30e4:	60 e0       	ldi	r22, 0x00	; 0
    30e6:	74 e2       	ldi	r23, 0x24	; 36
    30e8:	84 ef       	ldi	r24, 0xF4	; 244
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <__udivmodsi4>
    30f0:	49 01       	movw	r8, r18
    30f2:	5a 01       	movw	r10, r20
    30f4:	39 2d       	mov	r19, r9
    30f6:	4a 2d       	mov	r20, r10
    30f8:	5b 2d       	mov	r21, r11
    30fa:	60 e0       	ldi	r22, 0x00	; 0
    30fc:	70 e0       	ldi	r23, 0x00	; 0
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	a0 ef       	ldi	r26, 0xF0	; 240
    3104:	0e 94 38 20 	call	0x4070	; 0x4070 <__adddi3_s8>
    3108:	01 e0       	ldi	r16, 0x01	; 1
    310a:	0e 94 1c 20 	call	0x4038	; 0x4038 <__lshrdi3>
    310e:	20 b9       	out	0x00, r18	; 0
    3110:	8c 81       	ldd	r24, Y+4	; 0x04
    3112:	82 b9       	out	0x02, r24	; 2
    3114:	16 be       	out	0x36, r1	; 54
    3116:	11 b8       	out	0x01, r1	; 1
    3118:	8d 81       	ldd	r24, Y+5	; 0x05
    311a:	81 30       	cpi	r24, 0x01	; 1
    311c:	29 f4       	brne	.+10     	; 0x3128 <I2C_Init+0x64>
    311e:	78 94       	sei
    3120:	86 b7       	in	r24, 0x36	; 54
    3122:	81 60       	ori	r24, 0x01	; 1
    3124:	86 bf       	out	0x36, r24	; 54
    3126:	03 c0       	rjmp	.+6      	; 0x312e <I2C_Init+0x6a>
    3128:	86 b7       	in	r24, 0x36	; 54
    312a:	8e 7f       	andi	r24, 0xFE	; 254
    312c:	86 bf       	out	0x36, r24	; 54
    312e:	df 91       	pop	r29
    3130:	cf 91       	pop	r28
    3132:	0f 91       	pop	r16
    3134:	ff 90       	pop	r15
    3136:	ef 90       	pop	r14
    3138:	df 90       	pop	r13
    313a:	cf 90       	pop	r12
    313c:	bf 90       	pop	r11
    313e:	af 90       	pop	r10
    3140:	9f 90       	pop	r9
    3142:	8f 90       	pop	r8
    3144:	08 95       	ret

00003146 <HAL_I2C_Mem_Write>:
 * param.  : memAdd this is the internal memory address that you need to write data to 
 * param.  : pRxData this is pointer to the buffer that hold the writing data 
 * param.  : DataSize number of bytes that you need to write 
*/ 
I2C_STATUS HAL_I2C_Mem_Write(I2C_Handler_t * Handler ,uint8_t DevAdd,uint16_t MemAdd ,uint8_t MemAddSize ,uint8_t * pTxData ,uint8_t DataSize )
{
    3146:	ef 92       	push	r14
    3148:	0f 93       	push	r16
    314a:	1f 93       	push	r17
    314c:	dc 01       	movw	r26, r24
	Handler->buffer = pTxData ;
    314e:	17 96       	adiw	r26, 0x07	; 7
    3150:	1c 93       	st	X, r17
    3152:	0e 93       	st	-X, r16
    3154:	16 97       	sbiw	r26, 0x06	; 6
	Handler->BufferSize   = DataSize;
    3156:	18 96       	adiw	r26, 0x08	; 8
    3158:	ec 92       	st	X, r14
    315a:	18 97       	sbiw	r26, 0x08	; 8
	
	I2C_EN_START();WAIT_FLAG();
    315c:	84 ea       	ldi	r24, 0xA4	; 164
    315e:	86 bf       	out	0x36, r24	; 54
    3160:	06 b6       	in	r0, 0x36	; 54
    3162:	07 fe       	sbrs	r0, 7
    3164:	fd cf       	rjmp	.-6      	; 0x3160 <HAL_I2C_Mem_Write+0x1a>
	I2C->I2C_TWDR = DevAdd ;
    3166:	63 b9       	out	0x03, r22	; 3
	I2C_EN();WAIT_FLAG();
    3168:	84 e8       	ldi	r24, 0x84	; 132
    316a:	86 bf       	out	0x36, r24	; 54
    316c:	06 b6       	in	r0, 0x36	; 54
    316e:	07 fe       	sbrs	r0, 7
    3170:	fd cf       	rjmp	.-6      	; 0x316c <HAL_I2C_Mem_Write+0x26>

	if (MemAddSize == 2)
    3172:	22 30       	cpi	r18, 0x02	; 2
    3174:	31 f4       	brne	.+12     	; 0x3182 <HAL_I2C_Mem_Write+0x3c>
	{
		I2C->I2C_TWDR =( MemAdd>>8 & 0xff );
    3176:	53 b9       	out	0x03, r21	; 3
		I2C_EN();WAIT_FLAG();
    3178:	84 e8       	ldi	r24, 0x84	; 132
    317a:	86 bf       	out	0x36, r24	; 54
    317c:	06 b6       	in	r0, 0x36	; 54
    317e:	07 fe       	sbrs	r0, 7
    3180:	fd cf       	rjmp	.-6      	; 0x317c <HAL_I2C_Mem_Write+0x36>
	}
	I2C->I2C_TWDR =( MemAdd & 0xff );
    3182:	43 b9       	out	0x03, r20	; 3
	I2C_EN();WAIT_FLAG();
    3184:	84 e8       	ldi	r24, 0x84	; 132
    3186:	86 bf       	out	0x36, r24	; 54
    3188:	06 b6       	in	r0, 0x36	; 54
    318a:	07 fe       	sbrs	r0, 7
    318c:	fd cf       	rjmp	.-6      	; 0x3188 <HAL_I2C_Mem_Write+0x42>
    318e:	13 c0       	rjmp	.+38     	; 0x31b6 <HAL_I2C_Mem_Write+0x70>

	while(DataSize-- > 0)
	{
		I2C->I2C_TWDR = *(Handler->buffer++) ;
    3190:	16 96       	adiw	r26, 0x06	; 6
    3192:	ed 91       	ld	r30, X+
    3194:	fc 91       	ld	r31, X
    3196:	17 97       	sbiw	r26, 0x07	; 7
    3198:	9f 01       	movw	r18, r30
    319a:	2f 5f       	subi	r18, 0xFF	; 255
    319c:	3f 4f       	sbci	r19, 0xFF	; 255
    319e:	17 96       	adiw	r26, 0x07	; 7
    31a0:	3c 93       	st	X, r19
    31a2:	2e 93       	st	-X, r18
    31a4:	16 97       	sbiw	r26, 0x06	; 6
    31a6:	90 81       	ld	r25, Z
    31a8:	93 b9       	out	0x03, r25	; 3
		I2C_EN();WAIT_FLAG();
    31aa:	94 e8       	ldi	r25, 0x84	; 132
    31ac:	96 bf       	out	0x36, r25	; 54
    31ae:	06 b6       	in	r0, 0x36	; 54
    31b0:	07 fe       	sbrs	r0, 7
    31b2:	fd cf       	rjmp	.-6      	; 0x31ae <HAL_I2C_Mem_Write+0x68>
		I2C_EN();WAIT_FLAG();
	}
	I2C->I2C_TWDR =( MemAdd & 0xff );
	I2C_EN();WAIT_FLAG();

	while(DataSize-- > 0)
    31b4:	e8 2e       	mov	r14, r24
    31b6:	8f ef       	ldi	r24, 0xFF	; 255
    31b8:	8e 0d       	add	r24, r14
    31ba:	e1 10       	cpse	r14, r1
    31bc:	e9 cf       	rjmp	.-46     	; 0x3190 <HAL_I2C_Mem_Write+0x4a>
	{
		I2C->I2C_TWDR = *(Handler->buffer++) ;
		I2C_EN();WAIT_FLAG();

	}
	I2C_EN_STOP();
    31be:	84 e9       	ldi	r24, 0x94	; 148
    31c0:	86 bf       	out	0x36, r24	; 54

	return I2C_NORMAL ;
	
}/* END_FUN I2C_MEM_WRITE() */
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	1f 91       	pop	r17
    31c6:	0f 91       	pop	r16
    31c8:	ef 90       	pop	r14
    31ca:	08 95       	ret

000031cc <HAL_I2C_Mem_Read>:
 * param.  : memAdd this is the internal memory address that you need to read data from it 
 * param.  : pRxData this is pointer to the buffer that will hold the reading data 
 * param.  : DataSize number of bytes that you need to read 
*/ 
I2C_STATUS HAL_I2C_Mem_Read(I2C_Handler_t * Handler ,uint8_t DevAdd,uint16_t MemAdd ,uint8_t MemAddSize ,uint8_t * pRxData ,uint8_t DataSize )
{
    31cc:	ef 92       	push	r14
    31ce:	0f 93       	push	r16
    31d0:	1f 93       	push	r17
    31d2:	dc 01       	movw	r26, r24
    31d4:	9e 2d       	mov	r25, r14
	Handler->buffer = pRxData ;
    31d6:	17 96       	adiw	r26, 0x07	; 7
    31d8:	1c 93       	st	X, r17
    31da:	0e 93       	st	-X, r16
    31dc:	16 97       	sbiw	r26, 0x06	; 6
	Handler->BufferSize = DataSize;
    31de:	18 96       	adiw	r26, 0x08	; 8
    31e0:	ec 92       	st	X, r14
    31e2:	18 97       	sbiw	r26, 0x08	; 8
	
	I2C_EN_START();WAIT_FLAG();
    31e4:	84 ea       	ldi	r24, 0xA4	; 164
    31e6:	86 bf       	out	0x36, r24	; 54
    31e8:	06 b6       	in	r0, 0x36	; 54
    31ea:	07 fe       	sbrs	r0, 7
    31ec:	fd cf       	rjmp	.-6      	; 0x31e8 <HAL_I2C_Mem_Read+0x1c>
	I2C->I2C_TWDR = DevAdd ;
    31ee:	63 b9       	out	0x03, r22	; 3
	I2C_EN();WAIT_FLAG();
    31f0:	84 e8       	ldi	r24, 0x84	; 132
    31f2:	86 bf       	out	0x36, r24	; 54
    31f4:	06 b6       	in	r0, 0x36	; 54
    31f6:	07 fe       	sbrs	r0, 7
    31f8:	fd cf       	rjmp	.-6      	; 0x31f4 <HAL_I2C_Mem_Read+0x28>
	if (MemAddSize == 2)
    31fa:	22 30       	cpi	r18, 0x02	; 2
    31fc:	31 f4       	brne	.+12     	; 0x320a <HAL_I2C_Mem_Read+0x3e>
	{
		I2C->I2C_TWDR =( MemAdd>>8 & 0xff );
    31fe:	53 b9       	out	0x03, r21	; 3
		I2C_EN();WAIT_FLAG();
    3200:	84 e8       	ldi	r24, 0x84	; 132
    3202:	86 bf       	out	0x36, r24	; 54
    3204:	06 b6       	in	r0, 0x36	; 54
    3206:	07 fe       	sbrs	r0, 7
    3208:	fd cf       	rjmp	.-6      	; 0x3204 <HAL_I2C_Mem_Read+0x38>
	}
	I2C->I2C_TWDR =( MemAdd & 0xff );
    320a:	43 b9       	out	0x03, r20	; 3
	I2C_EN();WAIT_FLAG();
    320c:	84 e8       	ldi	r24, 0x84	; 132
    320e:	86 bf       	out	0x36, r24	; 54
    3210:	06 b6       	in	r0, 0x36	; 54
    3212:	07 fe       	sbrs	r0, 7
    3214:	fd cf       	rjmp	.-6      	; 0x3210 <HAL_I2C_Mem_Read+0x44>
	I2C_EN_START();WAIT_FLAG();
    3216:	84 ea       	ldi	r24, 0xA4	; 164
    3218:	86 bf       	out	0x36, r24	; 54
    321a:	06 b6       	in	r0, 0x36	; 54
    321c:	07 fe       	sbrs	r0, 7
    321e:	fd cf       	rjmp	.-6      	; 0x321a <HAL_I2C_Mem_Read+0x4e>
	I2C->I2C_TWDR = DevAdd | 1 ;
    3220:	61 60       	ori	r22, 0x01	; 1
    3222:	63 b9       	out	0x03, r22	; 3
	I2C_EN();WAIT_FLAG();
    3224:	84 e8       	ldi	r24, 0x84	; 132
    3226:	86 bf       	out	0x36, r24	; 54
    3228:	06 b6       	in	r0, 0x36	; 54
    322a:	07 fe       	sbrs	r0, 7
    322c:	fd cf       	rjmp	.-6      	; 0x3228 <HAL_I2C_Mem_Read+0x5c>
    322e:	13 c0       	rjmp	.+38     	; 0x3256 <HAL_I2C_Mem_Read+0x8a>
	while(DataSize-- > 1)	
	{
		I2C_EN_ACK();WAIT_FLAG();
    3230:	94 ec       	ldi	r25, 0xC4	; 196
    3232:	96 bf       	out	0x36, r25	; 54
    3234:	06 b6       	in	r0, 0x36	; 54
    3236:	07 fe       	sbrs	r0, 7
    3238:	fd cf       	rjmp	.-6      	; 0x3234 <HAL_I2C_Mem_Read+0x68>
		*(Handler->buffer++) = I2C->I2C_TWDR ;
    323a:	16 96       	adiw	r26, 0x06	; 6
    323c:	ed 91       	ld	r30, X+
    323e:	fc 91       	ld	r31, X
    3240:	17 97       	sbiw	r26, 0x07	; 7
    3242:	9f 01       	movw	r18, r30
    3244:	2f 5f       	subi	r18, 0xFF	; 255
    3246:	3f 4f       	sbci	r19, 0xFF	; 255
    3248:	17 96       	adiw	r26, 0x07	; 7
    324a:	3c 93       	st	X, r19
    324c:	2e 93       	st	-X, r18
    324e:	16 97       	sbiw	r26, 0x06	; 6
    3250:	93 b1       	in	r25, 0x03	; 3
    3252:	90 83       	st	Z, r25
	I2C->I2C_TWDR =( MemAdd & 0xff );
	I2C_EN();WAIT_FLAG();
	I2C_EN_START();WAIT_FLAG();
	I2C->I2C_TWDR = DevAdd | 1 ;
	I2C_EN();WAIT_FLAG();
	while(DataSize-- > 1)	
    3254:	98 2f       	mov	r25, r24
    3256:	8f ef       	ldi	r24, 0xFF	; 255
    3258:	89 0f       	add	r24, r25
    325a:	92 30       	cpi	r25, 0x02	; 2
    325c:	48 f7       	brcc	.-46     	; 0x3230 <HAL_I2C_Mem_Read+0x64>
		*(Handler->buffer++) = I2C->I2C_TWDR ;
	}
	
	
	/* Last Byte Will received with NACK */
	I2C_EN();WAIT_FLAG();
    325e:	84 e8       	ldi	r24, 0x84	; 132
    3260:	86 bf       	out	0x36, r24	; 54
    3262:	06 b6       	in	r0, 0x36	; 54
    3264:	07 fe       	sbrs	r0, 7
    3266:	fd cf       	rjmp	.-6      	; 0x3262 <HAL_I2C_Mem_Read+0x96>
	*(Handler->buffer++) = I2C->I2C_TWDR ;
    3268:	16 96       	adiw	r26, 0x06	; 6
    326a:	ed 91       	ld	r30, X+
    326c:	fc 91       	ld	r31, X
    326e:	17 97       	sbiw	r26, 0x07	; 7
    3270:	cf 01       	movw	r24, r30
    3272:	01 96       	adiw	r24, 0x01	; 1
    3274:	17 96       	adiw	r26, 0x07	; 7
    3276:	9c 93       	st	X, r25
    3278:	8e 93       	st	-X, r24
    327a:	16 97       	sbiw	r26, 0x06	; 6
    327c:	83 b1       	in	r24, 0x03	; 3
    327e:	80 83       	st	Z, r24

	
	/* Send Stop Bit allow another Master to acquire the bus */
	I2C_EN_STOP();
    3280:	84 e9       	ldi	r24, 0x94	; 148
    3282:	86 bf       	out	0x36, r24	; 54
	
	
	return I2C_NORMAL ;
} /* END_FUN I2C_MEM_READ() */
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	1f 91       	pop	r17
    3288:	0f 91       	pop	r16
    328a:	ef 90       	pop	r14
    328c:	08 95       	ret

0000328e <HAL_SPI_Init>:
		++(Handler->TxBuffer);
	}
	HAL_GPIO_WRITEPIN(GPIOB,SPI_PIN_SS,GPIO_PIN_SET);
	 
	
}/* END_FUN HAL_SPI_Transmit()*/
    328e:	0f 93       	push	r16
    3290:	1f 93       	push	r17
    3292:	cf 93       	push	r28
    3294:	df 93       	push	r29
    3296:	00 d0       	rcall	.+0      	; 0x3298 <HAL_SPI_Init+0xa>
    3298:	1f 92       	push	r1
    329a:	cd b7       	in	r28, 0x3d	; 61
    329c:	de b7       	in	r29, 0x3e	; 62
    329e:	8c 01       	movw	r16, r24
    32a0:	fc 01       	movw	r30, r24
    32a2:	83 81       	ldd	r24, Z+3	; 0x03
    32a4:	88 23       	and	r24, r24
    32a6:	44 f4       	brge	.+16     	; 0x32b8 <HAL_SPI_Init+0x2a>
    32a8:	9d b1       	in	r25, 0x0d	; 13
    32aa:	83 70       	andi	r24, 0x03	; 3
    32ac:	89 2b       	or	r24, r25
    32ae:	8d b9       	out	0x0d, r24	; 13
    32b0:	8e b1       	in	r24, 0x0e	; 14
    32b2:	81 60       	ori	r24, 0x01	; 1
    32b4:	8e b9       	out	0x0e, r24	; 14
    32b6:	04 c0       	rjmp	.+8      	; 0x32c0 <HAL_SPI_Init+0x32>
    32b8:	9d b1       	in	r25, 0x0d	; 13
    32ba:	83 70       	andi	r24, 0x03	; 3
    32bc:	89 2b       	or	r24, r25
    32be:	8d b9       	out	0x0d, r24	; 13
    32c0:	f8 01       	movw	r30, r16
    32c2:	80 81       	ld	r24, Z
    32c4:	84 ff       	sbrs	r24, 4
    32c6:	16 c0       	rjmp	.+44     	; 0x32f4 <HAL_SPI_Init+0x66>
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	8a 83       	std	Y+2, r24	; 0x02
    32cc:	80 eb       	ldi	r24, 0xB0	; 176
    32ce:	89 83       	std	Y+1, r24	; 0x01
    32d0:	be 01       	movw	r22, r28
    32d2:	6f 5f       	subi	r22, 0xFF	; 255
    32d4:	7f 4f       	sbci	r23, 0xFF	; 255
    32d6:	86 e3       	ldi	r24, 0x36	; 54
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	0e 94 3a 18 	call	0x3074	; 0x3074 <HAL_GPIO_Pin_Init>
    32de:	1a 82       	std	Y+2, r1	; 0x02
    32e0:	80 e4       	ldi	r24, 0x40	; 64
    32e2:	89 83       	std	Y+1, r24	; 0x01
    32e4:	be 01       	movw	r22, r28
    32e6:	6f 5f       	subi	r22, 0xFF	; 255
    32e8:	7f 4f       	sbci	r23, 0xFF	; 255
    32ea:	86 e3       	ldi	r24, 0x36	; 54
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	0e 94 3a 18 	call	0x3074	; 0x3074 <HAL_GPIO_Pin_Init>
    32f2:	15 c0       	rjmp	.+42     	; 0x331e <HAL_SPI_Init+0x90>
    32f4:	1a 82       	std	Y+2, r1	; 0x02
    32f6:	80 eb       	ldi	r24, 0xB0	; 176
    32f8:	89 83       	std	Y+1, r24	; 0x01
    32fa:	be 01       	movw	r22, r28
    32fc:	6f 5f       	subi	r22, 0xFF	; 255
    32fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3300:	86 e3       	ldi	r24, 0x36	; 54
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	0e 94 3a 18 	call	0x3074	; 0x3074 <HAL_GPIO_Pin_Init>
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	8a 83       	std	Y+2, r24	; 0x02
    330c:	80 e4       	ldi	r24, 0x40	; 64
    330e:	89 83       	std	Y+1, r24	; 0x01
    3310:	be 01       	movw	r22, r28
    3312:	6f 5f       	subi	r22, 0xFF	; 255
    3314:	7f 4f       	sbci	r23, 0xFF	; 255
    3316:	86 e3       	ldi	r24, 0x36	; 54
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	0e 94 3a 18 	call	0x3074	; 0x3074 <HAL_GPIO_Pin_Init>
    331e:	f8 01       	movw	r30, r16
    3320:	42 81       	ldd	r20, Z+2	; 0x02
    3322:	81 81       	ldd	r24, Z+1	; 0x01
    3324:	34 81       	ldd	r19, Z+4	; 0x04
    3326:	25 81       	ldd	r18, Z+5	; 0x05
    3328:	90 81       	ld	r25, Z
    332a:	84 2b       	or	r24, r20
    332c:	83 2b       	or	r24, r19
    332e:	82 2b       	or	r24, r18
    3330:	89 2b       	or	r24, r25
    3332:	8d b9       	out	0x0d, r24	; 13
    3334:	8d b1       	in	r24, 0x0d	; 13
    3336:	80 64       	ori	r24, 0x40	; 64
    3338:	8d b9       	out	0x0d, r24	; 13
    333a:	85 81       	ldd	r24, Z+5	; 0x05
    333c:	80 38       	cpi	r24, 0x80	; 128
    333e:	09 f4       	brne	.+2      	; 0x3342 <HAL_SPI_Init+0xb4>
    3340:	78 94       	sei
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	0f 90       	pop	r0
    3348:	df 91       	pop	r29
    334a:	cf 91       	pop	r28
    334c:	1f 91       	pop	r17
    334e:	0f 91       	pop	r16
    3350:	08 95       	ret

00003352 <HAL_SPI_Recieve>:
 * param. :Handler --> this handler of SPI peripheral 
 * param. :pRxData --> pointer to the rx buffer  
 * param. :size    -->the required number of bytes to received 
*/
 void HAL_SPI_Recieve(SPI_Handler_t * Handler,uint8_t * pRxData,uint16_t size )
{
    3352:	fc 01       	movw	r30, r24
	Handler->RxBuffer = pRxData ;
    3354:	71 87       	std	Z+9, r23	; 0x09
    3356:	60 87       	std	Z+8, r22	; 0x08
	Handler->TxBuffer = NULL  ;
    3358:	17 82       	std	Z+7, r1	; 0x07
    335a:	16 82       	std	Z+6, r1	; 0x06
	Handler->RxBufferSize = size ;
    335c:	55 87       	std	Z+13, r21	; 0x0d
    335e:	44 87       	std	Z+12, r20	; 0x0c
	Handler->TxBufferSize = 0;
    3360:	13 86       	std	Z+11, r1	; 0x0b
    3362:	12 86       	std	Z+10, r1	; 0x0a

	while(Handler->RxBufferSize >0)  /* block until end */
    3364:	10 c0       	rjmp	.+32     	; 0x3386 <HAL_SPI_Recieve+0x34>
	{ 
		while(!(SPI_PREPH->SPI_SPSR & SPI_SPSR_SPIF));  /* wait till the SPI send byte and set SPIIF bit */
    3366:	77 9b       	sbis	0x0e, 7	; 14
    3368:	fe cf       	rjmp	.-4      	; 0x3366 <HAL_SPI_Recieve+0x14>
		 *(Handler->RxBuffer) = SPI_PREPH->SPI_SPDR ;
    336a:	a0 85       	ldd	r26, Z+8	; 0x08
    336c:	b1 85       	ldd	r27, Z+9	; 0x09
    336e:	8f b1       	in	r24, 0x0f	; 15
    3370:	8c 93       	st	X, r24
		++(Handler->RxBuffer);
    3372:	80 85       	ldd	r24, Z+8	; 0x08
    3374:	91 85       	ldd	r25, Z+9	; 0x09
    3376:	01 96       	adiw	r24, 0x01	; 1
    3378:	91 87       	std	Z+9, r25	; 0x09
    337a:	80 87       	std	Z+8, r24	; 0x08
		--(Handler->RxBufferSize);
    337c:	84 85       	ldd	r24, Z+12	; 0x0c
    337e:	95 85       	ldd	r25, Z+13	; 0x0d
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	95 87       	std	Z+13, r25	; 0x0d
    3384:	84 87       	std	Z+12, r24	; 0x0c
	Handler->RxBuffer = pRxData ;
	Handler->TxBuffer = NULL  ;
	Handler->RxBufferSize = size ;
	Handler->TxBufferSize = 0;

	while(Handler->RxBufferSize >0)  /* block until end */
    3386:	84 85       	ldd	r24, Z+12	; 0x0c
    3388:	95 85       	ldd	r25, Z+13	; 0x0d
    338a:	89 2b       	or	r24, r25
    338c:	61 f7       	brne	.-40     	; 0x3366 <HAL_SPI_Recieve+0x14>
		--(Handler->RxBufferSize);
	}
	 

	
}/* END_FUN HAL_SPI_Recieve()*/
    338e:	08 95       	ret

00003390 <TIM_NormalModeInit>:
	
	SET_REGISTER_VAL(TCCR1B , TIM16Bit_InputCapture_CAPTURE_EDGE_MASK , Edge ) ;
	
	return TIM_OK ;
	
}
    3390:	00 97       	sbiw	r24, 0x00	; 0
    3392:	89 f0       	breq	.+34     	; 0x33b6 <TIM_NormalModeInit+0x26>
    3394:	fc 01       	movw	r30, r24
    3396:	80 85       	ldd	r24, Z+8	; 0x08
    3398:	81 11       	cpse	r24, r1
    339a:	02 c0       	rjmp	.+4      	; 0x33a0 <TIM_NormalModeInit+0x10>
    339c:	13 be       	out	0x33, r1	; 51
    339e:	08 95       	ret
    33a0:	82 30       	cpi	r24, 0x02	; 2
    33a2:	19 f4       	brne	.+6      	; 0x33aa <TIM_NormalModeInit+0x1a>
    33a4:	15 bc       	out	0x25, r1	; 37
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	08 95       	ret
    33aa:	81 30       	cpi	r24, 0x01	; 1
    33ac:	31 f4       	brne	.+12     	; 0x33ba <TIM_NormalModeInit+0x2a>
    33ae:	1f bc       	out	0x2f, r1	; 47
    33b0:	1e bc       	out	0x2e, r1	; 46
    33b2:	80 e0       	ldi	r24, 0x00	; 0
    33b4:	08 95       	ret
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	08 95       	ret
    33ba:	82 e0       	ldi	r24, 0x02	; 2
    33bc:	08 95       	ret

000033be <TIM_PWMMode_SetDuty>:
    33be:	cf 92       	push	r12
    33c0:	df 92       	push	r13
    33c2:	ef 92       	push	r14
    33c4:	ff 92       	push	r15
    33c6:	0f 93       	push	r16
    33c8:	1f 93       	push	r17
    33ca:	cf 93       	push	r28
    33cc:	df 93       	push	r29
    33ce:	8c 01       	movw	r16, r24
    33d0:	c6 2f       	mov	r28, r22
    33d2:	00 97       	sbiw	r24, 0x00	; 0
    33d4:	09 f4       	brne	.+2      	; 0x33d8 <TIM_PWMMode_SetDuty+0x1a>
    33d6:	8b c0       	rjmp	.+278    	; 0x34ee <TIM_PWMMode_SetDuty+0x130>
    33d8:	fc 01       	movw	r30, r24
    33da:	80 85       	ldd	r24, Z+8	; 0x08
    33dc:	81 11       	cpse	r24, r1
    33de:	08 c0       	rjmp	.+16     	; 0x33f0 <TIM_PWMMode_SetDuty+0x32>
    33e0:	96 2f       	mov	r25, r22
    33e2:	64 e6       	ldi	r22, 0x64	; 100
    33e4:	70 e0       	ldi	r23, 0x00	; 0
    33e6:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <__divmodhi4>
    33ea:	6c bf       	out	0x3c, r22	; 60
    33ec:	80 e0       	ldi	r24, 0x00	; 0
    33ee:	82 c0       	rjmp	.+260    	; 0x34f4 <TIM_PWMMode_SetDuty+0x136>
    33f0:	82 30       	cpi	r24, 0x02	; 2
    33f2:	49 f4       	brne	.+18     	; 0x3406 <TIM_PWMMode_SetDuty+0x48>
    33f4:	96 2f       	mov	r25, r22
    33f6:	80 e0       	ldi	r24, 0x00	; 0
    33f8:	64 e6       	ldi	r22, 0x64	; 100
    33fa:	70 e0       	ldi	r23, 0x00	; 0
    33fc:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <__divmodhi4>
    3400:	63 bd       	out	0x23, r22	; 35
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	77 c0       	rjmp	.+238    	; 0x34f4 <TIM_PWMMode_SetDuty+0x136>
    3406:	81 30       	cpi	r24, 0x01	; 1
    3408:	09 f0       	breq	.+2      	; 0x340c <TIM_PWMMode_SetDuty+0x4e>
    340a:	73 c0       	rjmp	.+230    	; 0x34f2 <TIM_PWMMode_SetDuty+0x134>
    340c:	8f ef       	ldi	r24, 0xFF	; 255
    340e:	9f e0       	ldi	r25, 0x0F	; 15
    3410:	97 bd       	out	0x27, r25	; 39
    3412:	86 bd       	out	0x26, r24	; 38
    3414:	f8 01       	movw	r30, r16
    3416:	86 81       	ldd	r24, Z+6	; 0x06
    3418:	8f 3f       	cpi	r24, 0xFF	; 255
    341a:	b9 f5       	brne	.+110    	; 0x348a <TIM_PWMMode_SetDuty+0xcc>
    341c:	80 81       	ld	r24, Z
    341e:	91 81       	ldd	r25, Z+1	; 0x01
    3420:	a2 81       	ldd	r26, Z+2	; 0x02
    3422:	b3 81       	ldd	r27, Z+3	; 0x03
    3424:	bc 01       	movw	r22, r24
    3426:	cd 01       	movw	r24, r26
    3428:	7f 70       	andi	r23, 0x0F	; 15
    342a:	88 27       	eor	r24, r24
    342c:	99 27       	eor	r25, r25
    342e:	0f 2e       	mov	r0, r31
    3430:	f4 e6       	ldi	r31, 0x64	; 100
    3432:	cf 2e       	mov	r12, r31
    3434:	d1 2c       	mov	r13, r1
    3436:	e1 2c       	mov	r14, r1
    3438:	f1 2c       	mov	r15, r1
    343a:	f0 2d       	mov	r31, r0
    343c:	a7 01       	movw	r20, r14
    343e:	96 01       	movw	r18, r12
    3440:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <__udivmodsi4>
    3444:	d0 e0       	ldi	r29, 0x00	; 0
    3446:	c2 9f       	mul	r28, r18
    3448:	c0 01       	movw	r24, r0
    344a:	c3 9f       	mul	r28, r19
    344c:	90 0d       	add	r25, r0
    344e:	d2 9f       	mul	r29, r18
    3450:	90 0d       	add	r25, r0
    3452:	11 24       	eor	r1, r1
    3454:	9b bd       	out	0x2b, r25	; 43
    3456:	8a bd       	out	0x2a, r24	; 42
    3458:	f8 01       	movw	r30, r16
    345a:	80 81       	ld	r24, Z
    345c:	91 81       	ldd	r25, Z+1	; 0x01
    345e:	a2 81       	ldd	r26, Z+2	; 0x02
    3460:	b3 81       	ldd	r27, Z+3	; 0x03
    3462:	bc 01       	movw	r22, r24
    3464:	cd 01       	movw	r24, r26
    3466:	7f 70       	andi	r23, 0x0F	; 15
    3468:	88 27       	eor	r24, r24
    346a:	99 27       	eor	r25, r25
    346c:	a7 01       	movw	r20, r14
    346e:	96 01       	movw	r18, r12
    3470:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <__udivmodsi4>
    3474:	c2 9f       	mul	r28, r18
    3476:	c0 01       	movw	r24, r0
    3478:	c3 9f       	mul	r28, r19
    347a:	90 0d       	add	r25, r0
    347c:	d2 9f       	mul	r29, r18
    347e:	90 0d       	add	r25, r0
    3480:	11 24       	eor	r1, r1
    3482:	99 bd       	out	0x29, r25	; 41
    3484:	88 bd       	out	0x28, r24	; 40
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	35 c0       	rjmp	.+106    	; 0x34f4 <TIM_PWMMode_SetDuty+0x136>
    348a:	84 30       	cpi	r24, 0x04	; 4
    348c:	c1 f4       	brne	.+48     	; 0x34be <TIM_PWMMode_SetDuty+0x100>
    348e:	f8 01       	movw	r30, r16
    3490:	80 81       	ld	r24, Z
    3492:	91 81       	ldd	r25, Z+1	; 0x01
    3494:	a2 81       	ldd	r26, Z+2	; 0x02
    3496:	b3 81       	ldd	r27, Z+3	; 0x03
    3498:	9c 01       	movw	r18, r24
    349a:	ad 01       	movw	r20, r26
    349c:	3f 70       	andi	r19, 0x0F	; 15
    349e:	44 27       	eor	r20, r20
    34a0:	55 27       	eor	r21, r21
    34a2:	a6 2f       	mov	r26, r22
    34a4:	b0 e0       	ldi	r27, 0x00	; 0
    34a6:	0e 94 0f 20 	call	0x401e	; 0x401e <__muluhisi3>
    34aa:	24 e6       	ldi	r18, 0x64	; 100
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	40 e0       	ldi	r20, 0x00	; 0
    34b0:	50 e0       	ldi	r21, 0x00	; 0
    34b2:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <__udivmodsi4>
    34b6:	39 bd       	out	0x29, r19	; 41
    34b8:	28 bd       	out	0x28, r18	; 40
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	1b c0       	rjmp	.+54     	; 0x34f4 <TIM_PWMMode_SetDuty+0x136>
    34be:	f8 01       	movw	r30, r16
    34c0:	80 81       	ld	r24, Z
    34c2:	91 81       	ldd	r25, Z+1	; 0x01
    34c4:	a2 81       	ldd	r26, Z+2	; 0x02
    34c6:	b3 81       	ldd	r27, Z+3	; 0x03
    34c8:	9c 01       	movw	r18, r24
    34ca:	ad 01       	movw	r20, r26
    34cc:	3f 70       	andi	r19, 0x0F	; 15
    34ce:	44 27       	eor	r20, r20
    34d0:	55 27       	eor	r21, r21
    34d2:	a6 2f       	mov	r26, r22
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
    34d6:	0e 94 0f 20 	call	0x401e	; 0x401e <__muluhisi3>
    34da:	24 e6       	ldi	r18, 0x64	; 100
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	40 e0       	ldi	r20, 0x00	; 0
    34e0:	50 e0       	ldi	r21, 0x00	; 0
    34e2:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <__udivmodsi4>
    34e6:	3b bd       	out	0x2b, r19	; 43
    34e8:	2a bd       	out	0x2a, r18	; 42
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	03 c0       	rjmp	.+6      	; 0x34f4 <TIM_PWMMode_SetDuty+0x136>
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	01 c0       	rjmp	.+2      	; 0x34f4 <TIM_PWMMode_SetDuty+0x136>
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	df 91       	pop	r29
    34f6:	cf 91       	pop	r28
    34f8:	1f 91       	pop	r17
    34fa:	0f 91       	pop	r16
    34fc:	ff 90       	pop	r15
    34fe:	ef 90       	pop	r14
    3500:	df 90       	pop	r13
    3502:	cf 90       	pop	r12
    3504:	08 95       	ret

00003506 <TIM_Start>:
    3506:	00 97       	sbiw	r24, 0x00	; 0
    3508:	29 f1       	breq	.+74     	; 0x3554 <TIM_Start+0x4e>
    350a:	fc 01       	movw	r30, r24
    350c:	20 85       	ldd	r18, Z+8	; 0x08
    350e:	21 11       	cpse	r18, r1
    3510:	09 c0       	rjmp	.+18     	; 0x3524 <TIM_Start+0x1e>
    3512:	23 b7       	in	r18, 0x33	; 51
    3514:	28 7f       	andi	r18, 0xF8	; 248
    3516:	23 bf       	out	0x33, r18	; 51
    3518:	23 b7       	in	r18, 0x33	; 51
    351a:	87 81       	ldd	r24, Z+7	; 0x07
    351c:	82 2b       	or	r24, r18
    351e:	83 bf       	out	0x33, r24	; 51
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	08 95       	ret
    3524:	22 30       	cpi	r18, 0x02	; 2
    3526:	51 f4       	brne	.+20     	; 0x353c <TIM_Start+0x36>
    3528:	25 b5       	in	r18, 0x25	; 37
    352a:	28 7f       	andi	r18, 0xF8	; 248
    352c:	25 bd       	out	0x25, r18	; 37
    352e:	25 b5       	in	r18, 0x25	; 37
    3530:	fc 01       	movw	r30, r24
    3532:	87 81       	ldd	r24, Z+7	; 0x07
    3534:	82 2b       	or	r24, r18
    3536:	85 bd       	out	0x25, r24	; 37
    3538:	80 e0       	ldi	r24, 0x00	; 0
    353a:	08 95       	ret
    353c:	21 30       	cpi	r18, 0x01	; 1
    353e:	61 f4       	brne	.+24     	; 0x3558 <TIM_Start+0x52>
    3540:	2e b5       	in	r18, 0x2e	; 46
    3542:	28 7f       	andi	r18, 0xF8	; 248
    3544:	2e bd       	out	0x2e, r18	; 46
    3546:	2e b5       	in	r18, 0x2e	; 46
    3548:	fc 01       	movw	r30, r24
    354a:	87 81       	ldd	r24, Z+7	; 0x07
    354c:	82 2b       	or	r24, r18
    354e:	8e bd       	out	0x2e, r24	; 46
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	08 95       	ret
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	08 95       	ret
    3558:	82 e0       	ldi	r24, 0x02	; 2
    355a:	08 95       	ret

0000355c <TIM_Stop>:
    355c:	81 11       	cpse	r24, r1
    355e:	07 c0       	rjmp	.+14     	; 0x356e <TIM_Stop+0x12>
    3560:	83 b7       	in	r24, 0x33	; 51
    3562:	88 7f       	andi	r24, 0xF8	; 248
    3564:	83 bf       	out	0x33, r24	; 51
    3566:	83 b7       	in	r24, 0x33	; 51
    3568:	83 bf       	out	0x33, r24	; 51
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	08 95       	ret
    356e:	82 30       	cpi	r24, 0x02	; 2
    3570:	39 f4       	brne	.+14     	; 0x3580 <TIM_Stop+0x24>
    3572:	85 b5       	in	r24, 0x25	; 37
    3574:	88 7f       	andi	r24, 0xF8	; 248
    3576:	85 bd       	out	0x25, r24	; 37
    3578:	85 b5       	in	r24, 0x25	; 37
    357a:	85 bd       	out	0x25, r24	; 37
    357c:	80 e0       	ldi	r24, 0x00	; 0
    357e:	08 95       	ret
    3580:	81 30       	cpi	r24, 0x01	; 1
    3582:	39 f4       	brne	.+14     	; 0x3592 <TIM_Stop+0x36>
    3584:	8e b5       	in	r24, 0x2e	; 46
    3586:	88 7f       	andi	r24, 0xF8	; 248
    3588:	8e bd       	out	0x2e, r24	; 46
    358a:	8e b5       	in	r24, 0x2e	; 46
    358c:	8e bd       	out	0x2e, r24	; 46
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	08 95       	ret
    3592:	82 e0       	ldi	r24, 0x02	; 2
    3594:	08 95       	ret

00003596 <TIM_PWMModeInit>:
    3596:	fc 01       	movw	r30, r24
    3598:	89 2b       	or	r24, r25
    359a:	09 f4       	brne	.+2      	; 0x359e <TIM_PWMModeInit+0x8>
    359c:	98 c0       	rjmp	.+304    	; 0x36ce <TIM_PWMModeInit+0x138>
    359e:	80 85       	ldd	r24, Z+8	; 0x08
    35a0:	81 30       	cpi	r24, 0x01	; 1
    35a2:	09 f0       	breq	.+2      	; 0x35a6 <TIM_PWMModeInit+0x10>
    35a4:	6d c0       	rjmp	.+218    	; 0x3680 <TIM_PWMModeInit+0xea>
    35a6:	80 81       	ld	r24, Z
    35a8:	91 81       	ldd	r25, Z+1	; 0x01
    35aa:	a2 81       	ldd	r26, Z+2	; 0x02
    35ac:	b3 81       	ldd	r27, Z+3	; 0x03
    35ae:	94 ff       	sbrs	r25, 4
    35b0:	33 c0       	rjmp	.+102    	; 0x3618 <TIM_PWMModeInit+0x82>
    35b2:	aa 27       	eor	r26, r26
    35b4:	bb 27       	eor	r27, r27
    35b6:	8f 3f       	cpi	r24, 0xFF	; 255
    35b8:	20 e1       	ldi	r18, 0x10	; 16
    35ba:	92 07       	cpc	r25, r18
    35bc:	a1 05       	cpc	r26, r1
    35be:	b1 05       	cpc	r27, r1
    35c0:	29 f4       	brne	.+10     	; 0x35cc <TIM_PWMModeInit+0x36>
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	8f bd       	out	0x2f, r24	; 47
    35c6:	88 e0       	ldi	r24, 0x08	; 8
    35c8:	8e bd       	out	0x2e, r24	; 46
    35ca:	1f c0       	rjmp	.+62     	; 0x360a <TIM_PWMModeInit+0x74>
    35cc:	8f 3f       	cpi	r24, 0xFF	; 255
    35ce:	21 e1       	ldi	r18, 0x11	; 17
    35d0:	92 07       	cpc	r25, r18
    35d2:	a1 05       	cpc	r26, r1
    35d4:	b1 05       	cpc	r27, r1
    35d6:	29 f4       	brne	.+10     	; 0x35e2 <TIM_PWMModeInit+0x4c>
    35d8:	82 e0       	ldi	r24, 0x02	; 2
    35da:	8f bd       	out	0x2f, r24	; 47
    35dc:	88 e0       	ldi	r24, 0x08	; 8
    35de:	8e bd       	out	0x2e, r24	; 46
    35e0:	14 c0       	rjmp	.+40     	; 0x360a <TIM_PWMModeInit+0x74>
    35e2:	8f 3f       	cpi	r24, 0xFF	; 255
    35e4:	23 e1       	ldi	r18, 0x13	; 19
    35e6:	92 07       	cpc	r25, r18
    35e8:	a1 05       	cpc	r26, r1
    35ea:	b1 05       	cpc	r27, r1
    35ec:	29 f4       	brne	.+10     	; 0x35f8 <TIM_PWMModeInit+0x62>
    35ee:	83 e0       	ldi	r24, 0x03	; 3
    35f0:	8f bd       	out	0x2f, r24	; 47
    35f2:	88 e0       	ldi	r24, 0x08	; 8
    35f4:	8e bd       	out	0x2e, r24	; 46
    35f6:	09 c0       	rjmp	.+18     	; 0x360a <TIM_PWMModeInit+0x74>
    35f8:	8f 3f       	cpi	r24, 0xFF	; 255
    35fa:	9f 41       	sbci	r25, 0x1F	; 31
    35fc:	a1 05       	cpc	r26, r1
    35fe:	b1 05       	cpc	r27, r1
    3600:	21 f4       	brne	.+8      	; 0x360a <TIM_PWMModeInit+0x74>
    3602:	82 e0       	ldi	r24, 0x02	; 2
    3604:	8f bd       	out	0x2f, r24	; 47
    3606:	88 e1       	ldi	r24, 0x18	; 24
    3608:	8e bd       	out	0x2e, r24	; 46
    360a:	81 85       	ldd	r24, Z+9	; 0x09
    360c:	88 23       	and	r24, r24
    360e:	89 f0       	breq	.+34     	; 0x3632 <TIM_PWMModeInit+0x9c>
    3610:	99 b7       	in	r25, 0x39	; 57
    3612:	89 2b       	or	r24, r25
    3614:	89 bf       	out	0x39, r24	; 57
    3616:	0d c0       	rjmp	.+26     	; 0x3632 <TIM_PWMModeInit+0x9c>
    3618:	95 ff       	sbrs	r25, 5
    361a:	05 c0       	rjmp	.+10     	; 0x3626 <TIM_PWMModeInit+0x90>
    361c:	82 e0       	ldi	r24, 0x02	; 2
    361e:	8f bd       	out	0x2f, r24	; 47
    3620:	80 e1       	ldi	r24, 0x10	; 16
    3622:	8e bd       	out	0x2e, r24	; 46
    3624:	06 c0       	rjmp	.+12     	; 0x3632 <TIM_PWMModeInit+0x9c>
    3626:	96 ff       	sbrs	r25, 6
    3628:	04 c0       	rjmp	.+8      	; 0x3632 <TIM_PWMModeInit+0x9c>
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	8f bd       	out	0x2f, r24	; 47
    362e:	80 e1       	ldi	r24, 0x10	; 16
    3630:	8e bd       	out	0x2e, r24	; 46
    3632:	26 81       	ldd	r18, Z+6	; 0x06
    3634:	2f 3f       	cpi	r18, 0xFF	; 255
    3636:	c1 f4       	brne	.+48     	; 0x3668 <TIM_PWMModeInit+0xd2>
    3638:	2f b5       	in	r18, 0x2f	; 47
    363a:	94 81       	ldd	r25, Z+4	; 0x04
    363c:	89 2f       	mov	r24, r25
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	ac 01       	movw	r20, r24
    3642:	00 24       	eor	r0, r0
    3644:	56 95       	lsr	r21
    3646:	47 95       	ror	r20
    3648:	07 94       	ror	r0
    364a:	56 95       	lsr	r21
    364c:	47 95       	ror	r20
    364e:	07 94       	ror	r0
    3650:	54 2f       	mov	r21, r20
    3652:	40 2d       	mov	r20, r0
    3654:	82 95       	swap	r24
    3656:	92 95       	swap	r25
    3658:	90 7f       	andi	r25, 0xF0	; 240
    365a:	98 27       	eor	r25, r24
    365c:	80 7f       	andi	r24, 0xF0	; 240
    365e:	98 27       	eor	r25, r24
    3660:	84 2b       	or	r24, r20
    3662:	82 2b       	or	r24, r18
    3664:	8f bd       	out	0x2f, r24	; 47
    3666:	2b c0       	rjmp	.+86     	; 0x36be <TIM_PWMModeInit+0x128>
    3668:	3f b5       	in	r19, 0x2f	; 47
    366a:	94 81       	ldd	r25, Z+4	; 0x04
    366c:	89 2f       	mov	r24, r25
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	02 c0       	rjmp	.+4      	; 0x3676 <TIM_PWMModeInit+0xe0>
    3672:	88 0f       	add	r24, r24
    3674:	99 1f       	adc	r25, r25
    3676:	2a 95       	dec	r18
    3678:	e2 f7       	brpl	.-8      	; 0x3672 <TIM_PWMModeInit+0xdc>
    367a:	83 2b       	or	r24, r19
    367c:	8f bd       	out	0x2f, r24	; 47
    367e:	1f c0       	rjmp	.+62     	; 0x36be <TIM_PWMModeInit+0x128>
    3680:	88 23       	and	r24, r24
    3682:	11 f0       	breq	.+4      	; 0x3688 <TIM_PWMModeInit+0xf2>
    3684:	82 30       	cpi	r24, 0x02	; 2
    3686:	29 f5       	brne	.+74     	; 0x36d2 <TIM_PWMModeInit+0x13c>
    3688:	81 11       	cpse	r24, r1
    368a:	0c c0       	rjmp	.+24     	; 0x36a4 <TIM_PWMModeInit+0x10e>
    368c:	83 b7       	in	r24, 0x33	; 51
    368e:	87 78       	andi	r24, 0x87	; 135
    3690:	83 bf       	out	0x33, r24	; 51
    3692:	93 b7       	in	r25, 0x33	; 51
    3694:	24 81       	ldd	r18, Z+4	; 0x04
    3696:	82 81       	ldd	r24, Z+2	; 0x02
    3698:	82 2b       	or	r24, r18
    369a:	89 2b       	or	r24, r25
    369c:	83 bf       	out	0x33, r24	; 51
    369e:	85 81       	ldd	r24, Z+5	; 0x05
    36a0:	8c bf       	out	0x3c, r24	; 60
    36a2:	0d c0       	rjmp	.+26     	; 0x36be <TIM_PWMModeInit+0x128>
    36a4:	82 30       	cpi	r24, 0x02	; 2
    36a6:	59 f4       	brne	.+22     	; 0x36be <TIM_PWMModeInit+0x128>
    36a8:	85 b5       	in	r24, 0x25	; 37
    36aa:	87 78       	andi	r24, 0x87	; 135
    36ac:	85 bd       	out	0x25, r24	; 37
    36ae:	95 b5       	in	r25, 0x25	; 37
    36b0:	24 81       	ldd	r18, Z+4	; 0x04
    36b2:	82 81       	ldd	r24, Z+2	; 0x02
    36b4:	82 2b       	or	r24, r18
    36b6:	89 2b       	or	r24, r25
    36b8:	85 bd       	out	0x25, r24	; 37
    36ba:	85 81       	ldd	r24, Z+5	; 0x05
    36bc:	83 bd       	out	0x23, r24	; 35
    36be:	81 85       	ldd	r24, Z+9	; 0x09
    36c0:	88 23       	and	r24, r24
    36c2:	49 f0       	breq	.+18     	; 0x36d6 <TIM_PWMModeInit+0x140>
    36c4:	99 b7       	in	r25, 0x39	; 57
    36c6:	89 2b       	or	r24, r25
    36c8:	89 bf       	out	0x39, r24	; 57
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	08 95       	ret
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	08 95       	ret
    36d2:	82 e0       	ldi	r24, 0x02	; 2
    36d4:	08 95       	ret
    36d6:	80 e0       	ldi	r24, 0x00	; 0
    36d8:	08 95       	ret

000036da <TIM_CallBack_FuctionSet>:


  TIM_Status_t TIM_CallBack_FuctionSet(IT_SelBIT_t Interrupt_Num ,  TIMCaLL_BackFun  callbackfunction)
{
	
	if (callbackfunction == NULL)
    36da:	61 15       	cp	r22, r1
    36dc:	71 05       	cpc	r23, r1
    36de:	e1 f0       	breq	.+56     	; 0x3718 <TIM_CallBack_FuctionSet+0x3e>
	{
		return TIM_PARAM_ERROR ;
	}
	
	switch(Interrupt_Num)
    36e0:	88 30       	cpi	r24, 0x08	; 8
    36e2:	e1 f0       	breq	.+56     	; 0x371c <TIM_CallBack_FuctionSet+0x42>
    36e4:	38 f4       	brcc	.+14     	; 0x36f4 <TIM_CallBack_FuctionSet+0x1a>
    36e6:	82 30       	cpi	r24, 0x02	; 2
    36e8:	89 f0       	breq	.+34     	; 0x370c <TIM_CallBack_FuctionSet+0x32>
    36ea:	84 30       	cpi	r24, 0x04	; 4
    36ec:	b9 f0       	breq	.+46     	; 0x371c <TIM_CallBack_FuctionSet+0x42>
    36ee:	81 30       	cpi	r24, 0x01	; 1
    36f0:	59 f4       	brne	.+22     	; 0x3708 <TIM_CallBack_FuctionSet+0x2e>
    36f2:	14 c0       	rjmp	.+40     	; 0x371c <TIM_CallBack_FuctionSet+0x42>
    36f4:	80 32       	cpi	r24, 0x20	; 32
    36f6:	91 f0       	breq	.+36     	; 0x371c <TIM_CallBack_FuctionSet+0x42>
    36f8:	18 f4       	brcc	.+6      	; 0x3700 <TIM_CallBack_FuctionSet+0x26>
    36fa:	80 31       	cpi	r24, 0x10	; 16
    36fc:	79 f0       	breq	.+30     	; 0x371c <TIM_CallBack_FuctionSet+0x42>
    36fe:	04 c0       	rjmp	.+8      	; 0x3708 <TIM_CallBack_FuctionSet+0x2e>
    3700:	80 34       	cpi	r24, 0x40	; 64
    3702:	61 f0       	breq	.+24     	; 0x371c <TIM_CallBack_FuctionSet+0x42>
    3704:	80 38       	cpi	r24, 0x80	; 128
    3706:	51 f0       	breq	.+20     	; 0x371c <TIM_CallBack_FuctionSet+0x42>
		case  TIM_1_IT_COMPB :
						CompareB_callbackfunction = callbackfunction ;
		break; 
		default:
		
			return TIM_CONFIG_ERROR ;
    3708:	82 e0       	ldi	r24, 0x02	; 2
    370a:	08 95       	ret
	}
	
	switch(Interrupt_Num)
	{
		case TIM_0_IT_COMP :
				COMPMatch0_Fun = callbackfunction ;
    370c:	70 93 d4 01 	sts	0x01D4, r23	; 0x8001d4 <COMPMatch0_Fun+0x1>
    3710:	60 93 d3 01 	sts	0x01D3, r22	; 0x8001d3 <COMPMatch0_Fun>
	}
	
	


	return TIM_OK ; 
    3714:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(Interrupt_Num)
	{
		case TIM_0_IT_COMP :
				COMPMatch0_Fun = callbackfunction ;
		break ;
    3716:	08 95       	ret
  TIM_Status_t TIM_CallBack_FuctionSet(IT_SelBIT_t Interrupt_Num ,  TIMCaLL_BackFun  callbackfunction)
{
	
	if (callbackfunction == NULL)
	{
		return TIM_PARAM_ERROR ;
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	08 95       	ret
	}
	
	


	return TIM_OK ; 
    371c:	80 e0       	ldi	r24, 0x00	; 0
	
}
    371e:	08 95       	ret

00003720 <__vector_10>:




ISR(TIMER0_COMP_vect)
{
    3720:	1f 92       	push	r1
    3722:	0f 92       	push	r0
    3724:	0f b6       	in	r0, 0x3f	; 63
    3726:	0f 92       	push	r0
    3728:	11 24       	eor	r1, r1
    372a:	2f 93       	push	r18
    372c:	3f 93       	push	r19
    372e:	4f 93       	push	r20
    3730:	5f 93       	push	r21
    3732:	6f 93       	push	r22
    3734:	7f 93       	push	r23
    3736:	8f 93       	push	r24
    3738:	9f 93       	push	r25
    373a:	af 93       	push	r26
    373c:	bf 93       	push	r27
    373e:	ef 93       	push	r30
    3740:	ff 93       	push	r31
	
	COMPMatch0_Fun();
    3742:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <COMPMatch0_Fun>
    3746:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <COMPMatch0_Fun+0x1>
    374a:	09 95       	icall
	
	
    374c:	ff 91       	pop	r31
    374e:	ef 91       	pop	r30
    3750:	bf 91       	pop	r27
    3752:	af 91       	pop	r26
    3754:	9f 91       	pop	r25
    3756:	8f 91       	pop	r24
    3758:	7f 91       	pop	r23
    375a:	6f 91       	pop	r22
    375c:	5f 91       	pop	r21
    375e:	4f 91       	pop	r20
    3760:	3f 91       	pop	r19
    3762:	2f 91       	pop	r18
    3764:	0f 90       	pop	r0
    3766:	0f be       	out	0x3f, r0	; 63
    3768:	0f 90       	pop	r0
    376a:	1f 90       	pop	r1
    376c:	18 95       	reti

0000376e <HAL_UART_Init>:
 * brief : this function used to initialization  UART peripheral 
 * param : Handler pointer to the struct hold UART configuration 
 * return : void 
 */
void HAL_UART_Init(UART_Handler_t * Handler )
{
    376e:	fc 01       	movw	r30, r24
	uint16_t BaudRateCal =0 ;
	
	UCSRB = 0x00 ;
    3770:	1a b8       	out	0x0a, r1	; 10
	UCSRC = (1 << URSEL) | 0x00 ;    /* clear UCSRC register to set a new configurations */
    3772:	80 e8       	ldi	r24, 0x80	; 128
    3774:	80 bd       	out	0x20, r24	; 32
	UCSRB |= Handler->Init.Mode ;   /* enable uart in tx or rx or both */
    3776:	9a b1       	in	r25, 0x0a	; 10
    3778:	87 81       	ldd	r24, Z+7	; 0x07
    377a:	89 2b       	or	r24, r25
    377c:	8a b9       	out	0x0a, r24	; 10

	/* set the word size and parity and stop bits */
	UCSRC  |= (1 << URSEL) |((Handler->Init.wordLen) & (0x06)) | (Handler->Init.StopBits);
    377e:	20 b5       	in	r18, 0x20	; 32
    3780:	94 81       	ldd	r25, Z+4	; 0x04
    3782:	85 81       	ldd	r24, Z+5	; 0x05
    3784:	96 70       	andi	r25, 0x06	; 6
    3786:	98 2b       	or	r25, r24
    3788:	92 2b       	or	r25, r18
    378a:	90 68       	ori	r25, 0x80	; 128
    378c:	90 bd       	out	0x20, r25	; 32

	

	/* now set the baud rate */
	BaudRateCal = (F_CPU/(16ul *Handler->Init.BaudRate))-1;
    378e:	80 81       	ld	r24, Z
    3790:	91 81       	ldd	r25, Z+1	; 0x01
    3792:	a2 81       	ldd	r26, Z+2	; 0x02
    3794:	b3 81       	ldd	r27, Z+3	; 0x03
    3796:	88 0f       	add	r24, r24
    3798:	99 1f       	adc	r25, r25
    379a:	aa 1f       	adc	r26, r26
    379c:	bb 1f       	adc	r27, r27
    379e:	88 0f       	add	r24, r24
    37a0:	99 1f       	adc	r25, r25
    37a2:	aa 1f       	adc	r26, r26
    37a4:	bb 1f       	adc	r27, r27
    37a6:	9c 01       	movw	r18, r24
    37a8:	ad 01       	movw	r20, r26
    37aa:	22 0f       	add	r18, r18
    37ac:	33 1f       	adc	r19, r19
    37ae:	44 1f       	adc	r20, r20
    37b0:	55 1f       	adc	r21, r21
    37b2:	22 0f       	add	r18, r18
    37b4:	33 1f       	adc	r19, r19
    37b6:	44 1f       	adc	r20, r20
    37b8:	55 1f       	adc	r21, r21
    37ba:	60 e0       	ldi	r22, 0x00	; 0
    37bc:	74 e2       	ldi	r23, 0x24	; 36
    37be:	84 ef       	ldi	r24, 0xF4	; 244
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <__udivmodsi4>
    37c6:	21 50       	subi	r18, 0x01	; 1
    37c8:	31 09       	sbc	r19, r1
	UBRRL = BaudRateCal ;
    37ca:	29 b9       	out	0x09, r18	; 9
	UBRRH =(BaudRateCal>>8)&(0x0f);
    37cc:	83 2f       	mov	r24, r19
    37ce:	8f 70       	andi	r24, 0x0F	; 15
    37d0:	80 bd       	out	0x20, r24	; 32

	
	DDRD  |= 0x02 ;
    37d2:	81 b3       	in	r24, 0x11	; 17
    37d4:	82 60       	ori	r24, 0x02	; 2
    37d6:	81 bb       	out	0x11, r24	; 17
	DDRD  &= ~(1<<0);
    37d8:	81 b3       	in	r24, 0x11	; 17
    37da:	8e 7f       	andi	r24, 0xFE	; 254
    37dc:	81 bb       	out	0x11, r24	; 17
    37de:	08 95       	ret

000037e0 <HAL_UART_TRANSMIT>:
 * param : TxBuffer pointer to the transmitted buffer 
 * param : Size hold the size of transmitted data 
 * return : void 
 */
void HAL_UART_TRANSMIT(UART_Handler_t * Handler ,uint8_t * TxBuffer ,uint16_t Size )
{
    37e0:	fc 01       	movw	r30, r24
	Handler->TxBuffer = TxBuffer ;
    37e2:	71 87       	std	Z+9, r23	; 0x09
    37e4:	60 87       	std	Z+8, r22	; 0x08
	Handler->TxSize = Size ;
    37e6:	55 87       	std	Z+13, r21	; 0x0d
    37e8:	44 87       	std	Z+12, r20	; 0x0c
	
	for (uint16_t iterator =0 ;iterator<Handler->TxSize;iterator++)
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	0f c0       	rjmp	.+30     	; 0x380e <HAL_UART_TRANSMIT+0x2e>
	{
	   while(!(UCSRA &(1<<UDRE)));
    37f0:	5d 9b       	sbis	0x0b, 5	; 11
    37f2:	fe cf       	rjmp	.-4      	; 0x37f0 <HAL_UART_TRANSMIT+0x10>
	   	if(Handler->Init.wordLen == UART_WordLen_9)
    37f4:	84 81       	ldd	r24, Z+4	; 0x04
    37f6:	86 31       	cpi	r24, 0x16	; 22
    37f8:	19 f4       	brne	.+6      	; 0x3800 <HAL_UART_TRANSMIT+0x20>
		   {
			  UCSRB |=((0x100)&(Handler->TxBuffer[iterator]))>>8|0x01; 
    37fa:	8a b1       	in	r24, 0x0a	; 10
    37fc:	81 60       	ori	r24, 0x01	; 1
    37fe:	8a b9       	out	0x0a, r24	; 10
		   }
			UDR =(TxBuffer[iterator]);
    3800:	db 01       	movw	r26, r22
    3802:	a2 0f       	add	r26, r18
    3804:	b3 1f       	adc	r27, r19
    3806:	8c 91       	ld	r24, X
    3808:	8c b9       	out	0x0c, r24	; 12
void HAL_UART_TRANSMIT(UART_Handler_t * Handler ,uint8_t * TxBuffer ,uint16_t Size )
{
	Handler->TxBuffer = TxBuffer ;
	Handler->TxSize = Size ;
	
	for (uint16_t iterator =0 ;iterator<Handler->TxSize;iterator++)
    380a:	2f 5f       	subi	r18, 0xFF	; 255
    380c:	3f 4f       	sbci	r19, 0xFF	; 255
    380e:	84 85       	ldd	r24, Z+12	; 0x0c
    3810:	95 85       	ldd	r25, Z+13	; 0x0d
    3812:	28 17       	cp	r18, r24
    3814:	39 07       	cpc	r19, r25
    3816:	60 f3       	brcs	.-40     	; 0x37f0 <HAL_UART_TRANSMIT+0x10>

	}
	
	
	
}/* END_FUN HAL_UART_TRANSMIT() */
    3818:	08 95       	ret

0000381a <HAL_UART_RECEIVE>:
 * param : Size hold the size of transmitted data 
 * return : void 
 */

void HAL_UART_RECEIVE(UART_Handler_t * Handler ,uint8_t * RxBuffer ,uint16_t Size )
{
    381a:	cf 93       	push	r28
    381c:	df 93       	push	r29
    381e:	fc 01       	movw	r30, r24
	
	Handler->TxBuffer = NULL;
    3820:	11 86       	std	Z+9, r1	; 0x09
    3822:	10 86       	std	Z+8, r1	; 0x08
	Handler->TxSize =0 ;
    3824:	15 86       	std	Z+13, r1	; 0x0d
    3826:	14 86       	std	Z+12, r1	; 0x0c
	Handler->RxBuffer = RxBuffer ;
    3828:	73 87       	std	Z+11, r23	; 0x0b
    382a:	62 87       	std	Z+10, r22	; 0x0a
	Handler->RxSize = Size ;
    382c:	57 87       	std	Z+15, r21	; 0x0f
    382e:	46 87       	std	Z+14, r20	; 0x0e
	uint8_t TempData = 0 ;
	
	for (uint16_t iterator =0 ; ;iterator++)
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
	{
		while(!(UCSRA & (1<<RXC)));
    3834:	5f 9b       	sbis	0x0b, 7	; 11
    3836:	fe cf       	rjmp	.-4      	; 0x3834 <HAL_UART_RECEIVE+0x1a>
		TempData = UDR ;
    3838:	9c b1       	in	r25, 0x0c	; 12

			if (iterator <= Handler->RxSize)
    383a:	66 85       	ldd	r22, Z+14	; 0x0e
    383c:	77 85       	ldd	r23, Z+15	; 0x0f
    383e:	62 17       	cp	r22, r18
    3840:	73 07       	cpc	r23, r19
    3842:	08 f4       	brcc	.+2      	; 0x3846 <HAL_UART_RECEIVE+0x2c>
    3844:	55 c0       	rjmp	.+170    	; 0x38f0 <HAL_UART_RECEIVE+0xd6>
			{
				if(Handler->Init.wordLen == UART_WordLen_9)
    3846:	84 81       	ldd	r24, Z+4	; 0x04
    3848:	86 31       	cpi	r24, 0x16	; 22
    384a:	b1 f5       	brne	.+108    	; 0x38b8 <HAL_UART_RECEIVE+0x9e>
				{
					*(((uint16_t *)Handler->RxBuffer)+iterator)  = (((uint16_t)UCSRB & 0x02)<<7) ;     // the ninth bit must be read first 
    384c:	a2 85       	ldd	r26, Z+10	; 0x0a
    384e:	b3 85       	ldd	r27, Z+11	; 0x0b
    3850:	e9 01       	movw	r28, r18
    3852:	cc 0f       	add	r28, r28
    3854:	dd 1f       	adc	r29, r29
    3856:	ac 0f       	add	r26, r28
    3858:	bd 1f       	adc	r27, r29
    385a:	6a b1       	in	r22, 0x0a	; 10
    385c:	62 70       	andi	r22, 0x02	; 2
    385e:	70 e0       	ldi	r23, 0x00	; 0
    3860:	76 95       	lsr	r23
    3862:	76 2f       	mov	r23, r22
    3864:	66 27       	eor	r22, r22
    3866:	77 95       	ror	r23
    3868:	67 95       	ror	r22
    386a:	6d 93       	st	X+, r22
    386c:	7c 93       	st	X, r23
					*(((uint16_t *)Handler->RxBuffer)+iterator) |= TempData ;
    386e:	a2 85       	ldd	r26, Z+10	; 0x0a
    3870:	b3 85       	ldd	r27, Z+11	; 0x0b
    3872:	ac 0f       	add	r26, r28
    3874:	bd 1f       	adc	r27, r29
    3876:	6d 91       	ld	r22, X+
    3878:	7c 91       	ld	r23, X
    387a:	11 97       	sbiw	r26, 0x01	; 1
    387c:	69 2b       	or	r22, r25
    387e:	6d 93       	st	X+, r22
    3880:	7c 93       	st	X, r23
					if((TempData == '\r')||(TempData == '\n'))
    3882:	9d 30       	cpi	r25, 0x0D	; 13
    3884:	19 f0       	breq	.+6      	; 0x388c <HAL_UART_RECEIVE+0x72>
    3886:	9a 30       	cpi	r25, 0x0A	; 10
    3888:	09 f0       	breq	.+2      	; 0x388c <HAL_UART_RECEIVE+0x72>
    388a:	47 c0       	rjmp	.+142    	; 0x391a <HAL_UART_RECEIVE+0x100>
					{
						if(iterator < Handler->RxSize )
    388c:	86 85       	ldd	r24, Z+14	; 0x0e
    388e:	97 85       	ldd	r25, Z+15	; 0x0f
    3890:	28 17       	cp	r18, r24
    3892:	39 07       	cpc	r19, r25
    3894:	38 f4       	brcc	.+14     	; 0x38a4 <HAL_UART_RECEIVE+0x8a>
						*(((uint16_t *)Handler->RxBuffer)+iterator) = '\0' ;
    3896:	82 85       	ldd	r24, Z+10	; 0x0a
    3898:	93 85       	ldd	r25, Z+11	; 0x0b
    389a:	c8 0f       	add	r28, r24
    389c:	d9 1f       	adc	r29, r25
    389e:	19 82       	std	Y+1, r1	; 0x01
    38a0:	18 82       	st	Y, r1
    38a2:	3e c0       	rjmp	.+124    	; 0x3920 <HAL_UART_RECEIVE+0x106>
						else
						*(((uint16_t *)Handler->RxBuffer)+Size) = '\0' ;
    38a4:	02 84       	ldd	r0, Z+10	; 0x0a
    38a6:	f3 85       	ldd	r31, Z+11	; 0x0b
    38a8:	e0 2d       	mov	r30, r0
    38aa:	44 0f       	add	r20, r20
    38ac:	55 1f       	adc	r21, r21
    38ae:	e4 0f       	add	r30, r20
    38b0:	f5 1f       	adc	r31, r21
    38b2:	11 82       	std	Z+1, r1	; 0x01
    38b4:	10 82       	st	Z, r1
    38b6:	34 c0       	rjmp	.+104    	; 0x3920 <HAL_UART_RECEIVE+0x106>
						
						break ;
					}
				}else{
					Handler->RxBuffer[iterator] = TempData ;
    38b8:	a2 85       	ldd	r26, Z+10	; 0x0a
    38ba:	b3 85       	ldd	r27, Z+11	; 0x0b
    38bc:	a2 0f       	add	r26, r18
    38be:	b3 1f       	adc	r27, r19
    38c0:	9c 93       	st	X, r25
					if((TempData == '\r')||(TempData == '\n'))
    38c2:	9d 30       	cpi	r25, 0x0D	; 13
    38c4:	11 f0       	breq	.+4      	; 0x38ca <HAL_UART_RECEIVE+0xb0>
    38c6:	9a 30       	cpi	r25, 0x0A	; 10
    38c8:	41 f5       	brne	.+80     	; 0x391a <HAL_UART_RECEIVE+0x100>
					{
						if(iterator < Handler->RxSize )
    38ca:	86 85       	ldd	r24, Z+14	; 0x0e
    38cc:	97 85       	ldd	r25, Z+15	; 0x0f
    38ce:	28 17       	cp	r18, r24
    38d0:	39 07       	cpc	r19, r25
    38d2:	38 f4       	brcc	.+14     	; 0x38e2 <HAL_UART_RECEIVE+0xc8>
						Handler->RxBuffer[iterator] = '\0' ;
    38d4:	82 85       	ldd	r24, Z+10	; 0x0a
    38d6:	93 85       	ldd	r25, Z+11	; 0x0b
    38d8:	fc 01       	movw	r30, r24
    38da:	e2 0f       	add	r30, r18
    38dc:	f3 1f       	adc	r31, r19
    38de:	10 82       	st	Z, r1
    38e0:	1f c0       	rjmp	.+62     	; 0x3920 <HAL_UART_RECEIVE+0x106>
						else
						Handler->RxBuffer[Size] = '\0' ;
    38e2:	82 85       	ldd	r24, Z+10	; 0x0a
    38e4:	93 85       	ldd	r25, Z+11	; 0x0b
    38e6:	fc 01       	movw	r30, r24
    38e8:	e4 0f       	add	r30, r20
    38ea:	f5 1f       	adc	r31, r21
    38ec:	10 82       	st	Z, r1
    38ee:	18 c0       	rjmp	.+48     	; 0x3920 <HAL_UART_RECEIVE+0x106>
						break;
					}
				}
			}else{
				
					if((TempData == '\r')||(TempData == '\n'))
    38f0:	9d 30       	cpi	r25, 0x0D	; 13
    38f2:	11 f0       	breq	.+4      	; 0x38f8 <HAL_UART_RECEIVE+0xde>
    38f4:	9a 30       	cpi	r25, 0x0A	; 10
    38f6:	89 f4       	brne	.+34     	; 0x391a <HAL_UART_RECEIVE+0x100>
					{
						if(iterator < Handler->RxSize )
    38f8:	26 17       	cp	r18, r22
    38fa:	37 07       	cpc	r19, r23
    38fc:	38 f4       	brcc	.+14     	; 0x390c <HAL_UART_RECEIVE+0xf2>
						Handler->RxBuffer[iterator] = '\0' ;
    38fe:	82 85       	ldd	r24, Z+10	; 0x0a
    3900:	93 85       	ldd	r25, Z+11	; 0x0b
    3902:	fc 01       	movw	r30, r24
    3904:	e2 0f       	add	r30, r18
    3906:	f3 1f       	adc	r31, r19
    3908:	10 82       	st	Z, r1
    390a:	0a c0       	rjmp	.+20     	; 0x3920 <HAL_UART_RECEIVE+0x106>
						else
						Handler->RxBuffer[Size] = '\0' ;
    390c:	82 85       	ldd	r24, Z+10	; 0x0a
    390e:	93 85       	ldd	r25, Z+11	; 0x0b
    3910:	fc 01       	movw	r30, r24
    3912:	e4 0f       	add	r30, r20
    3914:	f5 1f       	adc	r31, r21
    3916:	10 82       	st	Z, r1
    3918:	03 c0       	rjmp	.+6      	; 0x3920 <HAL_UART_RECEIVE+0x106>
	Handler->TxSize =0 ;
	Handler->RxBuffer = RxBuffer ;
	Handler->RxSize = Size ;
	uint8_t TempData = 0 ;
	
	for (uint16_t iterator =0 ; ;iterator++)
    391a:	2f 5f       	subi	r18, 0xFF	; 255
    391c:	3f 4f       	sbci	r19, 0xFF	; 255
						Handler->RxBuffer[Size] = '\0' ;
										
						break;
					}
				}
		}
    391e:	8a cf       	rjmp	.-236    	; 0x3834 <HAL_UART_RECEIVE+0x1a>
	
	
}/* END_FUN HAL_UART_RECEIVE() */
    3920:	df 91       	pop	r29
    3922:	cf 91       	pop	r28
    3924:	08 95       	ret

00003926 <PWM_Toggle_Timer2>:
	


return UTIL_OK ;

}
    3926:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <Duty_TIM2>
    392a:	81 11       	cpse	r24, r1
    392c:	0a c0       	rjmp	.+20     	; 0x3942 <PWM_Toggle_Timer2+0x1c>
    392e:	40 e0       	ldi	r20, 0x00	; 0
    3930:	60 91 e2 01 	lds	r22, 0x01E2	; 0x8001e2 <PWMTim2_PIN>
    3934:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <PWMTim2_PORT>
    3938:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <PWMTim2_PORT+0x1>
    393c:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
    3940:	08 95       	ret
    3942:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <ON.2006>
    3946:	81 11       	cpse	r24, r1
    3948:	10 c0       	rjmp	.+32     	; 0x396a <PWM_Toggle_Timer2+0x44>
    394a:	40 e0       	ldi	r20, 0x00	; 0
    394c:	60 91 e2 01 	lds	r22, 0x01E2	; 0x8001e2 <PWMTim2_PIN>
    3950:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <PWMTim2_PORT>
    3954:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <PWMTim2_PORT+0x1>
    3958:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
    395c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <Duty_TIM2>
    3960:	83 bd       	out	0x23, r24	; 35
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <ON.2006>
    3968:	08 95       	ret
    396a:	41 e0       	ldi	r20, 0x01	; 1
    396c:	60 91 e2 01 	lds	r22, 0x01E2	; 0x8001e2 <PWMTim2_PIN>
    3970:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <PWMTim2_PORT>
    3974:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <PWMTim2_PORT+0x1>
    3978:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
    397c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <Duty_TIM2>
    3980:	81 95       	neg	r24
    3982:	83 bd       	out	0x23, r24	; 35
    3984:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <ON.2006>
    3988:	08 95       	ret

0000398a <PWM_Toggle_Timer1>:
    398a:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <Duty_TIM1>
    398e:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <Duty_TIM1+0x1>
    3992:	89 2b       	or	r24, r25
    3994:	61 f1       	breq	.+88     	; 0x39ee <PWM_Toggle_Timer1+0x64>
    3996:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <ON.2010>
    399a:	81 11       	cpse	r24, r1
    399c:	13 c0       	rjmp	.+38     	; 0x39c4 <PWM_Toggle_Timer1+0x3a>
    399e:	40 e0       	ldi	r20, 0x00	; 0
    39a0:	60 91 e5 01 	lds	r22, 0x01E5	; 0x8001e5 <PWMTim1_PIN>
    39a4:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <PWMTim1_PORT>
    39a8:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <PWMTim1_PORT+0x1>
    39ac:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
    39b0:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <Duty_TIM1>
    39b4:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <Duty_TIM1+0x1>
    39b8:	9b bd       	out	0x2b, r25	; 43
    39ba:	8a bd       	out	0x2a, r24	; 42
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <ON.2010>
    39c2:	08 95       	ret
    39c4:	41 e0       	ldi	r20, 0x01	; 1
    39c6:	60 91 e5 01 	lds	r22, 0x01E5	; 0x8001e5 <PWMTim1_PIN>
    39ca:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <PWMTim1_PORT>
    39ce:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <PWMTim1_PORT+0x1>
    39d2:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
    39d6:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <Duty_TIM1>
    39da:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <Duty_TIM1+0x1>
    39de:	8f ef       	ldi	r24, 0xFF	; 255
    39e0:	9f e0       	ldi	r25, 0x0F	; 15
    39e2:	82 1b       	sub	r24, r18
    39e4:	93 0b       	sbc	r25, r19
    39e6:	9b bd       	out	0x2b, r25	; 43
    39e8:	8a bd       	out	0x2a, r24	; 42
    39ea:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <ON.2010>
    39ee:	08 95       	ret

000039f0 <PWM_Toggle_Timer0>:
    39f0:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <Duty_TIM0>
    39f4:	81 11       	cpse	r24, r1
    39f6:	0a c0       	rjmp	.+20     	; 0x3a0c <PWM_Toggle_Timer0+0x1c>
    39f8:	40 e0       	ldi	r20, 0x00	; 0
    39fa:	60 91 e8 01 	lds	r22, 0x01E8	; 0x8001e8 <PWMTim0_PIN>
    39fe:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <PWMTim0_PORT>
    3a02:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <PWMTim0_PORT+0x1>
    3a06:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
    3a0a:	08 95       	ret
    3a0c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <ON.2002>
    3a10:	81 11       	cpse	r24, r1
    3a12:	10 c0       	rjmp	.+32     	; 0x3a34 <PWM_Toggle_Timer0+0x44>
    3a14:	40 e0       	ldi	r20, 0x00	; 0
    3a16:	60 91 e8 01 	lds	r22, 0x01E8	; 0x8001e8 <PWMTim0_PIN>
    3a1a:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <PWMTim0_PORT>
    3a1e:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <PWMTim0_PORT+0x1>
    3a22:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
    3a26:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <Duty_TIM0>
    3a2a:	8c bf       	out	0x3c, r24	; 60
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <ON.2002>
    3a32:	08 95       	ret
    3a34:	41 e0       	ldi	r20, 0x01	; 1
    3a36:	60 91 e8 01 	lds	r22, 0x01E8	; 0x8001e8 <PWMTim0_PIN>
    3a3a:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <PWMTim0_PORT>
    3a3e:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <PWMTim0_PORT+0x1>
    3a42:	0e 94 55 18 	call	0x30aa	; 0x30aa <HAL_GPIO_WRITEPIN>
    3a46:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <Duty_TIM0>
    3a4a:	81 95       	neg	r24
    3a4c:	8c bf       	out	0x3c, r24	; 60
    3a4e:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <ON.2002>
    3a52:	08 95       	ret

00003a54 <Software_PWM_Init>:
 * Param (input) : PIN_Num Pin number in selected port 
 * Param (input) : Tim_PWM_Handler {Pointer to timer configuration register 
 * Return : Utilies_Status_t typedef to Status 
 */
Utilies_Status_t Software_PWM_Init( StrGPIO_t PORT , uint8_t PIN_Num ,TIMInit_t * Tim_PWM_Handler )
{
    3a54:	ff 92       	push	r15
    3a56:	0f 93       	push	r16
    3a58:	1f 93       	push	r17
    3a5a:	cf 93       	push	r28
    3a5c:	df 93       	push	r29
	
	if(Tim_PWM_Handler == NULL)
    3a5e:	41 15       	cp	r20, r1
    3a60:	51 05       	cpc	r21, r1
    3a62:	09 f4       	brne	.+2      	; 0x3a66 <Software_PWM_Init+0x12>
    3a64:	5e c0       	rjmp	.+188    	; 0x3b22 <Software_PWM_Init+0xce>
    3a66:	ea 01       	movw	r28, r20
    3a68:	f6 2e       	mov	r15, r22
    3a6a:	8c 01       	movw	r16, r24

	
	
	
	#if SOFTWARE_PWM_CTC_MODE
	Tim_PWM_Handler->TIMMode = TIM_MODE_CTC ;
    3a6c:	8f ef       	ldi	r24, 0xFF	; 255
    3a6e:	9f e0       	ldi	r25, 0x0F	; 15
    3a70:	a8 e0       	ldi	r26, 0x08	; 8
    3a72:	b0 e0       	ldi	r27, 0x00	; 0
    3a74:	88 83       	st	Y, r24
    3a76:	99 83       	std	Y+1, r25	; 0x01
    3a78:	aa 83       	std	Y+2, r26	; 0x02
    3a7a:	bb 83       	std	Y+3, r27	; 0x03
		Tim_PWM_Handler->TIMMode = TIM_MODE_CTC ;
	}else
	{
		;
	}
	TIM_PWMModeInit(Tim_PWM_Handler) ;
    3a7c:	ca 01       	movw	r24, r20
    3a7e:	0e 94 cb 1a 	call	0x3596	; 0x3596 <TIM_PWMModeInit>
	
	if (Tim_PWM_Handler->Instance  == TIM0)
    3a82:	98 85       	ldd	r25, Y+8	; 0x08
    3a84:	91 11       	cpse	r25, r1
    3a86:	1a c0       	rjmp	.+52     	; 0x3abc <Software_PWM_Init+0x68>
	{
		PWMTim0_PIN.mode = GPIO_MODE_OUTPUT ;
    3a88:	e8 ee       	ldi	r30, 0xE8	; 232
    3a8a:	f1 e0       	ldi	r31, 0x01	; 1
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
    3a8e:	81 83       	std	Z+1, r24	; 0x01
		PWMTim0_PIN.pin = PIN_Num ;
    3a90:	f0 82       	st	Z, r15
		PWMTim0_PIN.pull = GPIO_NOPULL ;
    3a92:	12 82       	std	Z+2, r1	; 0x02
		HAL_GPIO_Pin_Init( PORT , &PWMTim0_PIN );
    3a94:	bf 01       	movw	r22, r30
    3a96:	c8 01       	movw	r24, r16
    3a98:	0e 94 3a 18 	call	0x3074	; 0x3074 <HAL_GPIO_Pin_Init>
		
		PWMTim0_PORT = PORT ;
    3a9c:	10 93 e1 01 	sts	0x01E1, r17	; 0x8001e1 <PWMTim0_PORT+0x1>
    3aa0:	00 93 e0 01 	sts	0x01E0, r16	; 0x8001e0 <PWMTim0_PORT>
		#if !SOFTWARE_PWM_CTC_MODE
		_TIM_IT_EN(TIM_0_IT_OVER);
		#endif
		TIM_CallBack_FuctionSet(TIM_0_IT_OVER , PWM_Toggle_Timer0); 
    3aa4:	68 ef       	ldi	r22, 0xF8	; 248
    3aa6:	7c e1       	ldi	r23, 0x1C	; 28
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
    3aaa:	0e 94 6d 1b 	call	0x36da	; 0x36da <TIM_CallBack_FuctionSet>
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer0);
    3aae:	68 ef       	ldi	r22, 0xF8	; 248
    3ab0:	7c e1       	ldi	r23, 0x1C	; 28
    3ab2:	89 85       	ldd	r24, Y+9	; 0x09
    3ab4:	0e 94 6d 1b 	call	0x36da	; 0x36da <TIM_CallBack_FuctionSet>
	}
	
		
	
	
	return  UTIL_OK ; 
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	36 c0       	rjmp	.+108    	; 0x3b28 <Software_PWM_Init+0xd4>
		_TIM_IT_EN(TIM_0_IT_OVER);
		#endif
		TIM_CallBack_FuctionSet(TIM_0_IT_OVER , PWM_Toggle_Timer0); 
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer0);

	}else if (Tim_PWM_Handler->Instance == TIM1)
    3abc:	91 30       	cpi	r25, 0x01	; 1
    3abe:	a9 f4       	brne	.+42     	; 0x3aea <Software_PWM_Init+0x96>
	{	
		PWMTim1_PIN.mode = GPIO_MODE_OUTPUT ;
    3ac0:	e5 ee       	ldi	r30, 0xE5	; 229
    3ac2:	f1 e0       	ldi	r31, 0x01	; 1
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	81 83       	std	Z+1, r24	; 0x01
		PWMTim1_PIN.pin = PIN_Num ;
    3ac8:	f0 82       	st	Z, r15
		PWMTim1_PIN.pull = GPIO_NOPULL ;
    3aca:	12 82       	std	Z+2, r1	; 0x02
		HAL_GPIO_Pin_Init( PORT , &PWMTim1_PIN );
    3acc:	bf 01       	movw	r22, r30
    3ace:	c8 01       	movw	r24, r16
    3ad0:	0e 94 3a 18 	call	0x3074	; 0x3074 <HAL_GPIO_Pin_Init>
		PWMTim1_PORT = PORT ;
    3ad4:	10 93 df 01 	sts	0x01DF, r17	; 0x8001df <PWMTim1_PORT+0x1>
    3ad8:	00 93 de 01 	sts	0x01DE, r16	; 0x8001de <PWMTim1_PORT>
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer1);
    3adc:	65 ec       	ldi	r22, 0xC5	; 197
    3ade:	7c e1       	ldi	r23, 0x1C	; 28
    3ae0:	89 85       	ldd	r24, Y+9	; 0x09
    3ae2:	0e 94 6d 1b 	call	0x36da	; 0x36da <TIM_CallBack_FuctionSet>
	}
	
		
	
	
	return  UTIL_OK ; 
    3ae6:	80 e0       	ldi	r24, 0x00	; 0
    3ae8:	1f c0       	rjmp	.+62     	; 0x3b28 <Software_PWM_Init+0xd4>
		PWMTim1_PIN.pin = PIN_Num ;
		PWMTim1_PIN.pull = GPIO_NOPULL ;
		HAL_GPIO_Pin_Init( PORT , &PWMTim1_PIN );
		PWMTim1_PORT = PORT ;
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer1);
	}else if(Tim_PWM_Handler->Instance == TIM2)
    3aea:	92 30       	cpi	r25, 0x02	; 2
    3aec:	e1 f4       	brne	.+56     	; 0x3b26 <Software_PWM_Init+0xd2>
	{	
		PWMTim2_PIN.mode = GPIO_MODE_OUTPUT ;
    3aee:	e2 ee       	ldi	r30, 0xE2	; 226
    3af0:	f1 e0       	ldi	r31, 0x01	; 1
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	81 83       	std	Z+1, r24	; 0x01
		PWMTim2_PIN.pin = PIN_Num ;
    3af6:	f0 82       	st	Z, r15
		PWMTim2_PIN.pull = GPIO_NOPULL ;
    3af8:	12 82       	std	Z+2, r1	; 0x02
		HAL_GPIO_Pin_Init( PORT , &PWMTim2_PIN );	
    3afa:	bf 01       	movw	r22, r30
    3afc:	c8 01       	movw	r24, r16
    3afe:	0e 94 3a 18 	call	0x3074	; 0x3074 <HAL_GPIO_Pin_Init>
		PWMTim2_PORT = PORT ;
    3b02:	10 93 dd 01 	sts	0x01DD, r17	; 0x8001dd <PWMTim2_PORT+0x1>
    3b06:	00 93 dc 01 	sts	0x01DC, r16	; 0x8001dc <PWMTim2_PORT>
		#if !SOFTWARE_PWM_CTC_MODE
		_TIM_IT_EN(TIM_2_IT_OVER);
		#endif
		TIM_CallBack_FuctionSet(TIM_2_IT_OVER , PWM_Toggle_Timer2);
    3b0a:	63 e9       	ldi	r22, 0x93	; 147
    3b0c:	7c e1       	ldi	r23, 0x1C	; 28
    3b0e:	80 e4       	ldi	r24, 0x40	; 64
    3b10:	0e 94 6d 1b 	call	0x36da	; 0x36da <TIM_CallBack_FuctionSet>
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer2);
    3b14:	63 e9       	ldi	r22, 0x93	; 147
    3b16:	7c e1       	ldi	r23, 0x1C	; 28
    3b18:	89 85       	ldd	r24, Y+9	; 0x09
    3b1a:	0e 94 6d 1b 	call	0x36da	; 0x36da <TIM_CallBack_FuctionSet>
	}
	
		
	
	
	return  UTIL_OK ; 
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	03 c0       	rjmp	.+6      	; 0x3b28 <Software_PWM_Init+0xd4>
Utilies_Status_t Software_PWM_Init( StrGPIO_t PORT , uint8_t PIN_Num ,TIMInit_t * Tim_PWM_Handler )
{
	
	if(Tim_PWM_Handler == NULL)
	{
		return UTIL_PARAM_ERROR ;
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	01 c0       	rjmp	.+2      	; 0x3b28 <Software_PWM_Init+0xd4>
		TIM_CallBack_FuctionSet(TIM_2_IT_OVER , PWM_Toggle_Timer2);
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer2);
		
	}else
	{
		return UTIL_TIM_ERROR ;
    3b26:	82 e0       	ldi	r24, 0x02	; 2
		
	
	
	return  UTIL_OK ; 
	
}
    3b28:	df 91       	pop	r29
    3b2a:	cf 91       	pop	r28
    3b2c:	1f 91       	pop	r17
    3b2e:	0f 91       	pop	r16
    3b30:	ff 90       	pop	r15
    3b32:	08 95       	ret

00003b34 <Software_PWM_Start>:


Utilies_Status_t Software_PWM_Start (TIMInit_t * TIMConfig )
{
	
	if(TIMConfig == NULL)
    3b34:	00 97       	sbiw	r24, 0x00	; 0
    3b36:	21 f0       	breq	.+8      	; 0x3b40 <Software_PWM_Start+0xc>
	}else
	{
		;
	}
	
	TIM_Start(TIMConfig) ;
    3b38:	0e 94 83 1a 	call	0x3506	; 0x3506 <TIM_Start>
	return UTIL_OK ;
    3b3c:	80 e0       	ldi	r24, 0x00	; 0
    3b3e:	08 95       	ret
Utilies_Status_t Software_PWM_Start (TIMInit_t * TIMConfig )
{
	
	if(TIMConfig == NULL)
	{
		return UTIL_PARAM_ERROR ;
    3b40:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	TIM_Start(TIMConfig) ;
	return UTIL_OK ;

}
    3b42:	08 95       	ret

00003b44 <Software_PWM_UpdateDuty>:
 * param (input): Tim_PWM_Handler pointer to selected timer configuration that contain Prescaller 
 * param (input): SetDuty desired Duty cycle From (0 t0 100 )
 * return : Utilies_Status_t status 
*/
Utilies_Status_t Software_PWM_UpdateDuty( uint8_t SetDuty  ,TIMInit_t * Tim_PWM_Handler )
{
    3b44:	8f 92       	push	r8
    3b46:	9f 92       	push	r9
    3b48:	af 92       	push	r10
    3b4a:	bf 92       	push	r11
    3b4c:	cf 92       	push	r12
    3b4e:	df 92       	push	r13
    3b50:	ef 92       	push	r14
    3b52:	ff 92       	push	r15
    3b54:	1f 93       	push	r17
    3b56:	cf 93       	push	r28
    3b58:	df 93       	push	r29
		if (Tim_PWM_Handler == NULL)
    3b5a:	61 15       	cp	r22, r1
    3b5c:	71 05       	cpc	r23, r1
    3b5e:	09 f4       	brne	.+2      	; 0x3b62 <Software_PWM_UpdateDuty+0x1e>
    3b60:	71 c0       	rjmp	.+226    	; 0x3c44 <Software_PWM_UpdateDuty+0x100>
    3b62:	eb 01       	movw	r28, r22
    3b64:	18 2f       	mov	r17, r24
		{
			return UTIL_PARAM_ERROR ;
			}else
			{
				 if(TIM_Stop(Tim_PWM_Handler->Instance) == TIM_OK)
    3b66:	88 85       	ldd	r24, Y+8	; 0x08
    3b68:	0e 94 ae 1a 	call	0x355c	; 0x355c <TIM_Stop>
    3b6c:	81 11       	cpse	r24, r1
    3b6e:	6c c0       	rjmp	.+216    	; 0x3c48 <Software_PWM_UpdateDuty+0x104>
				 {
	
						if(TIM_PWMMode_SetDuty(Tim_PWM_Handler , SetDuty) == TIM_OK)
    3b70:	61 2f       	mov	r22, r17
    3b72:	ce 01       	movw	r24, r28
    3b74:	0e 94 df 19 	call	0x33be	; 0x33be <TIM_PWMMode_SetDuty>
    3b78:	81 11       	cpse	r24, r1
    3b7a:	68 c0       	rjmp	.+208    	; 0x3c4c <Software_PWM_UpdateDuty+0x108>
						{
							if(TIM_Start(Tim_PWM_Handler) == TIM_OK)
    3b7c:	ce 01       	movw	r24, r28
    3b7e:	0e 94 83 1a 	call	0x3506	; 0x3506 <TIM_Start>
    3b82:	81 11       	cpse	r24, r1
    3b84:	65 c0       	rjmp	.+202    	; 0x3c50 <Software_PWM_UpdateDuty+0x10c>
			}
			
		
			
			
			if (Tim_PWM_Handler->Instance == TIM1)
    3b86:	88 85       	ldd	r24, Y+8	; 0x08
    3b88:	81 30       	cpi	r24, 0x01	; 1
    3b8a:	41 f5       	brne	.+80     	; 0x3bdc <Software_PWM_UpdateDuty+0x98>
			{
					Duty_TIM1 =((Tim_PWM_Handler->TIMMode & 0xfff)/(100.0 * SetDuty ));
    3b8c:	88 81       	ld	r24, Y
    3b8e:	99 81       	ldd	r25, Y+1	; 0x01
    3b90:	aa 81       	ldd	r26, Y+2	; 0x02
    3b92:	bb 81       	ldd	r27, Y+3	; 0x03
    3b94:	4c 01       	movw	r8, r24
    3b96:	5d 01       	movw	r10, r26
    3b98:	2f e0       	ldi	r18, 0x0F	; 15
    3b9a:	92 22       	and	r9, r18
    3b9c:	aa 24       	eor	r10, r10
    3b9e:	bb 24       	eor	r11, r11
    3ba0:	61 2f       	mov	r22, r17
    3ba2:	70 e0       	ldi	r23, 0x00	; 0
    3ba4:	80 e0       	ldi	r24, 0x00	; 0
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__floatsisf>
    3bac:	20 e0       	ldi	r18, 0x00	; 0
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	48 ec       	ldi	r20, 0xC8	; 200
    3bb2:	52 e4       	ldi	r21, 0x42	; 66
    3bb4:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <__mulsf3>
    3bb8:	6b 01       	movw	r12, r22
    3bba:	7c 01       	movw	r14, r24
    3bbc:	c5 01       	movw	r24, r10
    3bbe:	b4 01       	movw	r22, r8
    3bc0:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__floatunsisf>
    3bc4:	a7 01       	movw	r20, r14
    3bc6:	96 01       	movw	r18, r12
    3bc8:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__divsf3>
    3bcc:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <__fixunssfsi>
    3bd0:	70 93 d9 01 	sts	0x01D9, r23	; 0x8001d9 <Duty_TIM1+0x1>
    3bd4:	60 93 d8 01 	sts	0x01D8, r22	; 0x8001d8 <Duty_TIM1>
				return UTIL_TIM_ERROR ;
			}
			#endif 
			
		
		return UTIL_OK ; 
    3bd8:	80 e0       	ldi	r24, 0x00	; 0
    3bda:	3d c0       	rjmp	.+122    	; 0x3c56 <Software_PWM_UpdateDuty+0x112>
			if (Tim_PWM_Handler->Instance == TIM1)
			{
					Duty_TIM1 =((Tim_PWM_Handler->TIMMode & 0xfff)/(100.0 * SetDuty ));
			}
			#if SOFTWARE_PWM_CTC_MODE
			else if (Tim_PWM_Handler->Instance == TIM0)
    3bdc:	81 11       	cpse	r24, r1
    3bde:	18 c0       	rjmp	.+48     	; 0x3c10 <Software_PWM_UpdateDuty+0xcc>
			{
				  Duty_TIM0 = (256*(SetDuty/100.0));
    3be0:	61 2f       	mov	r22, r17
    3be2:	70 e0       	ldi	r23, 0x00	; 0
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__floatsisf>
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	48 ec       	ldi	r20, 0xC8	; 200
    3bf2:	52 e4       	ldi	r21, 0x42	; 66
    3bf4:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__divsf3>
    3bf8:	20 e0       	ldi	r18, 0x00	; 0
    3bfa:	30 e0       	ldi	r19, 0x00	; 0
    3bfc:	40 e8       	ldi	r20, 0x80	; 128
    3bfe:	53 e4       	ldi	r21, 0x43	; 67
    3c00:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <__mulsf3>
    3c04:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <__fixunssfsi>
    3c08:	60 93 db 01 	sts	0x01DB, r22	; 0x8001db <Duty_TIM0>
				return UTIL_TIM_ERROR ;
			}
			#endif 
			
		
		return UTIL_OK ; 
    3c0c:	80 e0       	ldi	r24, 0x00	; 0
    3c0e:	23 c0       	rjmp	.+70     	; 0x3c56 <Software_PWM_UpdateDuty+0x112>
			}
			#if SOFTWARE_PWM_CTC_MODE
			else if (Tim_PWM_Handler->Instance == TIM0)
			{
				  Duty_TIM0 = (256*(SetDuty/100.0));
			}else if (Tim_PWM_Handler->Instance == TIM2)
    3c10:	82 30       	cpi	r24, 0x02	; 2
    3c12:	01 f5       	brne	.+64     	; 0x3c54 <Software_PWM_UpdateDuty+0x110>
			{
				 Duty_TIM2 = (uint8_t)(256 * (SetDuty/100.0) );
    3c14:	61 2f       	mov	r22, r17
    3c16:	70 e0       	ldi	r23, 0x00	; 0
    3c18:	80 e0       	ldi	r24, 0x00	; 0
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__floatsisf>
    3c20:	20 e0       	ldi	r18, 0x00	; 0
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	48 ec       	ldi	r20, 0xC8	; 200
    3c26:	52 e4       	ldi	r21, 0x42	; 66
    3c28:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__divsf3>
    3c2c:	20 e0       	ldi	r18, 0x00	; 0
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	40 e8       	ldi	r20, 0x80	; 128
    3c32:	53 e4       	ldi	r21, 0x43	; 67
    3c34:	0e 94 66 1f 	call	0x3ecc	; 0x3ecc <__mulsf3>
    3c38:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <__fixunssfsi>
    3c3c:	60 93 da 01 	sts	0x01DA, r22	; 0x8001da <Duty_TIM2>
				return UTIL_TIM_ERROR ;
			}
			#endif 
			
		
		return UTIL_OK ; 
    3c40:	80 e0       	ldi	r24, 0x00	; 0
    3c42:	09 c0       	rjmp	.+18     	; 0x3c56 <Software_PWM_UpdateDuty+0x112>
*/
Utilies_Status_t Software_PWM_UpdateDuty( uint8_t SetDuty  ,TIMInit_t * Tim_PWM_Handler )
{
		if (Tim_PWM_Handler == NULL)
		{
			return UTIL_PARAM_ERROR ;
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	07 c0       	rjmp	.+14     	; 0x3c56 <Software_PWM_UpdateDuty+0x112>
							return UTIL_TIM_ERROR ;
						}
					}
					else
					{
						return UTIL_TIM_ERROR ; 
    3c48:	82 e0       	ldi	r24, 0x02	; 2
    3c4a:	05 c0       	rjmp	.+10     	; 0x3c56 <Software_PWM_UpdateDuty+0x112>
								return UTIL_TIM_ERROR ;
							}
						}
						else
						{
							return UTIL_TIM_ERROR ;
    3c4c:	82 e0       	ldi	r24, 0x02	; 2
    3c4e:	03 c0       	rjmp	.+6      	; 0x3c56 <Software_PWM_UpdateDuty+0x112>
							{
								;
							}
							else
							{
								return UTIL_TIM_ERROR ;
    3c50:	82 e0       	ldi	r24, 0x02	; 2
    3c52:	01 c0       	rjmp	.+2      	; 0x3c56 <Software_PWM_UpdateDuty+0x112>
			}else if (Tim_PWM_Handler->Instance == TIM2)
			{
				 Duty_TIM2 = (uint8_t)(256 * (SetDuty/100.0) );
			}else
			{
				return UTIL_TIM_ERROR ;
    3c54:	82 e0       	ldi	r24, 0x02	; 2
			}
			#endif 
			
		
		return UTIL_OK ; 
}
    3c56:	df 91       	pop	r29
    3c58:	cf 91       	pop	r28
    3c5a:	1f 91       	pop	r17
    3c5c:	ff 90       	pop	r15
    3c5e:	ef 90       	pop	r14
    3c60:	df 90       	pop	r13
    3c62:	cf 90       	pop	r12
    3c64:	bf 90       	pop	r11
    3c66:	af 90       	pop	r10
    3c68:	9f 90       	pop	r9
    3c6a:	8f 90       	pop	r8
    3c6c:	08 95       	ret

00003c6e <__divsf3>:
    3c6e:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__divsf3x>
    3c72:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <__fp_round>
    3c76:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <__fp_pscB>
    3c7a:	58 f0       	brcs	.+22     	; 0x3c92 <__divsf3+0x24>
    3c7c:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <__fp_pscA>
    3c80:	40 f0       	brcs	.+16     	; 0x3c92 <__divsf3+0x24>
    3c82:	29 f4       	brne	.+10     	; 0x3c8e <__divsf3+0x20>
    3c84:	5f 3f       	cpi	r21, 0xFF	; 255
    3c86:	29 f0       	breq	.+10     	; 0x3c92 <__divsf3+0x24>
    3c88:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <__fp_inf>
    3c8c:	51 11       	cpse	r21, r1
    3c8e:	0c 94 60 1f 	jmp	0x3ec0	; 0x3ec0 <__fp_szero>
    3c92:	0c 94 1b 1f 	jmp	0x3e36	; 0x3e36 <__fp_nan>

00003c96 <__divsf3x>:
    3c96:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <__fp_split3>
    3c9a:	68 f3       	brcs	.-38     	; 0x3c76 <__divsf3+0x8>

00003c9c <__divsf3_pse>:
    3c9c:	99 23       	and	r25, r25
    3c9e:	b1 f3       	breq	.-20     	; 0x3c8c <__divsf3+0x1e>
    3ca0:	55 23       	and	r21, r21
    3ca2:	91 f3       	breq	.-28     	; 0x3c88 <__divsf3+0x1a>
    3ca4:	95 1b       	sub	r25, r21
    3ca6:	55 0b       	sbc	r21, r21
    3ca8:	bb 27       	eor	r27, r27
    3caa:	aa 27       	eor	r26, r26
    3cac:	62 17       	cp	r22, r18
    3cae:	73 07       	cpc	r23, r19
    3cb0:	84 07       	cpc	r24, r20
    3cb2:	38 f0       	brcs	.+14     	; 0x3cc2 <__divsf3_pse+0x26>
    3cb4:	9f 5f       	subi	r25, 0xFF	; 255
    3cb6:	5f 4f       	sbci	r21, 0xFF	; 255
    3cb8:	22 0f       	add	r18, r18
    3cba:	33 1f       	adc	r19, r19
    3cbc:	44 1f       	adc	r20, r20
    3cbe:	aa 1f       	adc	r26, r26
    3cc0:	a9 f3       	breq	.-22     	; 0x3cac <__divsf3_pse+0x10>
    3cc2:	35 d0       	rcall	.+106    	; 0x3d2e <__divsf3_pse+0x92>
    3cc4:	0e 2e       	mov	r0, r30
    3cc6:	3a f0       	brmi	.+14     	; 0x3cd6 <__divsf3_pse+0x3a>
    3cc8:	e0 e8       	ldi	r30, 0x80	; 128
    3cca:	32 d0       	rcall	.+100    	; 0x3d30 <__divsf3_pse+0x94>
    3ccc:	91 50       	subi	r25, 0x01	; 1
    3cce:	50 40       	sbci	r21, 0x00	; 0
    3cd0:	e6 95       	lsr	r30
    3cd2:	00 1c       	adc	r0, r0
    3cd4:	ca f7       	brpl	.-14     	; 0x3cc8 <__divsf3_pse+0x2c>
    3cd6:	2b d0       	rcall	.+86     	; 0x3d2e <__divsf3_pse+0x92>
    3cd8:	fe 2f       	mov	r31, r30
    3cda:	29 d0       	rcall	.+82     	; 0x3d2e <__divsf3_pse+0x92>
    3cdc:	66 0f       	add	r22, r22
    3cde:	77 1f       	adc	r23, r23
    3ce0:	88 1f       	adc	r24, r24
    3ce2:	bb 1f       	adc	r27, r27
    3ce4:	26 17       	cp	r18, r22
    3ce6:	37 07       	cpc	r19, r23
    3ce8:	48 07       	cpc	r20, r24
    3cea:	ab 07       	cpc	r26, r27
    3cec:	b0 e8       	ldi	r27, 0x80	; 128
    3cee:	09 f0       	breq	.+2      	; 0x3cf2 <__divsf3_pse+0x56>
    3cf0:	bb 0b       	sbc	r27, r27
    3cf2:	80 2d       	mov	r24, r0
    3cf4:	bf 01       	movw	r22, r30
    3cf6:	ff 27       	eor	r31, r31
    3cf8:	93 58       	subi	r25, 0x83	; 131
    3cfa:	5f 4f       	sbci	r21, 0xFF	; 255
    3cfc:	3a f0       	brmi	.+14     	; 0x3d0c <__divsf3_pse+0x70>
    3cfe:	9e 3f       	cpi	r25, 0xFE	; 254
    3d00:	51 05       	cpc	r21, r1
    3d02:	78 f0       	brcs	.+30     	; 0x3d22 <__divsf3_pse+0x86>
    3d04:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <__fp_inf>
    3d08:	0c 94 60 1f 	jmp	0x3ec0	; 0x3ec0 <__fp_szero>
    3d0c:	5f 3f       	cpi	r21, 0xFF	; 255
    3d0e:	e4 f3       	brlt	.-8      	; 0x3d08 <__divsf3_pse+0x6c>
    3d10:	98 3e       	cpi	r25, 0xE8	; 232
    3d12:	d4 f3       	brlt	.-12     	; 0x3d08 <__divsf3_pse+0x6c>
    3d14:	86 95       	lsr	r24
    3d16:	77 95       	ror	r23
    3d18:	67 95       	ror	r22
    3d1a:	b7 95       	ror	r27
    3d1c:	f7 95       	ror	r31
    3d1e:	9f 5f       	subi	r25, 0xFF	; 255
    3d20:	c9 f7       	brne	.-14     	; 0x3d14 <__divsf3_pse+0x78>
    3d22:	88 0f       	add	r24, r24
    3d24:	91 1d       	adc	r25, r1
    3d26:	96 95       	lsr	r25
    3d28:	87 95       	ror	r24
    3d2a:	97 f9       	bld	r25, 7
    3d2c:	08 95       	ret
    3d2e:	e1 e0       	ldi	r30, 0x01	; 1
    3d30:	66 0f       	add	r22, r22
    3d32:	77 1f       	adc	r23, r23
    3d34:	88 1f       	adc	r24, r24
    3d36:	bb 1f       	adc	r27, r27
    3d38:	62 17       	cp	r22, r18
    3d3a:	73 07       	cpc	r23, r19
    3d3c:	84 07       	cpc	r24, r20
    3d3e:	ba 07       	cpc	r27, r26
    3d40:	20 f0       	brcs	.+8      	; 0x3d4a <__divsf3_pse+0xae>
    3d42:	62 1b       	sub	r22, r18
    3d44:	73 0b       	sbc	r23, r19
    3d46:	84 0b       	sbc	r24, r20
    3d48:	ba 0b       	sbc	r27, r26
    3d4a:	ee 1f       	adc	r30, r30
    3d4c:	88 f7       	brcc	.-30     	; 0x3d30 <__divsf3_pse+0x94>
    3d4e:	e0 95       	com	r30
    3d50:	08 95       	ret

00003d52 <__fixunssfsi>:
    3d52:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <__fp_splitA>
    3d56:	88 f0       	brcs	.+34     	; 0x3d7a <__fixunssfsi+0x28>
    3d58:	9f 57       	subi	r25, 0x7F	; 127
    3d5a:	98 f0       	brcs	.+38     	; 0x3d82 <__fixunssfsi+0x30>
    3d5c:	b9 2f       	mov	r27, r25
    3d5e:	99 27       	eor	r25, r25
    3d60:	b7 51       	subi	r27, 0x17	; 23
    3d62:	b0 f0       	brcs	.+44     	; 0x3d90 <__fixunssfsi+0x3e>
    3d64:	e1 f0       	breq	.+56     	; 0x3d9e <__fixunssfsi+0x4c>
    3d66:	66 0f       	add	r22, r22
    3d68:	77 1f       	adc	r23, r23
    3d6a:	88 1f       	adc	r24, r24
    3d6c:	99 1f       	adc	r25, r25
    3d6e:	1a f0       	brmi	.+6      	; 0x3d76 <__fixunssfsi+0x24>
    3d70:	ba 95       	dec	r27
    3d72:	c9 f7       	brne	.-14     	; 0x3d66 <__fixunssfsi+0x14>
    3d74:	14 c0       	rjmp	.+40     	; 0x3d9e <__fixunssfsi+0x4c>
    3d76:	b1 30       	cpi	r27, 0x01	; 1
    3d78:	91 f0       	breq	.+36     	; 0x3d9e <__fixunssfsi+0x4c>
    3d7a:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <__fp_zero>
    3d7e:	b1 e0       	ldi	r27, 0x01	; 1
    3d80:	08 95       	ret
    3d82:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <__fp_zero>
    3d86:	67 2f       	mov	r22, r23
    3d88:	78 2f       	mov	r23, r24
    3d8a:	88 27       	eor	r24, r24
    3d8c:	b8 5f       	subi	r27, 0xF8	; 248
    3d8e:	39 f0       	breq	.+14     	; 0x3d9e <__fixunssfsi+0x4c>
    3d90:	b9 3f       	cpi	r27, 0xF9	; 249
    3d92:	cc f3       	brlt	.-14     	; 0x3d86 <__fixunssfsi+0x34>
    3d94:	86 95       	lsr	r24
    3d96:	77 95       	ror	r23
    3d98:	67 95       	ror	r22
    3d9a:	b3 95       	inc	r27
    3d9c:	d9 f7       	brne	.-10     	; 0x3d94 <__fixunssfsi+0x42>
    3d9e:	3e f4       	brtc	.+14     	; 0x3dae <__fixunssfsi+0x5c>
    3da0:	90 95       	com	r25
    3da2:	80 95       	com	r24
    3da4:	70 95       	com	r23
    3da6:	61 95       	neg	r22
    3da8:	7f 4f       	sbci	r23, 0xFF	; 255
    3daa:	8f 4f       	sbci	r24, 0xFF	; 255
    3dac:	9f 4f       	sbci	r25, 0xFF	; 255
    3dae:	08 95       	ret

00003db0 <__floatunsisf>:
    3db0:	e8 94       	clt
    3db2:	09 c0       	rjmp	.+18     	; 0x3dc6 <__floatsisf+0x12>

00003db4 <__floatsisf>:
    3db4:	97 fb       	bst	r25, 7
    3db6:	3e f4       	brtc	.+14     	; 0x3dc6 <__floatsisf+0x12>
    3db8:	90 95       	com	r25
    3dba:	80 95       	com	r24
    3dbc:	70 95       	com	r23
    3dbe:	61 95       	neg	r22
    3dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc2:	8f 4f       	sbci	r24, 0xFF	; 255
    3dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc6:	99 23       	and	r25, r25
    3dc8:	a9 f0       	breq	.+42     	; 0x3df4 <__floatsisf+0x40>
    3dca:	f9 2f       	mov	r31, r25
    3dcc:	96 e9       	ldi	r25, 0x96	; 150
    3dce:	bb 27       	eor	r27, r27
    3dd0:	93 95       	inc	r25
    3dd2:	f6 95       	lsr	r31
    3dd4:	87 95       	ror	r24
    3dd6:	77 95       	ror	r23
    3dd8:	67 95       	ror	r22
    3dda:	b7 95       	ror	r27
    3ddc:	f1 11       	cpse	r31, r1
    3dde:	f8 cf       	rjmp	.-16     	; 0x3dd0 <__floatsisf+0x1c>
    3de0:	fa f4       	brpl	.+62     	; 0x3e20 <__floatsisf+0x6c>
    3de2:	bb 0f       	add	r27, r27
    3de4:	11 f4       	brne	.+4      	; 0x3dea <__floatsisf+0x36>
    3de6:	60 ff       	sbrs	r22, 0
    3de8:	1b c0       	rjmp	.+54     	; 0x3e20 <__floatsisf+0x6c>
    3dea:	6f 5f       	subi	r22, 0xFF	; 255
    3dec:	7f 4f       	sbci	r23, 0xFF	; 255
    3dee:	8f 4f       	sbci	r24, 0xFF	; 255
    3df0:	9f 4f       	sbci	r25, 0xFF	; 255
    3df2:	16 c0       	rjmp	.+44     	; 0x3e20 <__floatsisf+0x6c>
    3df4:	88 23       	and	r24, r24
    3df6:	11 f0       	breq	.+4      	; 0x3dfc <__floatsisf+0x48>
    3df8:	96 e9       	ldi	r25, 0x96	; 150
    3dfa:	11 c0       	rjmp	.+34     	; 0x3e1e <__floatsisf+0x6a>
    3dfc:	77 23       	and	r23, r23
    3dfe:	21 f0       	breq	.+8      	; 0x3e08 <__floatsisf+0x54>
    3e00:	9e e8       	ldi	r25, 0x8E	; 142
    3e02:	87 2f       	mov	r24, r23
    3e04:	76 2f       	mov	r23, r22
    3e06:	05 c0       	rjmp	.+10     	; 0x3e12 <__floatsisf+0x5e>
    3e08:	66 23       	and	r22, r22
    3e0a:	71 f0       	breq	.+28     	; 0x3e28 <__floatsisf+0x74>
    3e0c:	96 e8       	ldi	r25, 0x86	; 134
    3e0e:	86 2f       	mov	r24, r22
    3e10:	70 e0       	ldi	r23, 0x00	; 0
    3e12:	60 e0       	ldi	r22, 0x00	; 0
    3e14:	2a f0       	brmi	.+10     	; 0x3e20 <__floatsisf+0x6c>
    3e16:	9a 95       	dec	r25
    3e18:	66 0f       	add	r22, r22
    3e1a:	77 1f       	adc	r23, r23
    3e1c:	88 1f       	adc	r24, r24
    3e1e:	da f7       	brpl	.-10     	; 0x3e16 <__floatsisf+0x62>
    3e20:	88 0f       	add	r24, r24
    3e22:	96 95       	lsr	r25
    3e24:	87 95       	ror	r24
    3e26:	97 f9       	bld	r25, 7
    3e28:	08 95       	ret

00003e2a <__fp_inf>:
    3e2a:	97 f9       	bld	r25, 7
    3e2c:	9f 67       	ori	r25, 0x7F	; 127
    3e2e:	80 e8       	ldi	r24, 0x80	; 128
    3e30:	70 e0       	ldi	r23, 0x00	; 0
    3e32:	60 e0       	ldi	r22, 0x00	; 0
    3e34:	08 95       	ret

00003e36 <__fp_nan>:
    3e36:	9f ef       	ldi	r25, 0xFF	; 255
    3e38:	80 ec       	ldi	r24, 0xC0	; 192
    3e3a:	08 95       	ret

00003e3c <__fp_pscA>:
    3e3c:	00 24       	eor	r0, r0
    3e3e:	0a 94       	dec	r0
    3e40:	16 16       	cp	r1, r22
    3e42:	17 06       	cpc	r1, r23
    3e44:	18 06       	cpc	r1, r24
    3e46:	09 06       	cpc	r0, r25
    3e48:	08 95       	ret

00003e4a <__fp_pscB>:
    3e4a:	00 24       	eor	r0, r0
    3e4c:	0a 94       	dec	r0
    3e4e:	12 16       	cp	r1, r18
    3e50:	13 06       	cpc	r1, r19
    3e52:	14 06       	cpc	r1, r20
    3e54:	05 06       	cpc	r0, r21
    3e56:	08 95       	ret

00003e58 <__fp_round>:
    3e58:	09 2e       	mov	r0, r25
    3e5a:	03 94       	inc	r0
    3e5c:	00 0c       	add	r0, r0
    3e5e:	11 f4       	brne	.+4      	; 0x3e64 <__fp_round+0xc>
    3e60:	88 23       	and	r24, r24
    3e62:	52 f0       	brmi	.+20     	; 0x3e78 <__fp_round+0x20>
    3e64:	bb 0f       	add	r27, r27
    3e66:	40 f4       	brcc	.+16     	; 0x3e78 <__fp_round+0x20>
    3e68:	bf 2b       	or	r27, r31
    3e6a:	11 f4       	brne	.+4      	; 0x3e70 <__fp_round+0x18>
    3e6c:	60 ff       	sbrs	r22, 0
    3e6e:	04 c0       	rjmp	.+8      	; 0x3e78 <__fp_round+0x20>
    3e70:	6f 5f       	subi	r22, 0xFF	; 255
    3e72:	7f 4f       	sbci	r23, 0xFF	; 255
    3e74:	8f 4f       	sbci	r24, 0xFF	; 255
    3e76:	9f 4f       	sbci	r25, 0xFF	; 255
    3e78:	08 95       	ret

00003e7a <__fp_split3>:
    3e7a:	57 fd       	sbrc	r21, 7
    3e7c:	90 58       	subi	r25, 0x80	; 128
    3e7e:	44 0f       	add	r20, r20
    3e80:	55 1f       	adc	r21, r21
    3e82:	59 f0       	breq	.+22     	; 0x3e9a <__fp_splitA+0x10>
    3e84:	5f 3f       	cpi	r21, 0xFF	; 255
    3e86:	71 f0       	breq	.+28     	; 0x3ea4 <__fp_splitA+0x1a>
    3e88:	47 95       	ror	r20

00003e8a <__fp_splitA>:
    3e8a:	88 0f       	add	r24, r24
    3e8c:	97 fb       	bst	r25, 7
    3e8e:	99 1f       	adc	r25, r25
    3e90:	61 f0       	breq	.+24     	; 0x3eaa <__fp_splitA+0x20>
    3e92:	9f 3f       	cpi	r25, 0xFF	; 255
    3e94:	79 f0       	breq	.+30     	; 0x3eb4 <__fp_splitA+0x2a>
    3e96:	87 95       	ror	r24
    3e98:	08 95       	ret
    3e9a:	12 16       	cp	r1, r18
    3e9c:	13 06       	cpc	r1, r19
    3e9e:	14 06       	cpc	r1, r20
    3ea0:	55 1f       	adc	r21, r21
    3ea2:	f2 cf       	rjmp	.-28     	; 0x3e88 <__fp_split3+0xe>
    3ea4:	46 95       	lsr	r20
    3ea6:	f1 df       	rcall	.-30     	; 0x3e8a <__fp_splitA>
    3ea8:	08 c0       	rjmp	.+16     	; 0x3eba <__fp_splitA+0x30>
    3eaa:	16 16       	cp	r1, r22
    3eac:	17 06       	cpc	r1, r23
    3eae:	18 06       	cpc	r1, r24
    3eb0:	99 1f       	adc	r25, r25
    3eb2:	f1 cf       	rjmp	.-30     	; 0x3e96 <__fp_splitA+0xc>
    3eb4:	86 95       	lsr	r24
    3eb6:	71 05       	cpc	r23, r1
    3eb8:	61 05       	cpc	r22, r1
    3eba:	08 94       	sec
    3ebc:	08 95       	ret

00003ebe <__fp_zero>:
    3ebe:	e8 94       	clt

00003ec0 <__fp_szero>:
    3ec0:	bb 27       	eor	r27, r27
    3ec2:	66 27       	eor	r22, r22
    3ec4:	77 27       	eor	r23, r23
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	97 f9       	bld	r25, 7
    3eca:	08 95       	ret

00003ecc <__mulsf3>:
    3ecc:	0e 94 79 1f 	call	0x3ef2	; 0x3ef2 <__mulsf3x>
    3ed0:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <__fp_round>
    3ed4:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <__fp_pscA>
    3ed8:	38 f0       	brcs	.+14     	; 0x3ee8 <__mulsf3+0x1c>
    3eda:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <__fp_pscB>
    3ede:	20 f0       	brcs	.+8      	; 0x3ee8 <__mulsf3+0x1c>
    3ee0:	95 23       	and	r25, r21
    3ee2:	11 f0       	breq	.+4      	; 0x3ee8 <__mulsf3+0x1c>
    3ee4:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <__fp_inf>
    3ee8:	0c 94 1b 1f 	jmp	0x3e36	; 0x3e36 <__fp_nan>
    3eec:	11 24       	eor	r1, r1
    3eee:	0c 94 60 1f 	jmp	0x3ec0	; 0x3ec0 <__fp_szero>

00003ef2 <__mulsf3x>:
    3ef2:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <__fp_split3>
    3ef6:	70 f3       	brcs	.-36     	; 0x3ed4 <__mulsf3+0x8>

00003ef8 <__mulsf3_pse>:
    3ef8:	95 9f       	mul	r25, r21
    3efa:	c1 f3       	breq	.-16     	; 0x3eec <__mulsf3+0x20>
    3efc:	95 0f       	add	r25, r21
    3efe:	50 e0       	ldi	r21, 0x00	; 0
    3f00:	55 1f       	adc	r21, r21
    3f02:	62 9f       	mul	r22, r18
    3f04:	f0 01       	movw	r30, r0
    3f06:	72 9f       	mul	r23, r18
    3f08:	bb 27       	eor	r27, r27
    3f0a:	f0 0d       	add	r31, r0
    3f0c:	b1 1d       	adc	r27, r1
    3f0e:	63 9f       	mul	r22, r19
    3f10:	aa 27       	eor	r26, r26
    3f12:	f0 0d       	add	r31, r0
    3f14:	b1 1d       	adc	r27, r1
    3f16:	aa 1f       	adc	r26, r26
    3f18:	64 9f       	mul	r22, r20
    3f1a:	66 27       	eor	r22, r22
    3f1c:	b0 0d       	add	r27, r0
    3f1e:	a1 1d       	adc	r26, r1
    3f20:	66 1f       	adc	r22, r22
    3f22:	82 9f       	mul	r24, r18
    3f24:	22 27       	eor	r18, r18
    3f26:	b0 0d       	add	r27, r0
    3f28:	a1 1d       	adc	r26, r1
    3f2a:	62 1f       	adc	r22, r18
    3f2c:	73 9f       	mul	r23, r19
    3f2e:	b0 0d       	add	r27, r0
    3f30:	a1 1d       	adc	r26, r1
    3f32:	62 1f       	adc	r22, r18
    3f34:	83 9f       	mul	r24, r19
    3f36:	a0 0d       	add	r26, r0
    3f38:	61 1d       	adc	r22, r1
    3f3a:	22 1f       	adc	r18, r18
    3f3c:	74 9f       	mul	r23, r20
    3f3e:	33 27       	eor	r19, r19
    3f40:	a0 0d       	add	r26, r0
    3f42:	61 1d       	adc	r22, r1
    3f44:	23 1f       	adc	r18, r19
    3f46:	84 9f       	mul	r24, r20
    3f48:	60 0d       	add	r22, r0
    3f4a:	21 1d       	adc	r18, r1
    3f4c:	82 2f       	mov	r24, r18
    3f4e:	76 2f       	mov	r23, r22
    3f50:	6a 2f       	mov	r22, r26
    3f52:	11 24       	eor	r1, r1
    3f54:	9f 57       	subi	r25, 0x7F	; 127
    3f56:	50 40       	sbci	r21, 0x00	; 0
    3f58:	9a f0       	brmi	.+38     	; 0x3f80 <__mulsf3_pse+0x88>
    3f5a:	f1 f0       	breq	.+60     	; 0x3f98 <__mulsf3_pse+0xa0>
    3f5c:	88 23       	and	r24, r24
    3f5e:	4a f0       	brmi	.+18     	; 0x3f72 <__mulsf3_pse+0x7a>
    3f60:	ee 0f       	add	r30, r30
    3f62:	ff 1f       	adc	r31, r31
    3f64:	bb 1f       	adc	r27, r27
    3f66:	66 1f       	adc	r22, r22
    3f68:	77 1f       	adc	r23, r23
    3f6a:	88 1f       	adc	r24, r24
    3f6c:	91 50       	subi	r25, 0x01	; 1
    3f6e:	50 40       	sbci	r21, 0x00	; 0
    3f70:	a9 f7       	brne	.-22     	; 0x3f5c <__mulsf3_pse+0x64>
    3f72:	9e 3f       	cpi	r25, 0xFE	; 254
    3f74:	51 05       	cpc	r21, r1
    3f76:	80 f0       	brcs	.+32     	; 0x3f98 <__mulsf3_pse+0xa0>
    3f78:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <__fp_inf>
    3f7c:	0c 94 60 1f 	jmp	0x3ec0	; 0x3ec0 <__fp_szero>
    3f80:	5f 3f       	cpi	r21, 0xFF	; 255
    3f82:	e4 f3       	brlt	.-8      	; 0x3f7c <__mulsf3_pse+0x84>
    3f84:	98 3e       	cpi	r25, 0xE8	; 232
    3f86:	d4 f3       	brlt	.-12     	; 0x3f7c <__mulsf3_pse+0x84>
    3f88:	86 95       	lsr	r24
    3f8a:	77 95       	ror	r23
    3f8c:	67 95       	ror	r22
    3f8e:	b7 95       	ror	r27
    3f90:	f7 95       	ror	r31
    3f92:	e7 95       	ror	r30
    3f94:	9f 5f       	subi	r25, 0xFF	; 255
    3f96:	c1 f7       	brne	.-16     	; 0x3f88 <__mulsf3_pse+0x90>
    3f98:	fe 2b       	or	r31, r30
    3f9a:	88 0f       	add	r24, r24
    3f9c:	91 1d       	adc	r25, r1
    3f9e:	96 95       	lsr	r25
    3fa0:	87 95       	ror	r24
    3fa2:	97 f9       	bld	r25, 7
    3fa4:	08 95       	ret

00003fa6 <__divmodhi4>:
    3fa6:	97 fb       	bst	r25, 7
    3fa8:	07 2e       	mov	r0, r23
    3faa:	16 f4       	brtc	.+4      	; 0x3fb0 <__divmodhi4+0xa>
    3fac:	00 94       	com	r0
    3fae:	07 d0       	rcall	.+14     	; 0x3fbe <__divmodhi4_neg1>
    3fb0:	77 fd       	sbrc	r23, 7
    3fb2:	09 d0       	rcall	.+18     	; 0x3fc6 <__divmodhi4_neg2>
    3fb4:	0e 94 44 20 	call	0x4088	; 0x4088 <__udivmodhi4>
    3fb8:	07 fc       	sbrc	r0, 7
    3fba:	05 d0       	rcall	.+10     	; 0x3fc6 <__divmodhi4_neg2>
    3fbc:	3e f4       	brtc	.+14     	; 0x3fcc <__divmodhi4_exit>

00003fbe <__divmodhi4_neg1>:
    3fbe:	90 95       	com	r25
    3fc0:	81 95       	neg	r24
    3fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    3fc4:	08 95       	ret

00003fc6 <__divmodhi4_neg2>:
    3fc6:	70 95       	com	r23
    3fc8:	61 95       	neg	r22
    3fca:	7f 4f       	sbci	r23, 0xFF	; 255

00003fcc <__divmodhi4_exit>:
    3fcc:	08 95       	ret

00003fce <__udivmodsi4>:
    3fce:	a1 e2       	ldi	r26, 0x21	; 33
    3fd0:	1a 2e       	mov	r1, r26
    3fd2:	aa 1b       	sub	r26, r26
    3fd4:	bb 1b       	sub	r27, r27
    3fd6:	fd 01       	movw	r30, r26
    3fd8:	0d c0       	rjmp	.+26     	; 0x3ff4 <__udivmodsi4_ep>

00003fda <__udivmodsi4_loop>:
    3fda:	aa 1f       	adc	r26, r26
    3fdc:	bb 1f       	adc	r27, r27
    3fde:	ee 1f       	adc	r30, r30
    3fe0:	ff 1f       	adc	r31, r31
    3fe2:	a2 17       	cp	r26, r18
    3fe4:	b3 07       	cpc	r27, r19
    3fe6:	e4 07       	cpc	r30, r20
    3fe8:	f5 07       	cpc	r31, r21
    3fea:	20 f0       	brcs	.+8      	; 0x3ff4 <__udivmodsi4_ep>
    3fec:	a2 1b       	sub	r26, r18
    3fee:	b3 0b       	sbc	r27, r19
    3ff0:	e4 0b       	sbc	r30, r20
    3ff2:	f5 0b       	sbc	r31, r21

00003ff4 <__udivmodsi4_ep>:
    3ff4:	66 1f       	adc	r22, r22
    3ff6:	77 1f       	adc	r23, r23
    3ff8:	88 1f       	adc	r24, r24
    3ffa:	99 1f       	adc	r25, r25
    3ffc:	1a 94       	dec	r1
    3ffe:	69 f7       	brne	.-38     	; 0x3fda <__udivmodsi4_loop>
    4000:	60 95       	com	r22
    4002:	70 95       	com	r23
    4004:	80 95       	com	r24
    4006:	90 95       	com	r25
    4008:	9b 01       	movw	r18, r22
    400a:	ac 01       	movw	r20, r24
    400c:	bd 01       	movw	r22, r26
    400e:	cf 01       	movw	r24, r30
    4010:	08 95       	ret

00004012 <__tablejump2__>:
    4012:	ee 0f       	add	r30, r30
    4014:	ff 1f       	adc	r31, r31
    4016:	05 90       	lpm	r0, Z+
    4018:	f4 91       	lpm	r31, Z
    401a:	e0 2d       	mov	r30, r0
    401c:	09 94       	ijmp

0000401e <__muluhisi3>:
    401e:	0e 94 58 20 	call	0x40b0	; 0x40b0 <__umulhisi3>
    4022:	a5 9f       	mul	r26, r21
    4024:	90 0d       	add	r25, r0
    4026:	b4 9f       	mul	r27, r20
    4028:	90 0d       	add	r25, r0
    402a:	a4 9f       	mul	r26, r20
    402c:	80 0d       	add	r24, r0
    402e:	91 1d       	adc	r25, r1
    4030:	11 24       	eor	r1, r1
    4032:	08 95       	ret

00004034 <__ashrdi3>:
    4034:	97 fb       	bst	r25, 7
    4036:	10 f8       	bld	r1, 0

00004038 <__lshrdi3>:
    4038:	16 94       	lsr	r1
    403a:	00 08       	sbc	r0, r0
    403c:	0f 93       	push	r16
    403e:	08 30       	cpi	r16, 0x08	; 8
    4040:	98 f0       	brcs	.+38     	; 0x4068 <__lshrdi3+0x30>
    4042:	08 50       	subi	r16, 0x08	; 8
    4044:	23 2f       	mov	r18, r19
    4046:	34 2f       	mov	r19, r20
    4048:	45 2f       	mov	r20, r21
    404a:	56 2f       	mov	r21, r22
    404c:	67 2f       	mov	r22, r23
    404e:	78 2f       	mov	r23, r24
    4050:	89 2f       	mov	r24, r25
    4052:	90 2d       	mov	r25, r0
    4054:	f4 cf       	rjmp	.-24     	; 0x403e <__lshrdi3+0x6>
    4056:	05 94       	asr	r0
    4058:	97 95       	ror	r25
    405a:	87 95       	ror	r24
    405c:	77 95       	ror	r23
    405e:	67 95       	ror	r22
    4060:	57 95       	ror	r21
    4062:	47 95       	ror	r20
    4064:	37 95       	ror	r19
    4066:	27 95       	ror	r18
    4068:	0a 95       	dec	r16
    406a:	aa f7       	brpl	.-22     	; 0x4056 <__lshrdi3+0x1e>
    406c:	0f 91       	pop	r16
    406e:	08 95       	ret

00004070 <__adddi3_s8>:
    4070:	00 24       	eor	r0, r0
    4072:	a7 fd       	sbrc	r26, 7
    4074:	00 94       	com	r0
    4076:	2a 0f       	add	r18, r26
    4078:	30 1d       	adc	r19, r0
    407a:	40 1d       	adc	r20, r0
    407c:	50 1d       	adc	r21, r0
    407e:	60 1d       	adc	r22, r0
    4080:	70 1d       	adc	r23, r0
    4082:	80 1d       	adc	r24, r0
    4084:	90 1d       	adc	r25, r0
    4086:	08 95       	ret

00004088 <__udivmodhi4>:
    4088:	aa 1b       	sub	r26, r26
    408a:	bb 1b       	sub	r27, r27
    408c:	51 e1       	ldi	r21, 0x11	; 17
    408e:	07 c0       	rjmp	.+14     	; 0x409e <__udivmodhi4_ep>

00004090 <__udivmodhi4_loop>:
    4090:	aa 1f       	adc	r26, r26
    4092:	bb 1f       	adc	r27, r27
    4094:	a6 17       	cp	r26, r22
    4096:	b7 07       	cpc	r27, r23
    4098:	10 f0       	brcs	.+4      	; 0x409e <__udivmodhi4_ep>
    409a:	a6 1b       	sub	r26, r22
    409c:	b7 0b       	sbc	r27, r23

0000409e <__udivmodhi4_ep>:
    409e:	88 1f       	adc	r24, r24
    40a0:	99 1f       	adc	r25, r25
    40a2:	5a 95       	dec	r21
    40a4:	a9 f7       	brne	.-22     	; 0x4090 <__udivmodhi4_loop>
    40a6:	80 95       	com	r24
    40a8:	90 95       	com	r25
    40aa:	bc 01       	movw	r22, r24
    40ac:	cd 01       	movw	r24, r26
    40ae:	08 95       	ret

000040b0 <__umulhisi3>:
    40b0:	a2 9f       	mul	r26, r18
    40b2:	b0 01       	movw	r22, r0
    40b4:	b3 9f       	mul	r27, r19
    40b6:	c0 01       	movw	r24, r0
    40b8:	a3 9f       	mul	r26, r19
    40ba:	70 0d       	add	r23, r0
    40bc:	81 1d       	adc	r24, r1
    40be:	11 24       	eor	r1, r1
    40c0:	91 1d       	adc	r25, r1
    40c2:	b2 9f       	mul	r27, r18
    40c4:	70 0d       	add	r23, r0
    40c6:	81 1d       	adc	r24, r1
    40c8:	11 24       	eor	r1, r1
    40ca:	91 1d       	adc	r25, r1
    40cc:	08 95       	ret

000040ce <atoi>:
    40ce:	fc 01       	movw	r30, r24
    40d0:	88 27       	eor	r24, r24
    40d2:	99 27       	eor	r25, r25
    40d4:	e8 94       	clt
    40d6:	21 91       	ld	r18, Z+
    40d8:	20 32       	cpi	r18, 0x20	; 32
    40da:	e9 f3       	breq	.-6      	; 0x40d6 <atoi+0x8>
    40dc:	29 30       	cpi	r18, 0x09	; 9
    40de:	10 f0       	brcs	.+4      	; 0x40e4 <atoi+0x16>
    40e0:	2e 30       	cpi	r18, 0x0E	; 14
    40e2:	c8 f3       	brcs	.-14     	; 0x40d6 <atoi+0x8>
    40e4:	2b 32       	cpi	r18, 0x2B	; 43
    40e6:	41 f0       	breq	.+16     	; 0x40f8 <atoi+0x2a>
    40e8:	2d 32       	cpi	r18, 0x2D	; 45
    40ea:	39 f4       	brne	.+14     	; 0x40fa <atoi+0x2c>
    40ec:	68 94       	set
    40ee:	04 c0       	rjmp	.+8      	; 0x40f8 <atoi+0x2a>
    40f0:	0e 94 b2 20 	call	0x4164	; 0x4164 <__mulhi_const_10>
    40f4:	82 0f       	add	r24, r18
    40f6:	91 1d       	adc	r25, r1
    40f8:	21 91       	ld	r18, Z+
    40fa:	20 53       	subi	r18, 0x30	; 48
    40fc:	2a 30       	cpi	r18, 0x0A	; 10
    40fe:	c0 f3       	brcs	.-16     	; 0x40f0 <atoi+0x22>
    4100:	1e f4       	brtc	.+6      	; 0x4108 <atoi+0x3a>
    4102:	90 95       	com	r25
    4104:	81 95       	neg	r24
    4106:	9f 4f       	sbci	r25, 0xFF	; 255
    4108:	08 95       	ret

0000410a <strcpy_P>:
    410a:	fb 01       	movw	r30, r22
    410c:	dc 01       	movw	r26, r24
    410e:	05 90       	lpm	r0, Z+
    4110:	0d 92       	st	X+, r0
    4112:	00 20       	and	r0, r0
    4114:	e1 f7       	brne	.-8      	; 0x410e <strcpy_P+0x4>
    4116:	08 95       	ret

00004118 <memset>:
    4118:	dc 01       	movw	r26, r24
    411a:	01 c0       	rjmp	.+2      	; 0x411e <memset+0x6>
    411c:	6d 93       	st	X+, r22
    411e:	41 50       	subi	r20, 0x01	; 1
    4120:	50 40       	sbci	r21, 0x00	; 0
    4122:	e0 f7       	brcc	.-8      	; 0x411c <memset+0x4>
    4124:	08 95       	ret

00004126 <strcmp>:
    4126:	fb 01       	movw	r30, r22
    4128:	dc 01       	movw	r26, r24
    412a:	8d 91       	ld	r24, X+
    412c:	01 90       	ld	r0, Z+
    412e:	80 19       	sub	r24, r0
    4130:	01 10       	cpse	r0, r1
    4132:	d9 f3       	breq	.-10     	; 0x412a <strcmp+0x4>
    4134:	99 0b       	sbc	r25, r25
    4136:	08 95       	ret

00004138 <itoa>:
    4138:	45 32       	cpi	r20, 0x25	; 37
    413a:	51 05       	cpc	r21, r1
    413c:	20 f4       	brcc	.+8      	; 0x4146 <itoa+0xe>
    413e:	42 30       	cpi	r20, 0x02	; 2
    4140:	10 f0       	brcs	.+4      	; 0x4146 <itoa+0xe>
    4142:	0c 94 a7 20 	jmp	0x414e	; 0x414e <__itoa_ncheck>
    4146:	fb 01       	movw	r30, r22
    4148:	10 82       	st	Z, r1
    414a:	cb 01       	movw	r24, r22
    414c:	08 95       	ret

0000414e <__itoa_ncheck>:
    414e:	bb 27       	eor	r27, r27
    4150:	4a 30       	cpi	r20, 0x0A	; 10
    4152:	31 f4       	brne	.+12     	; 0x4160 <__itoa_ncheck+0x12>
    4154:	99 23       	and	r25, r25
    4156:	22 f4       	brpl	.+8      	; 0x4160 <__itoa_ncheck+0x12>
    4158:	bd e2       	ldi	r27, 0x2D	; 45
    415a:	90 95       	com	r25
    415c:	81 95       	neg	r24
    415e:	9f 4f       	sbci	r25, 0xFF	; 255
    4160:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__utoa_common>

00004164 <__mulhi_const_10>:
    4164:	7a e0       	ldi	r23, 0x0A	; 10
    4166:	97 9f       	mul	r25, r23
    4168:	90 2d       	mov	r25, r0
    416a:	87 9f       	mul	r24, r23
    416c:	80 2d       	mov	r24, r0
    416e:	91 0d       	add	r25, r1
    4170:	11 24       	eor	r1, r1
    4172:	08 95       	ret

00004174 <__utoa_ncheck>:
    4174:	bb 27       	eor	r27, r27

00004176 <__utoa_common>:
    4176:	fb 01       	movw	r30, r22
    4178:	55 27       	eor	r21, r21
    417a:	aa 27       	eor	r26, r26
    417c:	88 0f       	add	r24, r24
    417e:	99 1f       	adc	r25, r25
    4180:	aa 1f       	adc	r26, r26
    4182:	a4 17       	cp	r26, r20
    4184:	10 f0       	brcs	.+4      	; 0x418a <__utoa_common+0x14>
    4186:	a4 1b       	sub	r26, r20
    4188:	83 95       	inc	r24
    418a:	50 51       	subi	r21, 0x10	; 16
    418c:	b9 f7       	brne	.-18     	; 0x417c <__utoa_common+0x6>
    418e:	a0 5d       	subi	r26, 0xD0	; 208
    4190:	aa 33       	cpi	r26, 0x3A	; 58
    4192:	08 f0       	brcs	.+2      	; 0x4196 <__utoa_common+0x20>
    4194:	a9 5d       	subi	r26, 0xD9	; 217
    4196:	a1 93       	st	Z+, r26
    4198:	00 97       	sbiw	r24, 0x00	; 0
    419a:	79 f7       	brne	.-34     	; 0x417a <__utoa_common+0x4>
    419c:	b1 11       	cpse	r27, r1
    419e:	b1 93       	st	Z+, r27
    41a0:	11 92       	st	Z+, r1
    41a2:	cb 01       	movw	r24, r22
    41a4:	0c 94 07 23 	jmp	0x460e	; 0x460e <strrev>

000041a8 <printf>:
    41a8:	a0 e0       	ldi	r26, 0x00	; 0
    41aa:	b0 e0       	ldi	r27, 0x00	; 0
    41ac:	ea ed       	ldi	r30, 0xDA	; 218
    41ae:	f0 e2       	ldi	r31, 0x20	; 32
    41b0:	0c 94 c1 23 	jmp	0x4782	; 0x4782 <__prologue_saves__+0x20>
    41b4:	ae 01       	movw	r20, r28
    41b6:	4b 5f       	subi	r20, 0xFB	; 251
    41b8:	5f 4f       	sbci	r21, 0xFF	; 255
    41ba:	fa 01       	movw	r30, r20
    41bc:	61 91       	ld	r22, Z+
    41be:	71 91       	ld	r23, Z+
    41c0:	af 01       	movw	r20, r30
    41c2:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <__iob+0x2>
    41c6:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <__iob+0x3>
    41ca:	0e 94 10 21 	call	0x4220	; 0x4220 <vfprintf>
    41ce:	e2 e0       	ldi	r30, 0x02	; 2
    41d0:	0c 94 dd 23 	jmp	0x47ba	; 0x47ba <__epilogue_restores__+0x20>

000041d4 <printf_P>:
    41d4:	a0 e0       	ldi	r26, 0x00	; 0
    41d6:	b0 e0       	ldi	r27, 0x00	; 0
    41d8:	e0 ef       	ldi	r30, 0xF0	; 240
    41da:	f0 e2       	ldi	r31, 0x20	; 32
    41dc:	0c 94 bf 23 	jmp	0x477e	; 0x477e <__prologue_saves__+0x1c>
    41e0:	ae 01       	movw	r20, r28
    41e2:	49 5f       	subi	r20, 0xF9	; 249
    41e4:	5f 4f       	sbci	r21, 0xFF	; 255
    41e6:	da 01       	movw	r26, r20
    41e8:	6d 91       	ld	r22, X+
    41ea:	7d 91       	ld	r23, X+
    41ec:	ad 01       	movw	r20, r26
    41ee:	09 e1       	ldi	r16, 0x19	; 25
    41f0:	12 e0       	ldi	r17, 0x02	; 2
    41f2:	f8 01       	movw	r30, r16
    41f4:	82 81       	ldd	r24, Z+2	; 0x02
    41f6:	93 81       	ldd	r25, Z+3	; 0x03
    41f8:	dc 01       	movw	r26, r24
    41fa:	13 96       	adiw	r26, 0x03	; 3
    41fc:	2c 91       	ld	r18, X
    41fe:	13 97       	sbiw	r26, 0x03	; 3
    4200:	28 60       	ori	r18, 0x08	; 8
    4202:	13 96       	adiw	r26, 0x03	; 3
    4204:	2c 93       	st	X, r18
    4206:	0e 94 10 21 	call	0x4220	; 0x4220 <vfprintf>
    420a:	d8 01       	movw	r26, r16
    420c:	12 96       	adiw	r26, 0x02	; 2
    420e:	ed 91       	ld	r30, X+
    4210:	fc 91       	ld	r31, X
    4212:	13 97       	sbiw	r26, 0x03	; 3
    4214:	23 81       	ldd	r18, Z+3	; 0x03
    4216:	27 7f       	andi	r18, 0xF7	; 247
    4218:	23 83       	std	Z+3, r18	; 0x03
    421a:	e4 e0       	ldi	r30, 0x04	; 4
    421c:	0c 94 db 23 	jmp	0x47b6	; 0x47b6 <__epilogue_restores__+0x1c>

00004220 <vfprintf>:
    4220:	ab e0       	ldi	r26, 0x0B	; 11
    4222:	b0 e0       	ldi	r27, 0x00	; 0
    4224:	e6 e1       	ldi	r30, 0x16	; 22
    4226:	f1 e2       	ldi	r31, 0x21	; 33
    4228:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <__prologue_saves__>
    422c:	6c 01       	movw	r12, r24
    422e:	7b 01       	movw	r14, r22
    4230:	8a 01       	movw	r16, r20
    4232:	fc 01       	movw	r30, r24
    4234:	17 82       	std	Z+7, r1	; 0x07
    4236:	16 82       	std	Z+6, r1	; 0x06
    4238:	83 81       	ldd	r24, Z+3	; 0x03
    423a:	81 ff       	sbrs	r24, 1
    423c:	cc c1       	rjmp	.+920    	; 0x45d6 <vfprintf+0x3b6>
    423e:	ce 01       	movw	r24, r28
    4240:	01 96       	adiw	r24, 0x01	; 1
    4242:	3c 01       	movw	r6, r24
    4244:	f6 01       	movw	r30, r12
    4246:	93 81       	ldd	r25, Z+3	; 0x03
    4248:	f7 01       	movw	r30, r14
    424a:	93 fd       	sbrc	r25, 3
    424c:	85 91       	lpm	r24, Z+
    424e:	93 ff       	sbrs	r25, 3
    4250:	81 91       	ld	r24, Z+
    4252:	7f 01       	movw	r14, r30
    4254:	88 23       	and	r24, r24
    4256:	09 f4       	brne	.+2      	; 0x425a <vfprintf+0x3a>
    4258:	ba c1       	rjmp	.+884    	; 0x45ce <vfprintf+0x3ae>
    425a:	85 32       	cpi	r24, 0x25	; 37
    425c:	39 f4       	brne	.+14     	; 0x426c <vfprintf+0x4c>
    425e:	93 fd       	sbrc	r25, 3
    4260:	85 91       	lpm	r24, Z+
    4262:	93 ff       	sbrs	r25, 3
    4264:	81 91       	ld	r24, Z+
    4266:	7f 01       	movw	r14, r30
    4268:	85 32       	cpi	r24, 0x25	; 37
    426a:	29 f4       	brne	.+10     	; 0x4276 <vfprintf+0x56>
    426c:	b6 01       	movw	r22, r12
    426e:	90 e0       	ldi	r25, 0x00	; 0
    4270:	0e 94 17 23 	call	0x462e	; 0x462e <fputc>
    4274:	e7 cf       	rjmp	.-50     	; 0x4244 <vfprintf+0x24>
    4276:	91 2c       	mov	r9, r1
    4278:	21 2c       	mov	r2, r1
    427a:	31 2c       	mov	r3, r1
    427c:	ff e1       	ldi	r31, 0x1F	; 31
    427e:	f3 15       	cp	r31, r3
    4280:	d8 f0       	brcs	.+54     	; 0x42b8 <vfprintf+0x98>
    4282:	8b 32       	cpi	r24, 0x2B	; 43
    4284:	79 f0       	breq	.+30     	; 0x42a4 <vfprintf+0x84>
    4286:	38 f4       	brcc	.+14     	; 0x4296 <vfprintf+0x76>
    4288:	80 32       	cpi	r24, 0x20	; 32
    428a:	79 f0       	breq	.+30     	; 0x42aa <vfprintf+0x8a>
    428c:	83 32       	cpi	r24, 0x23	; 35
    428e:	a1 f4       	brne	.+40     	; 0x42b8 <vfprintf+0x98>
    4290:	23 2d       	mov	r18, r3
    4292:	20 61       	ori	r18, 0x10	; 16
    4294:	1d c0       	rjmp	.+58     	; 0x42d0 <vfprintf+0xb0>
    4296:	8d 32       	cpi	r24, 0x2D	; 45
    4298:	61 f0       	breq	.+24     	; 0x42b2 <vfprintf+0x92>
    429a:	80 33       	cpi	r24, 0x30	; 48
    429c:	69 f4       	brne	.+26     	; 0x42b8 <vfprintf+0x98>
    429e:	23 2d       	mov	r18, r3
    42a0:	21 60       	ori	r18, 0x01	; 1
    42a2:	16 c0       	rjmp	.+44     	; 0x42d0 <vfprintf+0xb0>
    42a4:	83 2d       	mov	r24, r3
    42a6:	82 60       	ori	r24, 0x02	; 2
    42a8:	38 2e       	mov	r3, r24
    42aa:	e3 2d       	mov	r30, r3
    42ac:	e4 60       	ori	r30, 0x04	; 4
    42ae:	3e 2e       	mov	r3, r30
    42b0:	2a c0       	rjmp	.+84     	; 0x4306 <vfprintf+0xe6>
    42b2:	f3 2d       	mov	r31, r3
    42b4:	f8 60       	ori	r31, 0x08	; 8
    42b6:	1d c0       	rjmp	.+58     	; 0x42f2 <vfprintf+0xd2>
    42b8:	37 fc       	sbrc	r3, 7
    42ba:	2d c0       	rjmp	.+90     	; 0x4316 <vfprintf+0xf6>
    42bc:	20 ed       	ldi	r18, 0xD0	; 208
    42be:	28 0f       	add	r18, r24
    42c0:	2a 30       	cpi	r18, 0x0A	; 10
    42c2:	40 f0       	brcs	.+16     	; 0x42d4 <vfprintf+0xb4>
    42c4:	8e 32       	cpi	r24, 0x2E	; 46
    42c6:	b9 f4       	brne	.+46     	; 0x42f6 <vfprintf+0xd6>
    42c8:	36 fc       	sbrc	r3, 6
    42ca:	81 c1       	rjmp	.+770    	; 0x45ce <vfprintf+0x3ae>
    42cc:	23 2d       	mov	r18, r3
    42ce:	20 64       	ori	r18, 0x40	; 64
    42d0:	32 2e       	mov	r3, r18
    42d2:	19 c0       	rjmp	.+50     	; 0x4306 <vfprintf+0xe6>
    42d4:	36 fe       	sbrs	r3, 6
    42d6:	06 c0       	rjmp	.+12     	; 0x42e4 <vfprintf+0xc4>
    42d8:	8a e0       	ldi	r24, 0x0A	; 10
    42da:	98 9e       	mul	r9, r24
    42dc:	20 0d       	add	r18, r0
    42de:	11 24       	eor	r1, r1
    42e0:	92 2e       	mov	r9, r18
    42e2:	11 c0       	rjmp	.+34     	; 0x4306 <vfprintf+0xe6>
    42e4:	ea e0       	ldi	r30, 0x0A	; 10
    42e6:	2e 9e       	mul	r2, r30
    42e8:	20 0d       	add	r18, r0
    42ea:	11 24       	eor	r1, r1
    42ec:	22 2e       	mov	r2, r18
    42ee:	f3 2d       	mov	r31, r3
    42f0:	f0 62       	ori	r31, 0x20	; 32
    42f2:	3f 2e       	mov	r3, r31
    42f4:	08 c0       	rjmp	.+16     	; 0x4306 <vfprintf+0xe6>
    42f6:	8c 36       	cpi	r24, 0x6C	; 108
    42f8:	21 f4       	brne	.+8      	; 0x4302 <vfprintf+0xe2>
    42fa:	83 2d       	mov	r24, r3
    42fc:	80 68       	ori	r24, 0x80	; 128
    42fe:	38 2e       	mov	r3, r24
    4300:	02 c0       	rjmp	.+4      	; 0x4306 <vfprintf+0xe6>
    4302:	88 36       	cpi	r24, 0x68	; 104
    4304:	41 f4       	brne	.+16     	; 0x4316 <vfprintf+0xf6>
    4306:	f7 01       	movw	r30, r14
    4308:	93 fd       	sbrc	r25, 3
    430a:	85 91       	lpm	r24, Z+
    430c:	93 ff       	sbrs	r25, 3
    430e:	81 91       	ld	r24, Z+
    4310:	7f 01       	movw	r14, r30
    4312:	81 11       	cpse	r24, r1
    4314:	b3 cf       	rjmp	.-154    	; 0x427c <vfprintf+0x5c>
    4316:	98 2f       	mov	r25, r24
    4318:	9f 7d       	andi	r25, 0xDF	; 223
    431a:	95 54       	subi	r25, 0x45	; 69
    431c:	93 30       	cpi	r25, 0x03	; 3
    431e:	28 f4       	brcc	.+10     	; 0x432a <vfprintf+0x10a>
    4320:	0c 5f       	subi	r16, 0xFC	; 252
    4322:	1f 4f       	sbci	r17, 0xFF	; 255
    4324:	9f e3       	ldi	r25, 0x3F	; 63
    4326:	99 83       	std	Y+1, r25	; 0x01
    4328:	0d c0       	rjmp	.+26     	; 0x4344 <vfprintf+0x124>
    432a:	83 36       	cpi	r24, 0x63	; 99
    432c:	31 f0       	breq	.+12     	; 0x433a <vfprintf+0x11a>
    432e:	83 37       	cpi	r24, 0x73	; 115
    4330:	71 f0       	breq	.+28     	; 0x434e <vfprintf+0x12e>
    4332:	83 35       	cpi	r24, 0x53	; 83
    4334:	09 f0       	breq	.+2      	; 0x4338 <vfprintf+0x118>
    4336:	59 c0       	rjmp	.+178    	; 0x43ea <vfprintf+0x1ca>
    4338:	21 c0       	rjmp	.+66     	; 0x437c <vfprintf+0x15c>
    433a:	f8 01       	movw	r30, r16
    433c:	80 81       	ld	r24, Z
    433e:	89 83       	std	Y+1, r24	; 0x01
    4340:	0e 5f       	subi	r16, 0xFE	; 254
    4342:	1f 4f       	sbci	r17, 0xFF	; 255
    4344:	88 24       	eor	r8, r8
    4346:	83 94       	inc	r8
    4348:	91 2c       	mov	r9, r1
    434a:	53 01       	movw	r10, r6
    434c:	13 c0       	rjmp	.+38     	; 0x4374 <vfprintf+0x154>
    434e:	28 01       	movw	r4, r16
    4350:	f2 e0       	ldi	r31, 0x02	; 2
    4352:	4f 0e       	add	r4, r31
    4354:	51 1c       	adc	r5, r1
    4356:	f8 01       	movw	r30, r16
    4358:	a0 80       	ld	r10, Z
    435a:	b1 80       	ldd	r11, Z+1	; 0x01
    435c:	36 fe       	sbrs	r3, 6
    435e:	03 c0       	rjmp	.+6      	; 0x4366 <vfprintf+0x146>
    4360:	69 2d       	mov	r22, r9
    4362:	70 e0       	ldi	r23, 0x00	; 0
    4364:	02 c0       	rjmp	.+4      	; 0x436a <vfprintf+0x14a>
    4366:	6f ef       	ldi	r22, 0xFF	; 255
    4368:	7f ef       	ldi	r23, 0xFF	; 255
    436a:	c5 01       	movw	r24, r10
    436c:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <strnlen>
    4370:	4c 01       	movw	r8, r24
    4372:	82 01       	movw	r16, r4
    4374:	f3 2d       	mov	r31, r3
    4376:	ff 77       	andi	r31, 0x7F	; 127
    4378:	3f 2e       	mov	r3, r31
    437a:	16 c0       	rjmp	.+44     	; 0x43a8 <vfprintf+0x188>
    437c:	28 01       	movw	r4, r16
    437e:	22 e0       	ldi	r18, 0x02	; 2
    4380:	42 0e       	add	r4, r18
    4382:	51 1c       	adc	r5, r1
    4384:	f8 01       	movw	r30, r16
    4386:	a0 80       	ld	r10, Z
    4388:	b1 80       	ldd	r11, Z+1	; 0x01
    438a:	36 fe       	sbrs	r3, 6
    438c:	03 c0       	rjmp	.+6      	; 0x4394 <vfprintf+0x174>
    438e:	69 2d       	mov	r22, r9
    4390:	70 e0       	ldi	r23, 0x00	; 0
    4392:	02 c0       	rjmp	.+4      	; 0x4398 <vfprintf+0x178>
    4394:	6f ef       	ldi	r22, 0xFF	; 255
    4396:	7f ef       	ldi	r23, 0xFF	; 255
    4398:	c5 01       	movw	r24, r10
    439a:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <strnlen_P>
    439e:	4c 01       	movw	r8, r24
    43a0:	f3 2d       	mov	r31, r3
    43a2:	f0 68       	ori	r31, 0x80	; 128
    43a4:	3f 2e       	mov	r3, r31
    43a6:	82 01       	movw	r16, r4
    43a8:	33 fc       	sbrc	r3, 3
    43aa:	1b c0       	rjmp	.+54     	; 0x43e2 <vfprintf+0x1c2>
    43ac:	82 2d       	mov	r24, r2
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	88 16       	cp	r8, r24
    43b2:	99 06       	cpc	r9, r25
    43b4:	b0 f4       	brcc	.+44     	; 0x43e2 <vfprintf+0x1c2>
    43b6:	b6 01       	movw	r22, r12
    43b8:	80 e2       	ldi	r24, 0x20	; 32
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	0e 94 17 23 	call	0x462e	; 0x462e <fputc>
    43c0:	2a 94       	dec	r2
    43c2:	f4 cf       	rjmp	.-24     	; 0x43ac <vfprintf+0x18c>
    43c4:	f5 01       	movw	r30, r10
    43c6:	37 fc       	sbrc	r3, 7
    43c8:	85 91       	lpm	r24, Z+
    43ca:	37 fe       	sbrs	r3, 7
    43cc:	81 91       	ld	r24, Z+
    43ce:	5f 01       	movw	r10, r30
    43d0:	b6 01       	movw	r22, r12
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	0e 94 17 23 	call	0x462e	; 0x462e <fputc>
    43d8:	21 10       	cpse	r2, r1
    43da:	2a 94       	dec	r2
    43dc:	21 e0       	ldi	r18, 0x01	; 1
    43de:	82 1a       	sub	r8, r18
    43e0:	91 08       	sbc	r9, r1
    43e2:	81 14       	cp	r8, r1
    43e4:	91 04       	cpc	r9, r1
    43e6:	71 f7       	brne	.-36     	; 0x43c4 <vfprintf+0x1a4>
    43e8:	e8 c0       	rjmp	.+464    	; 0x45ba <vfprintf+0x39a>
    43ea:	84 36       	cpi	r24, 0x64	; 100
    43ec:	11 f0       	breq	.+4      	; 0x43f2 <vfprintf+0x1d2>
    43ee:	89 36       	cpi	r24, 0x69	; 105
    43f0:	41 f5       	brne	.+80     	; 0x4442 <vfprintf+0x222>
    43f2:	f8 01       	movw	r30, r16
    43f4:	37 fe       	sbrs	r3, 7
    43f6:	07 c0       	rjmp	.+14     	; 0x4406 <vfprintf+0x1e6>
    43f8:	60 81       	ld	r22, Z
    43fa:	71 81       	ldd	r23, Z+1	; 0x01
    43fc:	82 81       	ldd	r24, Z+2	; 0x02
    43fe:	93 81       	ldd	r25, Z+3	; 0x03
    4400:	0c 5f       	subi	r16, 0xFC	; 252
    4402:	1f 4f       	sbci	r17, 0xFF	; 255
    4404:	08 c0       	rjmp	.+16     	; 0x4416 <vfprintf+0x1f6>
    4406:	60 81       	ld	r22, Z
    4408:	71 81       	ldd	r23, Z+1	; 0x01
    440a:	07 2e       	mov	r0, r23
    440c:	00 0c       	add	r0, r0
    440e:	88 0b       	sbc	r24, r24
    4410:	99 0b       	sbc	r25, r25
    4412:	0e 5f       	subi	r16, 0xFE	; 254
    4414:	1f 4f       	sbci	r17, 0xFF	; 255
    4416:	f3 2d       	mov	r31, r3
    4418:	ff 76       	andi	r31, 0x6F	; 111
    441a:	3f 2e       	mov	r3, r31
    441c:	97 ff       	sbrs	r25, 7
    441e:	09 c0       	rjmp	.+18     	; 0x4432 <vfprintf+0x212>
    4420:	90 95       	com	r25
    4422:	80 95       	com	r24
    4424:	70 95       	com	r23
    4426:	61 95       	neg	r22
    4428:	7f 4f       	sbci	r23, 0xFF	; 255
    442a:	8f 4f       	sbci	r24, 0xFF	; 255
    442c:	9f 4f       	sbci	r25, 0xFF	; 255
    442e:	f0 68       	ori	r31, 0x80	; 128
    4430:	3f 2e       	mov	r3, r31
    4432:	2a e0       	ldi	r18, 0x0A	; 10
    4434:	30 e0       	ldi	r19, 0x00	; 0
    4436:	a3 01       	movw	r20, r6
    4438:	0e 94 53 23 	call	0x46a6	; 0x46a6 <__ultoa_invert>
    443c:	88 2e       	mov	r8, r24
    443e:	86 18       	sub	r8, r6
    4440:	45 c0       	rjmp	.+138    	; 0x44cc <vfprintf+0x2ac>
    4442:	85 37       	cpi	r24, 0x75	; 117
    4444:	31 f4       	brne	.+12     	; 0x4452 <vfprintf+0x232>
    4446:	23 2d       	mov	r18, r3
    4448:	2f 7e       	andi	r18, 0xEF	; 239
    444a:	b2 2e       	mov	r11, r18
    444c:	2a e0       	ldi	r18, 0x0A	; 10
    444e:	30 e0       	ldi	r19, 0x00	; 0
    4450:	25 c0       	rjmp	.+74     	; 0x449c <vfprintf+0x27c>
    4452:	93 2d       	mov	r25, r3
    4454:	99 7f       	andi	r25, 0xF9	; 249
    4456:	b9 2e       	mov	r11, r25
    4458:	8f 36       	cpi	r24, 0x6F	; 111
    445a:	c1 f0       	breq	.+48     	; 0x448c <vfprintf+0x26c>
    445c:	18 f4       	brcc	.+6      	; 0x4464 <vfprintf+0x244>
    445e:	88 35       	cpi	r24, 0x58	; 88
    4460:	79 f0       	breq	.+30     	; 0x4480 <vfprintf+0x260>
    4462:	b5 c0       	rjmp	.+362    	; 0x45ce <vfprintf+0x3ae>
    4464:	80 37       	cpi	r24, 0x70	; 112
    4466:	19 f0       	breq	.+6      	; 0x446e <vfprintf+0x24e>
    4468:	88 37       	cpi	r24, 0x78	; 120
    446a:	21 f0       	breq	.+8      	; 0x4474 <vfprintf+0x254>
    446c:	b0 c0       	rjmp	.+352    	; 0x45ce <vfprintf+0x3ae>
    446e:	e9 2f       	mov	r30, r25
    4470:	e0 61       	ori	r30, 0x10	; 16
    4472:	be 2e       	mov	r11, r30
    4474:	b4 fe       	sbrs	r11, 4
    4476:	0d c0       	rjmp	.+26     	; 0x4492 <vfprintf+0x272>
    4478:	fb 2d       	mov	r31, r11
    447a:	f4 60       	ori	r31, 0x04	; 4
    447c:	bf 2e       	mov	r11, r31
    447e:	09 c0       	rjmp	.+18     	; 0x4492 <vfprintf+0x272>
    4480:	34 fe       	sbrs	r3, 4
    4482:	0a c0       	rjmp	.+20     	; 0x4498 <vfprintf+0x278>
    4484:	29 2f       	mov	r18, r25
    4486:	26 60       	ori	r18, 0x06	; 6
    4488:	b2 2e       	mov	r11, r18
    448a:	06 c0       	rjmp	.+12     	; 0x4498 <vfprintf+0x278>
    448c:	28 e0       	ldi	r18, 0x08	; 8
    448e:	30 e0       	ldi	r19, 0x00	; 0
    4490:	05 c0       	rjmp	.+10     	; 0x449c <vfprintf+0x27c>
    4492:	20 e1       	ldi	r18, 0x10	; 16
    4494:	30 e0       	ldi	r19, 0x00	; 0
    4496:	02 c0       	rjmp	.+4      	; 0x449c <vfprintf+0x27c>
    4498:	20 e1       	ldi	r18, 0x10	; 16
    449a:	32 e0       	ldi	r19, 0x02	; 2
    449c:	f8 01       	movw	r30, r16
    449e:	b7 fe       	sbrs	r11, 7
    44a0:	07 c0       	rjmp	.+14     	; 0x44b0 <vfprintf+0x290>
    44a2:	60 81       	ld	r22, Z
    44a4:	71 81       	ldd	r23, Z+1	; 0x01
    44a6:	82 81       	ldd	r24, Z+2	; 0x02
    44a8:	93 81       	ldd	r25, Z+3	; 0x03
    44aa:	0c 5f       	subi	r16, 0xFC	; 252
    44ac:	1f 4f       	sbci	r17, 0xFF	; 255
    44ae:	06 c0       	rjmp	.+12     	; 0x44bc <vfprintf+0x29c>
    44b0:	60 81       	ld	r22, Z
    44b2:	71 81       	ldd	r23, Z+1	; 0x01
    44b4:	80 e0       	ldi	r24, 0x00	; 0
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	0e 5f       	subi	r16, 0xFE	; 254
    44ba:	1f 4f       	sbci	r17, 0xFF	; 255
    44bc:	a3 01       	movw	r20, r6
    44be:	0e 94 53 23 	call	0x46a6	; 0x46a6 <__ultoa_invert>
    44c2:	88 2e       	mov	r8, r24
    44c4:	86 18       	sub	r8, r6
    44c6:	fb 2d       	mov	r31, r11
    44c8:	ff 77       	andi	r31, 0x7F	; 127
    44ca:	3f 2e       	mov	r3, r31
    44cc:	36 fe       	sbrs	r3, 6
    44ce:	0d c0       	rjmp	.+26     	; 0x44ea <vfprintf+0x2ca>
    44d0:	23 2d       	mov	r18, r3
    44d2:	2e 7f       	andi	r18, 0xFE	; 254
    44d4:	a2 2e       	mov	r10, r18
    44d6:	89 14       	cp	r8, r9
    44d8:	58 f4       	brcc	.+22     	; 0x44f0 <vfprintf+0x2d0>
    44da:	34 fe       	sbrs	r3, 4
    44dc:	0b c0       	rjmp	.+22     	; 0x44f4 <vfprintf+0x2d4>
    44de:	32 fc       	sbrc	r3, 2
    44e0:	09 c0       	rjmp	.+18     	; 0x44f4 <vfprintf+0x2d4>
    44e2:	83 2d       	mov	r24, r3
    44e4:	8e 7e       	andi	r24, 0xEE	; 238
    44e6:	a8 2e       	mov	r10, r24
    44e8:	05 c0       	rjmp	.+10     	; 0x44f4 <vfprintf+0x2d4>
    44ea:	b8 2c       	mov	r11, r8
    44ec:	a3 2c       	mov	r10, r3
    44ee:	03 c0       	rjmp	.+6      	; 0x44f6 <vfprintf+0x2d6>
    44f0:	b8 2c       	mov	r11, r8
    44f2:	01 c0       	rjmp	.+2      	; 0x44f6 <vfprintf+0x2d6>
    44f4:	b9 2c       	mov	r11, r9
    44f6:	a4 fe       	sbrs	r10, 4
    44f8:	0f c0       	rjmp	.+30     	; 0x4518 <vfprintf+0x2f8>
    44fa:	fe 01       	movw	r30, r28
    44fc:	e8 0d       	add	r30, r8
    44fe:	f1 1d       	adc	r31, r1
    4500:	80 81       	ld	r24, Z
    4502:	80 33       	cpi	r24, 0x30	; 48
    4504:	21 f4       	brne	.+8      	; 0x450e <vfprintf+0x2ee>
    4506:	9a 2d       	mov	r25, r10
    4508:	99 7e       	andi	r25, 0xE9	; 233
    450a:	a9 2e       	mov	r10, r25
    450c:	09 c0       	rjmp	.+18     	; 0x4520 <vfprintf+0x300>
    450e:	a2 fe       	sbrs	r10, 2
    4510:	06 c0       	rjmp	.+12     	; 0x451e <vfprintf+0x2fe>
    4512:	b3 94       	inc	r11
    4514:	b3 94       	inc	r11
    4516:	04 c0       	rjmp	.+8      	; 0x4520 <vfprintf+0x300>
    4518:	8a 2d       	mov	r24, r10
    451a:	86 78       	andi	r24, 0x86	; 134
    451c:	09 f0       	breq	.+2      	; 0x4520 <vfprintf+0x300>
    451e:	b3 94       	inc	r11
    4520:	a3 fc       	sbrc	r10, 3
    4522:	11 c0       	rjmp	.+34     	; 0x4546 <vfprintf+0x326>
    4524:	a0 fe       	sbrs	r10, 0
    4526:	06 c0       	rjmp	.+12     	; 0x4534 <vfprintf+0x314>
    4528:	b2 14       	cp	r11, r2
    452a:	88 f4       	brcc	.+34     	; 0x454e <vfprintf+0x32e>
    452c:	28 0c       	add	r2, r8
    452e:	92 2c       	mov	r9, r2
    4530:	9b 18       	sub	r9, r11
    4532:	0e c0       	rjmp	.+28     	; 0x4550 <vfprintf+0x330>
    4534:	b2 14       	cp	r11, r2
    4536:	60 f4       	brcc	.+24     	; 0x4550 <vfprintf+0x330>
    4538:	b6 01       	movw	r22, r12
    453a:	80 e2       	ldi	r24, 0x20	; 32
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	0e 94 17 23 	call	0x462e	; 0x462e <fputc>
    4542:	b3 94       	inc	r11
    4544:	f7 cf       	rjmp	.-18     	; 0x4534 <vfprintf+0x314>
    4546:	b2 14       	cp	r11, r2
    4548:	18 f4       	brcc	.+6      	; 0x4550 <vfprintf+0x330>
    454a:	2b 18       	sub	r2, r11
    454c:	02 c0       	rjmp	.+4      	; 0x4552 <vfprintf+0x332>
    454e:	98 2c       	mov	r9, r8
    4550:	21 2c       	mov	r2, r1
    4552:	a4 fe       	sbrs	r10, 4
    4554:	10 c0       	rjmp	.+32     	; 0x4576 <vfprintf+0x356>
    4556:	b6 01       	movw	r22, r12
    4558:	80 e3       	ldi	r24, 0x30	; 48
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	0e 94 17 23 	call	0x462e	; 0x462e <fputc>
    4560:	a2 fe       	sbrs	r10, 2
    4562:	17 c0       	rjmp	.+46     	; 0x4592 <vfprintf+0x372>
    4564:	a1 fc       	sbrc	r10, 1
    4566:	03 c0       	rjmp	.+6      	; 0x456e <vfprintf+0x34e>
    4568:	88 e7       	ldi	r24, 0x78	; 120
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	02 c0       	rjmp	.+4      	; 0x4572 <vfprintf+0x352>
    456e:	88 e5       	ldi	r24, 0x58	; 88
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	b6 01       	movw	r22, r12
    4574:	0c c0       	rjmp	.+24     	; 0x458e <vfprintf+0x36e>
    4576:	8a 2d       	mov	r24, r10
    4578:	86 78       	andi	r24, 0x86	; 134
    457a:	59 f0       	breq	.+22     	; 0x4592 <vfprintf+0x372>
    457c:	a1 fe       	sbrs	r10, 1
    457e:	02 c0       	rjmp	.+4      	; 0x4584 <vfprintf+0x364>
    4580:	8b e2       	ldi	r24, 0x2B	; 43
    4582:	01 c0       	rjmp	.+2      	; 0x4586 <vfprintf+0x366>
    4584:	80 e2       	ldi	r24, 0x20	; 32
    4586:	a7 fc       	sbrc	r10, 7
    4588:	8d e2       	ldi	r24, 0x2D	; 45
    458a:	b6 01       	movw	r22, r12
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	0e 94 17 23 	call	0x462e	; 0x462e <fputc>
    4592:	89 14       	cp	r8, r9
    4594:	38 f4       	brcc	.+14     	; 0x45a4 <vfprintf+0x384>
    4596:	b6 01       	movw	r22, r12
    4598:	80 e3       	ldi	r24, 0x30	; 48
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	0e 94 17 23 	call	0x462e	; 0x462e <fputc>
    45a0:	9a 94       	dec	r9
    45a2:	f7 cf       	rjmp	.-18     	; 0x4592 <vfprintf+0x372>
    45a4:	8a 94       	dec	r8
    45a6:	f3 01       	movw	r30, r6
    45a8:	e8 0d       	add	r30, r8
    45aa:	f1 1d       	adc	r31, r1
    45ac:	80 81       	ld	r24, Z
    45ae:	b6 01       	movw	r22, r12
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	0e 94 17 23 	call	0x462e	; 0x462e <fputc>
    45b6:	81 10       	cpse	r8, r1
    45b8:	f5 cf       	rjmp	.-22     	; 0x45a4 <vfprintf+0x384>
    45ba:	22 20       	and	r2, r2
    45bc:	09 f4       	brne	.+2      	; 0x45c0 <vfprintf+0x3a0>
    45be:	42 ce       	rjmp	.-892    	; 0x4244 <vfprintf+0x24>
    45c0:	b6 01       	movw	r22, r12
    45c2:	80 e2       	ldi	r24, 0x20	; 32
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	0e 94 17 23 	call	0x462e	; 0x462e <fputc>
    45ca:	2a 94       	dec	r2
    45cc:	f6 cf       	rjmp	.-20     	; 0x45ba <vfprintf+0x39a>
    45ce:	f6 01       	movw	r30, r12
    45d0:	86 81       	ldd	r24, Z+6	; 0x06
    45d2:	97 81       	ldd	r25, Z+7	; 0x07
    45d4:	02 c0       	rjmp	.+4      	; 0x45da <vfprintf+0x3ba>
    45d6:	8f ef       	ldi	r24, 0xFF	; 255
    45d8:	9f ef       	ldi	r25, 0xFF	; 255
    45da:	2b 96       	adiw	r28, 0x0b	; 11
    45dc:	e2 e1       	ldi	r30, 0x12	; 18
    45de:	0c 94 cd 23 	jmp	0x479a	; 0x479a <__epilogue_restores__>

000045e2 <strnlen_P>:
    45e2:	fc 01       	movw	r30, r24
    45e4:	05 90       	lpm	r0, Z+
    45e6:	61 50       	subi	r22, 0x01	; 1
    45e8:	70 40       	sbci	r23, 0x00	; 0
    45ea:	01 10       	cpse	r0, r1
    45ec:	d8 f7       	brcc	.-10     	; 0x45e4 <strnlen_P+0x2>
    45ee:	80 95       	com	r24
    45f0:	90 95       	com	r25
    45f2:	8e 0f       	add	r24, r30
    45f4:	9f 1f       	adc	r25, r31
    45f6:	08 95       	ret

000045f8 <strnlen>:
    45f8:	fc 01       	movw	r30, r24
    45fa:	61 50       	subi	r22, 0x01	; 1
    45fc:	70 40       	sbci	r23, 0x00	; 0
    45fe:	01 90       	ld	r0, Z+
    4600:	01 10       	cpse	r0, r1
    4602:	d8 f7       	brcc	.-10     	; 0x45fa <strnlen+0x2>
    4604:	80 95       	com	r24
    4606:	90 95       	com	r25
    4608:	8e 0f       	add	r24, r30
    460a:	9f 1f       	adc	r25, r31
    460c:	08 95       	ret

0000460e <strrev>:
    460e:	dc 01       	movw	r26, r24
    4610:	fc 01       	movw	r30, r24
    4612:	67 2f       	mov	r22, r23
    4614:	71 91       	ld	r23, Z+
    4616:	77 23       	and	r23, r23
    4618:	e1 f7       	brne	.-8      	; 0x4612 <strrev+0x4>
    461a:	32 97       	sbiw	r30, 0x02	; 2
    461c:	04 c0       	rjmp	.+8      	; 0x4626 <strrev+0x18>
    461e:	7c 91       	ld	r23, X
    4620:	6d 93       	st	X+, r22
    4622:	70 83       	st	Z, r23
    4624:	62 91       	ld	r22, -Z
    4626:	ae 17       	cp	r26, r30
    4628:	bf 07       	cpc	r27, r31
    462a:	c8 f3       	brcs	.-14     	; 0x461e <strrev+0x10>
    462c:	08 95       	ret

0000462e <fputc>:
    462e:	0f 93       	push	r16
    4630:	1f 93       	push	r17
    4632:	cf 93       	push	r28
    4634:	df 93       	push	r29
    4636:	fb 01       	movw	r30, r22
    4638:	23 81       	ldd	r18, Z+3	; 0x03
    463a:	21 fd       	sbrc	r18, 1
    463c:	03 c0       	rjmp	.+6      	; 0x4644 <fputc+0x16>
    463e:	8f ef       	ldi	r24, 0xFF	; 255
    4640:	9f ef       	ldi	r25, 0xFF	; 255
    4642:	2c c0       	rjmp	.+88     	; 0x469c <fputc+0x6e>
    4644:	22 ff       	sbrs	r18, 2
    4646:	16 c0       	rjmp	.+44     	; 0x4674 <fputc+0x46>
    4648:	46 81       	ldd	r20, Z+6	; 0x06
    464a:	57 81       	ldd	r21, Z+7	; 0x07
    464c:	24 81       	ldd	r18, Z+4	; 0x04
    464e:	35 81       	ldd	r19, Z+5	; 0x05
    4650:	42 17       	cp	r20, r18
    4652:	53 07       	cpc	r21, r19
    4654:	44 f4       	brge	.+16     	; 0x4666 <fputc+0x38>
    4656:	a0 81       	ld	r26, Z
    4658:	b1 81       	ldd	r27, Z+1	; 0x01
    465a:	9d 01       	movw	r18, r26
    465c:	2f 5f       	subi	r18, 0xFF	; 255
    465e:	3f 4f       	sbci	r19, 0xFF	; 255
    4660:	31 83       	std	Z+1, r19	; 0x01
    4662:	20 83       	st	Z, r18
    4664:	8c 93       	st	X, r24
    4666:	26 81       	ldd	r18, Z+6	; 0x06
    4668:	37 81       	ldd	r19, Z+7	; 0x07
    466a:	2f 5f       	subi	r18, 0xFF	; 255
    466c:	3f 4f       	sbci	r19, 0xFF	; 255
    466e:	37 83       	std	Z+7, r19	; 0x07
    4670:	26 83       	std	Z+6, r18	; 0x06
    4672:	14 c0       	rjmp	.+40     	; 0x469c <fputc+0x6e>
    4674:	8b 01       	movw	r16, r22
    4676:	ec 01       	movw	r28, r24
    4678:	fb 01       	movw	r30, r22
    467a:	00 84       	ldd	r0, Z+8	; 0x08
    467c:	f1 85       	ldd	r31, Z+9	; 0x09
    467e:	e0 2d       	mov	r30, r0
    4680:	09 95       	icall
    4682:	89 2b       	or	r24, r25
    4684:	e1 f6       	brne	.-72     	; 0x463e <fputc+0x10>
    4686:	d8 01       	movw	r26, r16
    4688:	16 96       	adiw	r26, 0x06	; 6
    468a:	8d 91       	ld	r24, X+
    468c:	9c 91       	ld	r25, X
    468e:	17 97       	sbiw	r26, 0x07	; 7
    4690:	01 96       	adiw	r24, 0x01	; 1
    4692:	17 96       	adiw	r26, 0x07	; 7
    4694:	9c 93       	st	X, r25
    4696:	8e 93       	st	-X, r24
    4698:	16 97       	sbiw	r26, 0x06	; 6
    469a:	ce 01       	movw	r24, r28
    469c:	df 91       	pop	r29
    469e:	cf 91       	pop	r28
    46a0:	1f 91       	pop	r17
    46a2:	0f 91       	pop	r16
    46a4:	08 95       	ret

000046a6 <__ultoa_invert>:
    46a6:	fa 01       	movw	r30, r20
    46a8:	aa 27       	eor	r26, r26
    46aa:	28 30       	cpi	r18, 0x08	; 8
    46ac:	51 f1       	breq	.+84     	; 0x4702 <__ultoa_invert+0x5c>
    46ae:	20 31       	cpi	r18, 0x10	; 16
    46b0:	81 f1       	breq	.+96     	; 0x4712 <__ultoa_invert+0x6c>
    46b2:	e8 94       	clt
    46b4:	6f 93       	push	r22
    46b6:	6e 7f       	andi	r22, 0xFE	; 254
    46b8:	6e 5f       	subi	r22, 0xFE	; 254
    46ba:	7f 4f       	sbci	r23, 0xFF	; 255
    46bc:	8f 4f       	sbci	r24, 0xFF	; 255
    46be:	9f 4f       	sbci	r25, 0xFF	; 255
    46c0:	af 4f       	sbci	r26, 0xFF	; 255
    46c2:	b1 e0       	ldi	r27, 0x01	; 1
    46c4:	3e d0       	rcall	.+124    	; 0x4742 <__ultoa_invert+0x9c>
    46c6:	b4 e0       	ldi	r27, 0x04	; 4
    46c8:	3c d0       	rcall	.+120    	; 0x4742 <__ultoa_invert+0x9c>
    46ca:	67 0f       	add	r22, r23
    46cc:	78 1f       	adc	r23, r24
    46ce:	89 1f       	adc	r24, r25
    46d0:	9a 1f       	adc	r25, r26
    46d2:	a1 1d       	adc	r26, r1
    46d4:	68 0f       	add	r22, r24
    46d6:	79 1f       	adc	r23, r25
    46d8:	8a 1f       	adc	r24, r26
    46da:	91 1d       	adc	r25, r1
    46dc:	a1 1d       	adc	r26, r1
    46de:	6a 0f       	add	r22, r26
    46e0:	71 1d       	adc	r23, r1
    46e2:	81 1d       	adc	r24, r1
    46e4:	91 1d       	adc	r25, r1
    46e6:	a1 1d       	adc	r26, r1
    46e8:	20 d0       	rcall	.+64     	; 0x472a <__ultoa_invert+0x84>
    46ea:	09 f4       	brne	.+2      	; 0x46ee <__ultoa_invert+0x48>
    46ec:	68 94       	set
    46ee:	3f 91       	pop	r19
    46f0:	2a e0       	ldi	r18, 0x0A	; 10
    46f2:	26 9f       	mul	r18, r22
    46f4:	11 24       	eor	r1, r1
    46f6:	30 19       	sub	r19, r0
    46f8:	30 5d       	subi	r19, 0xD0	; 208
    46fa:	31 93       	st	Z+, r19
    46fc:	de f6       	brtc	.-74     	; 0x46b4 <__ultoa_invert+0xe>
    46fe:	cf 01       	movw	r24, r30
    4700:	08 95       	ret
    4702:	46 2f       	mov	r20, r22
    4704:	47 70       	andi	r20, 0x07	; 7
    4706:	40 5d       	subi	r20, 0xD0	; 208
    4708:	41 93       	st	Z+, r20
    470a:	b3 e0       	ldi	r27, 0x03	; 3
    470c:	0f d0       	rcall	.+30     	; 0x472c <__ultoa_invert+0x86>
    470e:	c9 f7       	brne	.-14     	; 0x4702 <__ultoa_invert+0x5c>
    4710:	f6 cf       	rjmp	.-20     	; 0x46fe <__ultoa_invert+0x58>
    4712:	46 2f       	mov	r20, r22
    4714:	4f 70       	andi	r20, 0x0F	; 15
    4716:	40 5d       	subi	r20, 0xD0	; 208
    4718:	4a 33       	cpi	r20, 0x3A	; 58
    471a:	18 f0       	brcs	.+6      	; 0x4722 <__ultoa_invert+0x7c>
    471c:	49 5d       	subi	r20, 0xD9	; 217
    471e:	31 fd       	sbrc	r19, 1
    4720:	40 52       	subi	r20, 0x20	; 32
    4722:	41 93       	st	Z+, r20
    4724:	02 d0       	rcall	.+4      	; 0x472a <__ultoa_invert+0x84>
    4726:	a9 f7       	brne	.-22     	; 0x4712 <__ultoa_invert+0x6c>
    4728:	ea cf       	rjmp	.-44     	; 0x46fe <__ultoa_invert+0x58>
    472a:	b4 e0       	ldi	r27, 0x04	; 4
    472c:	a6 95       	lsr	r26
    472e:	97 95       	ror	r25
    4730:	87 95       	ror	r24
    4732:	77 95       	ror	r23
    4734:	67 95       	ror	r22
    4736:	ba 95       	dec	r27
    4738:	c9 f7       	brne	.-14     	; 0x472c <__ultoa_invert+0x86>
    473a:	00 97       	sbiw	r24, 0x00	; 0
    473c:	61 05       	cpc	r22, r1
    473e:	71 05       	cpc	r23, r1
    4740:	08 95       	ret
    4742:	9b 01       	movw	r18, r22
    4744:	ac 01       	movw	r20, r24
    4746:	0a 2e       	mov	r0, r26
    4748:	06 94       	lsr	r0
    474a:	57 95       	ror	r21
    474c:	47 95       	ror	r20
    474e:	37 95       	ror	r19
    4750:	27 95       	ror	r18
    4752:	ba 95       	dec	r27
    4754:	c9 f7       	brne	.-14     	; 0x4748 <__ultoa_invert+0xa2>
    4756:	62 0f       	add	r22, r18
    4758:	73 1f       	adc	r23, r19
    475a:	84 1f       	adc	r24, r20
    475c:	95 1f       	adc	r25, r21
    475e:	a0 1d       	adc	r26, r0
    4760:	08 95       	ret

00004762 <__prologue_saves__>:
    4762:	2f 92       	push	r2
    4764:	3f 92       	push	r3
    4766:	4f 92       	push	r4
    4768:	5f 92       	push	r5
    476a:	6f 92       	push	r6
    476c:	7f 92       	push	r7
    476e:	8f 92       	push	r8
    4770:	9f 92       	push	r9
    4772:	af 92       	push	r10
    4774:	bf 92       	push	r11
    4776:	cf 92       	push	r12
    4778:	df 92       	push	r13
    477a:	ef 92       	push	r14
    477c:	ff 92       	push	r15
    477e:	0f 93       	push	r16
    4780:	1f 93       	push	r17
    4782:	cf 93       	push	r28
    4784:	df 93       	push	r29
    4786:	cd b7       	in	r28, 0x3d	; 61
    4788:	de b7       	in	r29, 0x3e	; 62
    478a:	ca 1b       	sub	r28, r26
    478c:	db 0b       	sbc	r29, r27
    478e:	0f b6       	in	r0, 0x3f	; 63
    4790:	f8 94       	cli
    4792:	de bf       	out	0x3e, r29	; 62
    4794:	0f be       	out	0x3f, r0	; 63
    4796:	cd bf       	out	0x3d, r28	; 61
    4798:	09 94       	ijmp

0000479a <__epilogue_restores__>:
    479a:	2a 88       	ldd	r2, Y+18	; 0x12
    479c:	39 88       	ldd	r3, Y+17	; 0x11
    479e:	48 88       	ldd	r4, Y+16	; 0x10
    47a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    47a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    47a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    47a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    47a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    47aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    47ac:	b9 84       	ldd	r11, Y+9	; 0x09
    47ae:	c8 84       	ldd	r12, Y+8	; 0x08
    47b0:	df 80       	ldd	r13, Y+7	; 0x07
    47b2:	ee 80       	ldd	r14, Y+6	; 0x06
    47b4:	fd 80       	ldd	r15, Y+5	; 0x05
    47b6:	0c 81       	ldd	r16, Y+4	; 0x04
    47b8:	1b 81       	ldd	r17, Y+3	; 0x03
    47ba:	aa 81       	ldd	r26, Y+2	; 0x02
    47bc:	b9 81       	ldd	r27, Y+1	; 0x01
    47be:	ce 0f       	add	r28, r30
    47c0:	d1 1d       	adc	r29, r1
    47c2:	0f b6       	in	r0, 0x3f	; 63
    47c4:	f8 94       	cli
    47c6:	de bf       	out	0x3e, r29	; 62
    47c8:	0f be       	out	0x3f, r0	; 63
    47ca:	cd bf       	out	0x3d, r28	; 61
    47cc:	ed 01       	movw	r28, r26
    47ce:	08 95       	ret

000047d0 <_exit>:
    47d0:	f8 94       	cli

000047d2 <__stop_program>:
    47d2:	ff cf       	rjmp	.-2      	; 0x47d2 <__stop_program>
