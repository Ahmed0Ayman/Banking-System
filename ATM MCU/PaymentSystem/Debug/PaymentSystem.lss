
PaymentSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  000045b0  00004644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000098  008001a8  008001a8  0000478c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000478c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000047e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000608  00000000  00000000  00004824  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000895a  00000000  00000000  00004e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020ae  00000000  00000000  0000d786  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006fa0  00000000  00000000  0000f834  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000123c  00000000  00000000  000167d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000bec4  00000000  00000000  00017a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004da7  00000000  00000000  000238d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000538  00000000  00000000  0002867b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000504a  00000000  00000000  00028bb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__ctors_end>
       4:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__vector_1>
       8:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__vector_2>
       c:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__vector_3>
      10:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__bad_interrupt>
      14:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__bad_interrupt>
      18:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__bad_interrupt>
      1c:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__bad_interrupt>
      20:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__bad_interrupt>
      24:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__vector_9>
      28:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__vector_10>
      2c:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__bad_interrupt>
      30:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__bad_interrupt>
      34:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__bad_interrupt>
      38:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__bad_interrupt>
      3c:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__bad_interrupt>
      40:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__vector_16>
      44:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__bad_interrupt>
      48:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__bad_interrupt>
      4c:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__bad_interrupt>
      50:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__bad_interrupt>
      54:	51 0c       	add	r5, r1
      56:	54 0c       	add	r5, r4
      58:	57 0c       	add	r5, r7
      5a:	5a 0c       	add	r5, r10
      5c:	5d 0c       	add	r5, r13
      5e:	8e 0c       	add	r8, r14
      60:	9c 0c       	add	r9, r12
      62:	9f 0c       	add	r9, r15

00000064 <__trampolines_end>:
      64:	77 65       	ori	r23, 0x57	; 87
      66:	6c 63       	ori	r22, 0x3C	; 60
      68:	6f 6d       	ori	r22, 0xDF	; 223
      6a:	65 00       	.word	0x0065	; ????

0000006c <__c.3103>:
      6c:	53 77 69 74 63 68 69 6e 67 20 74 6f 20 4f 50 45     Switching to OPE
      7c:	52 41 54 49 4f 4e 20 6d 6f 64 65 00                 RATION mode.

00000088 <__c.3101>:
      88:	53 77 69 74 63 68 69 6e 67 20 74 6f 20 70 72 6f     Switching to pro
      98:	67 72 61 6d 6d 69 6e 67 20 6d 6f 64 65 00           gramming mode.

000000a6 <__c.3096>:
      a6:	57 72 6f 6e 67 20 50 61 73 73 77 6f 72 64 20 21     Wrong Password !
      b6:	21 21 00                                            !!.

000000b9 <__c.3094>:
      b9:	45 6e 74 65 72 20 59 6f 75 72 20 50 61 73 73 77     Enter Your Passw
      c9:	6f 72 64 20 3a 00                                   ord :.

000000cf <__c.3091>:
      cf:	57 72 6f 6e 67 20 43 6f 6d 6d 61 6e 64 20 50 6c     Wrong Command Pl
      df:	65 61 73 65 20 54 72 79 20 61 67 61 69 6e 00        ease Try again.

000000ee <__c.3088>:
      ee:	50 6c 65 61 73 65 20 45 6e 74 65 72 20 43 6f 6d     Please Enter Com
      fe:	6d 61 6e 64 20 63 68 6f 69 63 65 00                 mand choice.

0000010a <__c.3343>:
     10a:	4c 4f 43 4b 45 44 00                                LOCKED.

00000111 <__c.3345>:
     111:	50 6c 65 61 73 65 20 43 61 6c 6c 20 58 58 58 58     Please Call XXXX
	...

00000122 <__c.3333>:
     122:	43 41 52 44 00                                      CARD.

00000127 <__c.3335>:
     127:	4e 4f 54 20 52 45 41 44 59 00                       NOT READY.

00000131 <__c.3326>:
     131:	54 68 61 6e 6b 20 59 6f 75 20 20 20 00              Thank You   .

0000013e <__c.3318>:
     13e:	57 72 6f 6e 67 20 43 6f 6d 6d 61 6e 64 21 21 21     Wrong Command!!!
	...

0000014f <__c.3309>:
     14f:	45 4e 44 20 4f 46 20 53 45 4c 45 43 54 49 4f 4e     END OF SELECTION
     15f:	20 21 21 21 00                                       !!!.

00000164 <__c.3305>:
     164:	31 2d 20 54 72 79 20 61 6e 6f 74 68 65 72 20 54     1- Try another T
     174:	72 61 6e 73 61 63 74 69 6f 6e 20 20 20 00           ransaction   .

00000182 <__c.3307>:
     182:	32 2d 20 45 78 69 74 20 20 00                       2- Exit  .

0000018c <__c.3303>:
     18c:	50 6c 65 61 73 65 20 43 68 6f 6f 73 65 20 6f 6e     Please Choose on
     19c:	65 20 6f 66 20 74 68 65 20 66 6f 6c 6c 6f 77 69     e of the followi
     1ac:	6e 67 20 43 6f 6d 6d 61 6e 64 73 20 00              ng Commands .

000001b9 <__c.3296>:
     1b9:	4e 6f 74 20 65 78 69 73 74 20 43 61 72 64 20 44     Not exist Card D
     1c9:	61 74 61 00                                         ata.

000001cd <__c.3294>:
     1cd:	54 68 69 73 20 63 61 72 64 20 49 73 20 45 78 69     This card Is Exi
     1dd:	73 74 00                                            st.

000001e0 <__c.3162>:
     1e0:	4e 6f 74 20 65 78 69 73 74 20 43 61 72 64 20 44     Not exist Card D
     1f0:	61 74 61 00                                         ata.

000001f4 <__c.3160>:
     1f4:	54 68 69 73 20 63 61 72 64 20 49 73 20 45 78 69     This card Is Exi
     204:	73 74 00                                            st.

00000207 <__c.3158>:
     207:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 43 61 72     Please enter Car
     217:	64 20 50 41 4e 00                                   d PAN.

0000021d <__c.3152>:
     21d:	4e 6f 74 20 65 78 69 73 74 20 43 61 72 64 20 44     Not exist Card D
     22d:	61 74 61 20 3a 00                                   ata :.

00000233 <__c.3150>:
     233:	57 61 69 74 20 55 6e 74 69 6c 20 72 65 6d 6f 76     Wait Until remov
     243:	65 20 74 68 69 73 20 43 61 72 64 20 44 61 74 61     e this Card Data
     253:	20 3a 00                                             :.

00000256 <__c.3148>:
     256:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 43 61 72     Please enter Car
     266:	64 20 50 41 4e 20 3a 00                             d PAN :.

0000026e <__c.3142>:
     26e:	74 68 69 73 20 63 61 72 64 20 61 6c 72 65 61 64     this card alread
     27e:	79 20 65 78 69 73 74 20 21 21 21 00                 y exist !!!.

0000028a <__c.3140>:
     28a:	54 68 65 72 65 20 69 73 20 6e 6f 20 65 6e 6f 75     There is no enou
     29a:	67 68 20 73 70 61 63 65 20 21 21 21 00              gh space !!!.

000002a7 <__c.3138>:
     2a7:	47 72 65 61 74 20 61 20 6e 65 77 20 43 61 72 64     Great a new Card
     2b7:	20 61 64 64 65 64 20 73 75 63 63 65 73 73 66 75      added successfu
     2c7:	6c 6c 79 00                                         lly.

000002cb <__c.3136>:
     2cb:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 43 61 72     Please enter Car
     2db:	64 20 54 6f 74 61 6c 20 42 61 6c 61 6e 63 65 20     d Total Balance 
	...

000002ec <__c.3132>:
     2ec:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 34 20 4e     Please enter 4 N
     2fc:	75 6d 62 65 72 73 20 6f 6e 6c 79 20 00              umbers only .

00000309 <__c.3127>:
     309:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 43 61 72     Please enter Car
     319:	64 20 50 49 4e 20 20 3a 20 20 00                    d PIN  :  .

00000324 <__c.3123>:
     324:	21 21 21 21 21 21 50 6c 65 61 73 65 20 65 6e 74     !!!!!!Please ent
     334:	65 72 20 39 20 4e 75 6d 62 65 72 73 20 6f 6e 6c     er 9 Numbers onl
     344:	79 20 21 21 21 21 21 21 21 00                       y !!!!!!!.

0000034e <__c.3118>:
     34e:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 43 61 72     Please enter Car
     35e:	64 20 50 41 4e 20 20 3a 20 20 00                    d PAN  :  .

00000369 <__c.3116>:
     369:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 43 61 72     Please enter Car
     379:	64 20 48 6f 6c 64 65 72 20 4e 61 6d 65 20 20 00     d Holder Name  .

00000389 <__c.3107>:
     389:	0a 00                                               ..

0000038b <__c.3105>:
     38b:	20 0a 00                                             ..

0000038e <__c.3103>:
     38e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     39e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3ae:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3be:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

000003ce <__c.3101>:
     3ce:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3de:	2a 2a 2a 20 45 4e 44 20 4f 46 20 53 45 4c 45 43     *** END OF SELEC
     3ee:	54 49 4f 4e 20 21 21 21 2a 2a 2a 2a 2a 2a 2a 2a     TION !!!********
     3fe:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

0000040e <__c.3099>:
     40e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     41e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     42e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     43e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

0000044e <__c.3097>:
     44e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 38 2d     ************* 8-
     45e:	20 45 78 69 74 20 50 72 6f 67 72 61 6d 6d 69 6e      Exit Programmin
     46e:	67 20 6d 6f 64 65 20 2a 2a 2a 2a 2a 2a 2a 2a 2a     g mode *********
     47e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

0000048e <__c.3095>:
     48e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 37 2d     ************* 7-
     49e:	20 41 64 6d 69 6e 20 4d 6f 64 69 66 79 20 44 61      Admin Modify Da
     4ae:	74 61 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ta *************
     4be:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

000004ce <__c.3093>:
     4ce:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 36 2d     ************* 6-
     4de:	20 52 65 73 65 74 20 44 61 74 61 20 42 61 73 65      Reset Data Base
     4ee:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     4fe:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

0000050e <__c.3091>:
     50e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 35 2d     ************* 5-
     51e:	20 54 6f 74 61 6c 20 4e 55 4d 20 6f 66 20 43 75      Total NUM of Cu
     52e:	72 72 65 6e 74 20 43 41 52 44 73 20 2a 2a 2a 2a     rrent CARDs ****
     53e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

0000054e <__c.3089>:
     54e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 34 2d     ************* 4-
     55e:	20 53 65 61 72 63 68 20 57 69 74 68 20 43 61 72      Search With Car
     56e:	64 20 48 6f 6c 64 65 72 20 4e 61 6d 65 20 2a 2a     d Holder Name **
     57e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

0000058e <__c.3087>:
     58e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 33 2d     ************* 3-
     59e:	20 53 65 61 72 63 68 20 46 6f 72 20 43 61 72 64      Search For Card
     5ae:	20 57 69 74 68 20 50 41 4e 20 2a 2a 2a 2a 2a 2a      With PAN ******
     5be:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

000005ce <__c.3085>:
     5ce:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 32 2d     ************* 2-
     5de:	20 52 65 6d 6f 76 65 20 43 61 72 64 20 20 20 2a      Remove Card   *
     5ee:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     5fe:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

0000060e <__c.3083>:
     60e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 31 2d     ************* 1-
     61e:	20 41 64 64 20 43 61 72 64 09 20 2a 2a 2a 2a 2a      Add Card. *****
     62e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     63e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

0000064b <__c.3081>:
     64b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     65b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     66b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     67b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

0000068b <__c.3079>:
     68b:	2a 2a 2a 2a 2a 20 50 6c 65 61 73 65 20 43 68 6f     ***** Please Cho
     69b:	6f 73 65 20 6f 6e 65 20 6f 66 20 74 68 65 20 66     ose one of the f
     6ab:	6f 6c 6c 6f 77 69 6e 67 20 43 6f 6d 6d 61 6e 64     ollowing Command
     6bb:	73 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     s ************..

000006cb <__c.3077>:
     6cb:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     6db:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     6eb:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     6fb:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

0000070b <__c.3270>:
     70b:	57 72 6f 6e 67 20 63 68 6f 73 65 20 50 6c 65 61     Wrong chose Plea
     71b:	73 65 20 54 72 79 20 61 67 61 69 6e 00              se Try again.

00000728 <__c.3267>:
     728:	77 61 69 74 20 21 21 21 00                          wait !!!.

00000731 <__c.3263>:
     731:	70 72 6f 62 6c 65 6d 20 57 69 74 68 20 44 61 74     problem With Dat
     741:	61 20 42 61 73 65 20 43 61 6c 6c 20 53 65 72 76     a Base Call Serv
     751:	69 63 65 20 53 75 70 70 6f 72 74 00                 ice Support.

0000075d <__c.3261>:
     75d:	44 65 6c 65 74 65 64 20 73 75 63 63 65 73 73 66     Deleted successf
     76d:	75 6c 6c 79 00                                      ully.

00000772 <__c.3258>:
     772:	20 0a 00                                             ..

00000775 <__c.3256>:
     775:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     785:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     795:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     7a5:	2a 2a 2a 2a 0a 00                                   ****..

000007ab <__c.3254>:
     7ab:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 0a 00           *********** ..

000007b9 <__c.3252>:
     7b9:	2a 2a 2a 2a 2a 20 54 68 65 20 4e 75 6d 62 65 72     ***** The Number
     7c9:	20 6f 66 20 49 6e 73 74 61 6c 6c 65 64 20 43 61      of Installed Ca
     7d9:	72 64 73 20 69 73 20 3a 00                          rds is :.

000007e2 <__c.3250>:
     7e2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     7f2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     802:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     812:	2a 2a 2a 2a 0a 00                                   ****..

00000818 <__c.3233>:
     818:	45 58 49 54 20 41 64 6d 69 6e 20 4d 6f 64 69 66     EXIT Admin Modif
     828:	79 69 6e 67 20 6d 6f 64 65 20 73 75 63 63 65 73     ying mode succes
     838:	73 66 75 6c 6c 79 00                                sfully.

0000083f <__c.3230>:
     83f:	4d 61 78 69 6d 75 6d 20 44 61 69 6c 79 20 41 6d     Maximum Daily Am
     84f:	6f 75 6e 74 20 44 6f 65 73 20 4e 6f 74 20 53 65     ount Does Not Se
     85f:	74 20 53 75 63 63 65 73 73 66 75 6c 6c 79 20 21     t Successfully !
     86f:	21 21 21 00                                         !!!.

00000873 <__c.3228>:
     873:	4d 61 78 69 6d 75 6d 20 44 61 69 6c 79 20 41 6d     Maximum Daily Am
     883:	6f 75 6e 74 20 53 75 63 63 65 73 73 66 75 6c 6c     ount Successfull
     893:	79 00                                               y.

00000895 <__c.3226>:
     895:	20 0a 00                                             ..

00000898 <__c.3224>:
     898:	50 6c 65 61 73 65 20 45 6e 74 65 72 20 74 68 65     Please Enter the
     8a8:	20 4d 41 78 20 44 61 69 6c 79 20 41 6d 6f 75 6e      MAx Daily Amoun
     8b8:	74 00                                               t.

000008ba <__c.3221>:
     8ba:	45 72 72 6f 72 20 44 6f 65 73 20 4e 6f 74 20 43     Error Does Not C
     8ca:	6c 65 61 72 65 64 20 53 75 63 63 65 73 73 66 75     leared Successfu
     8da:	6c 6c 79 20 21 21 21 21 00                          lly !!!!.

000008e3 <__c.3219>:
     8e3:	45 72 72 6f 72 20 43 6c 65 61 72 65 64 20 53 75     Error Cleared Su
     8f3:	63 63 65 73 73 66 75 6c 6c 79 00                    ccessfully.

000008fe <__c.3216>:
     8fe:	50 6c 65 61 73 65 20 54 72 79 20 41 67 61 69 6e     Please Try Again
	...

0000090f <__c.3214>:
     90f:	41 64 6d 69 6e 20 44 61 74 61 20 53 74 6f 72 65     Admin Data Store
     91f:	64 20 53 75 63 63 65 73 73 66 75 6c 6c 79 00        d Successfully.

0000092e <__c.3212>:
     92e:	77 61 69 74 20 21 21 21 20 20 0a 00                 wait !!!  ..

0000093a <__c.3210>:
     93a:	45 6e 74 65 72 20 61 20 6e 65 77 20 61 64 6d 69     Enter a new admi
     94a:	6e 20 4d 41 58 20 54 65 6d 70 20 76 61 6c 75 65     n MAX Temp value
     95a:	3a 20 00                                            : .

0000095d <__c.3206>:
     95d:	50 6c 65 61 73 65 20 54 72 79 20 41 67 61 69 6e     Please Try Again
     96d:	20 00                                                .

0000096f <__c.3204>:
     96f:	41 64 6d 69 6e 20 44 61 74 61 20 53 74 6f 72 65     Admin Data Store
     97f:	64 20 53 75 63 63 65 73 73 66 75 6c 6c 79 00        d Successfully.

0000098e <__c.3202>:
     98e:	77 61 69 74 20 21 21 21 20 20 0a 00                 wait !!!  ..

0000099a <__c.3200>:
     99a:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 61 20 6e     Please enter a n
     9aa:	65 77 20 61 64 6d 69 6e 20 70 61 73 73 20 3a 00     ew admin pass :.

000009ba <__c.3198>:
     9ba:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 61 20 6e     Please enter a n
     9ca:	65 77 20 61 64 6d 69 6e 20 6e 61 6d 65 20 3a 00     ew admin name :.

000009da <__c.3195>:
     9da:	20 0a 00                                             ..

000009dd <__c.3193>:
     9dd:	45 4e 44 20 4f 46 20 53 45 4c 45 43 54 49 4f 4e     END OF SELECTION
     9ed:	20 21 21 21 00                                       !!!.

000009f2 <__c.3191>:
     9f2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     a02:	2a 20 35 2d 20 45 78 69 74 20 2a 2a 2a 2a 2a 2a     * 5- Exit ******
     a12:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     a22:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

00000a32 <__c.3189>:
     a32:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     a42:	2a 20 34 2d 20 53 65 74 20 4d 61 78 20 44 61 69     * 4- Set Max Dai
     a52:	6c 79 20 41 6d 6f 75 6e 74 20 2a 2a 2a 2a 2a 2a     ly Amount ******
     a62:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

00000a72 <__c.3187>:
     a72:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     a82:	2a 20 33 2d 20 43 6c 65 61 72 20 45 72 72 6f 72     * 3- Clear Error
     a92:	20 46 6c 61 67 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      Flag **********
     aa2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

00000ab2 <__c.3185>:
     ab2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     ac2:	2a 20 32 2d 20 53 65 74 20 41 64 6d 69 6e 20 4d     * 2- Set Admin M
     ad2:	61 78 69 6d 75 6d 20 54 65 6d 70 65 72 61 74 75     aximum Temperatu
     ae2:	72 65 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     re ***********..

00000af2 <__c.3183>:
     af2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     b02:	2a 20 31 2d 20 53 65 74 20 41 64 6d 69 6e 20 50     * 1- Set Admin P
     b12:	61 73 73 77 6f 72 64 20 61 6e 64 20 4e 61 6d 65     assword and Name
     b22:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00      *************..

00000b32 <__c.3181>:
     b32:	50 6c 65 61 73 65 20 43 68 6f 6f 73 65 20 6f 6e     Please Choose on
     b42:	65 20 6f 66 20 74 68 65 20 66 6f 6c 6c 6f 77 69     e of the followi
     b52:	6e 67 20 43 6f 6d 6d 61 6e 64 73 20 00              ng Commands .

00000b5f <__c.3172>:
     b5f:	54 68 69 73 20 63 61 72 64 20 49 73 20 6e 6f 74     This card Is not
     b6f:	20 45 78 69 73 74 00                                 Exist.

00000b76 <__c.3170>:
     b76:	54 68 69 73 20 63 61 72 64 20 20 49 73 20 45 78     This card  Is Ex
     b86:	69 73 74 00                                         ist.

00000b8a <__c.3168>:
     b8a:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 43 61 72     Please enter Car
     b9a:	64 20 4e 61 6d 65 3a 00                             d Name:.

00000ba2 <LCD_StrF>:
     ba2:	57 45 4c 43 4f 4d 45 20 4f 50 45 52 41 54 45 00     WELCOME OPERATE.
     bb2:	00 00 00 00 4d 4f 44 45 00 00 00 00 00 00 00 00     ....MODE........
	...
     bca:	50 4c 45 41 53 45 20 45 4e 54 45 52 20 00 00 00     PLEASE ENTER ...
     bda:	00 00 00 00 43 41 52 44 00 00 00 00 00 00 00 00     ....CARD........
	...
     bf2:	45 4e 54 45 52 20 54 48 45 00 00 00 00 00 00 00     ENTER THE.......
     c02:	00 00 00 00 54 52 41 4e 53 41 43 20 41 4d 4f 55     ....TRANSAC AMOU
     c12:	4e 54 20 00 00 00 00 00 54 52 41 4e 53 41 43 54     NT .....TRANSACT
     c22:	49 4f 4e 20 20 3a 20 00 00 00 00 00 57 72 6f 6e     ION  : .....Wron
     c32:	67 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00     g ..............
     c42:	54 72 61 6e 73 61 63 74 69 6f 6e 00 00 00 00 00     Transaction.....
     c52:	00 00 00 00 45 52 52 4f 52 5f 54 65 6d 70 00 00     ....ERROR_Temp..
	...
     c6a:	43 41 4c 4c 5f 58 58 58 58 58 58 00 00 00 00 00     CALL_XXXXXX.....
     c7a:	00 00 00 00 44 72 61 67 6f 6e 73 00 00 00 00 00     ....Dragons.....
	...
     c92:	41 54 4d 20 53 79 73 74 65 6d 00 00 00 00 00 00     ATM System......
     ca2:	00 00 00 00 65 6e 74 65 72 20 50 72 6f 67 72 61     ....enter Progra
     cb2:	6d 00 00 00 00 00 00 00 4d 6f 64 65 00 00 00 00     m.......Mode....
	...
     cce:	50 72 6f 67 72 61 6d 20 4d 6f 64 45 00 00 00 00     Program ModE....
     cde:	00 00 00 00 4e 4f 54 20 52 45 41 44 59 00 00 00     ....NOT READY...
	...
     cf6:	54 48 41 4e 4b 00 00 00 00 00 00 00 00 00 00 00     THANK...........
     d06:	00 00 00 00 59 4f 55 00 00 00 00 00 00 00 00 00     ....YOU.........
	...
     d1e:	53 75 63 63 65 73 73 00 00 00 00 00 00 00 00 00     Success.........
     d2e:	00 00 00 00                                         ....

00000d32 <__c.3069>:
     d32:	48 69 6e 74 21 21 21 21 20 45 6d 70 74 79 20 44     Hint!!!! Empty D
     d42:	61 74 61 42 61 73 65 20 0a 00                       ataBase ..

00000d4c <__c.2151>:
     d4c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     d5c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     d6c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     d7c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

00000d8c <__c.2149>:
     d8c:	0a 00                                               ..

00000d8e <__c.2147>:
     d8e:	0a 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     .               
     d9e:	20 00                                                .

00000da0 <__c.2145>:
     da0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     db0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     dc0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     dd0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 20     **************. 
     de0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                    .

00000df0 <__c.2139>:
     df0:	0a 00                                               ..

00000df2 <__c.2137>:
     df2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     e02:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     e12:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     e22:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

00000e32 <__c.2135>:
     e32:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     e42:	0a 00                                               ..

00000e44 <__c.2133>:
     e44:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     e54:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     e64:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     e74:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 20     **************. 
     e84:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

00000e93 <__c.2131>:
     e93:	0a 00 00                                            ...

00000e96 <__ctors_end>:
     e96:	11 24       	eor	r1, r1
     e98:	1f be       	out	0x3f, r1	; 63
     e9a:	cf e5       	ldi	r28, 0x5F	; 95
     e9c:	d8 e0       	ldi	r29, 0x08	; 8
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	cd bf       	out	0x3d, r28	; 61

00000ea2 <__do_copy_data>:
     ea2:	11 e0       	ldi	r17, 0x01	; 1
     ea4:	a0 e6       	ldi	r26, 0x60	; 96
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e0 eb       	ldi	r30, 0xB0	; 176
     eaa:	f5 e4       	ldi	r31, 0x45	; 69
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <__do_copy_data+0x10>
     eae:	05 90       	lpm	r0, Z+
     eb0:	0d 92       	st	X+, r0
     eb2:	a8 3a       	cpi	r26, 0xA8	; 168
     eb4:	b1 07       	cpc	r27, r17
     eb6:	d9 f7       	brne	.-10     	; 0xeae <__do_copy_data+0xc>

00000eb8 <__do_clear_bss>:
     eb8:	22 e0       	ldi	r18, 0x02	; 2
     eba:	a8 ea       	ldi	r26, 0xA8	; 168
     ebc:	b1 e0       	ldi	r27, 0x01	; 1
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <.do_clear_bss_start>

00000ec0 <.do_clear_bss_loop>:
     ec0:	1d 92       	st	X+, r1

00000ec2 <.do_clear_bss_start>:
     ec2:	a0 34       	cpi	r26, 0x40	; 64
     ec4:	b2 07       	cpc	r27, r18
     ec6:	e1 f7       	brne	.-8      	; 0xec0 <.do_clear_bss_loop>
     ec8:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <main>
     ecc:	0c 94 d6 22 	jmp	0x45ac	; 0x45ac <_exit>

00000ed0 <__bad_interrupt>:
     ed0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000ed4 <usart_putchar_printf>:





int usart_putchar_printf(char var, FILE *stream) {
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	00 d0       	rcall	.+0      	; 0xeda <usart_putchar_printf+0x6>
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
	(void)stream ;
	uint8_t TempVar = var , Tempr = '\r';
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	9d e0       	ldi	r25, 0x0D	; 13
     ee2:	9a 83       	std	Y+2, r25	; 0x02
    if (var == '\n') HAL_UART_TRANSMIT(&UART_Handler , &Tempr ,1);
     ee4:	8a 30       	cpi	r24, 0x0A	; 10
     ee6:	49 f4       	brne	.+18     	; 0xefa <usart_putchar_printf+0x26>
     ee8:	41 e0       	ldi	r20, 0x01	; 1
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	be 01       	movw	r22, r28
     eee:	6e 5f       	subi	r22, 0xFE	; 254
     ef0:	7f 4f       	sbci	r23, 0xFF	; 255
     ef2:	87 e7       	ldi	r24, 0x77	; 119
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <HAL_UART_TRANSMIT>
	HAL_UART_TRANSMIT(&UART_Handler , &TempVar ,1);
     efa:	41 e0       	ldi	r20, 0x01	; 1
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	be 01       	movw	r22, r28
     f00:	6f 5f       	subi	r22, 0xFF	; 255
     f02:	7f 4f       	sbci	r23, 0xFF	; 255
     f04:	87 e7       	ldi	r24, 0x77	; 119
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <HAL_UART_TRANSMIT>

    return 0;
}
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	08 95       	ret

00000f1a <App_Get_Command>:
}



uint8_t App_Get_Command(void)
{
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	6e 97       	sbiw	r28, 0x1e	; 30
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	cd bf       	out	0x3d, r28	; 61
	uint8_t Password[ADMIN_PASSWARD_LEN] = {0} , StrName[ADMIN_USERNAME_LEN] = {0} ;
     f32:	8a e0       	ldi	r24, 0x0A	; 10
     f34:	fe 01       	movw	r30, r28
     f36:	31 96       	adiw	r30, 0x01	; 1
     f38:	df 01       	movw	r26, r30
     f3a:	98 2f       	mov	r25, r24
     f3c:	1d 92       	st	X+, r1
     f3e:	9a 95       	dec	r25
     f40:	e9 f7       	brne	.-6      	; 0xf3c <App_Get_Command+0x22>
     f42:	3a 96       	adiw	r30, 0x0a	; 10
     f44:	df 01       	movw	r26, r30
     f46:	98 2f       	mov	r25, r24
     f48:	1d 92       	st	X+, r1
     f4a:	9a 95       	dec	r25
     f4c:	e9 f7       	brne	.-6      	; 0xf48 <App_Get_Command+0x2e>
	uint8_t Command[ADMIN_USERNAME_LEN] = {0};	
     f4e:	3a 96       	adiw	r30, 0x0a	; 10
     f50:	df 01       	movw	r26, r30
     f52:	1d 92       	st	X+, r1
     f54:	8a 95       	dec	r24
     f56:	e9 f7       	brne	.-6      	; 0xf52 <App_Get_Command+0x38>
	
	if(Button_Read(ATM_Buttons , ATM_SELECT_MODE_Button_INDEX) == State_LOW)
	{
		#else

				String_F_PrintLine(PSTR("Please Enter Command choice"));
     f58:	8e ee       	ldi	r24, 0xEE	; 238
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
		do
		{
			ATM_Terminal_GetString(Command , 10);
     f60:	6a e0       	ldi	r22, 0x0A	; 10
     f62:	ce 01       	movw	r24, r28
     f64:	45 96       	adiw	r24, 0x15	; 21
     f66:	0e 94 bc 09 	call	0x1378	; 0x1378 <ATM_Terminal_GetString>
			if  ((strcmp((char *)Command , (char *)"ADMIN") == 0)||(strcmp((char *)Command , (char *)"OPERATE") == 0))
     f6a:	66 e0       	ldi	r22, 0x06	; 6
     f6c:	71 e0       	ldi	r23, 0x01	; 1
     f6e:	ce 01       	movw	r24, r28
     f70:	45 96       	adiw	r24, 0x15	; 21
     f72:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <strcmp>
     f76:	8c 01       	movw	r16, r24
     f78:	89 2b       	or	r24, r25
     f7a:	69 f0       	breq	.+26     	; 0xf96 <App_Get_Command+0x7c>
     f7c:	6c e0       	ldi	r22, 0x0C	; 12
     f7e:	71 e0       	ldi	r23, 0x01	; 1
     f80:	ce 01       	movw	r24, r28
     f82:	45 96       	adiw	r24, 0x15	; 21
     f84:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <strcmp>
     f88:	89 2b       	or	r24, r25
     f8a:	29 f0       	breq	.+10     	; 0xf96 <App_Get_Command+0x7c>
			{
				break ;
			}else
			{
				String_F_PrintLine(PSTR("Wrong Command Please Try again"));
     f8c:	8f ec       	ldi	r24, 0xCF	; 207
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
			}
		} while (1);
     f94:	e5 cf       	rjmp	.-54     	; 0xf60 <App_Get_Command+0x46>
		
		if(strcmp((char *)Command , (char *)"ADMIN") == 0 )
     f96:	01 2b       	or	r16, r17
     f98:	e1 f5       	brne	.+120    	; 0x1012 <App_Get_Command+0xf8>
		{
			#endif
			SERVER_ADMIN_Get_Pass(StrName ,Password);
     f9a:	8e 01       	movw	r16, r28
     f9c:	05 5f       	subi	r16, 0xF5	; 245
     f9e:	1f 4f       	sbci	r17, 0xFF	; 255
     fa0:	be 01       	movw	r22, r28
     fa2:	6f 5f       	subi	r22, 0xFF	; 255
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	c8 01       	movw	r24, r16
     fa8:	0e 94 6f 10 	call	0x20de	; 0x20de <SERVER_ADMIN_Get_Pass>
			printf("Welcome ADMIN :,%s \n\n" , StrName);
     fac:	1f 93       	push	r17
     fae:	0f 93       	push	r16
     fb0:	84 e1       	ldi	r24, 0x14	; 20
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	9f 93       	push	r25
     fb6:	8f 93       	push	r24
     fb8:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <printf>
			String_F_PrintLine(PSTR("Enter Your Password :"));
     fbc:	89 eb       	ldi	r24, 0xB9	; 185
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
			memset(Command , 0 , ADMIN_USERNAME_LEN);
     fc4:	ce 01       	movw	r24, r28
     fc6:	45 96       	adiw	r24, 0x15	; 21
     fc8:	2a e0       	ldi	r18, 0x0A	; 10
     fca:	fc 01       	movw	r30, r24
     fcc:	11 92       	st	Z+, r1
     fce:	2a 95       	dec	r18
     fd0:	e9 f7       	brne	.-6      	; 0xfcc <App_Get_Command+0xb2>
			ATM_Terminal_GetString(Command , ADMIN_USERNAME_LEN);
     fd2:	6a e0       	ldi	r22, 0x0A	; 10
     fd4:	0e 94 bc 09 	call	0x1378	; 0x1378 <ATM_Terminal_GetString>
			while(strcmp((char *)Password , (char *)Command) != 0 )
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	09 c0       	rjmp	.+18     	; 0xff4 <App_Get_Command+0xda>
			{
				String_F_PrintLine(PSTR("Wrong Password !!!"));
     fe2:	86 ea       	ldi	r24, 0xA6	; 166
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
				ATM_Terminal_GetString(Command , 10);
     fea:	6a e0       	ldi	r22, 0x0A	; 10
     fec:	ce 01       	movw	r24, r28
     fee:	45 96       	adiw	r24, 0x15	; 21
     ff0:	0e 94 bc 09 	call	0x1378	; 0x1378 <ATM_Terminal_GetString>
			SERVER_ADMIN_Get_Pass(StrName ,Password);
			printf("Welcome ADMIN :,%s \n\n" , StrName);
			String_F_PrintLine(PSTR("Enter Your Password :"));
			memset(Command , 0 , ADMIN_USERNAME_LEN);
			ATM_Terminal_GetString(Command , ADMIN_USERNAME_LEN);
			while(strcmp((char *)Password , (char *)Command) != 0 )
     ff4:	be 01       	movw	r22, r28
     ff6:	6b 5e       	subi	r22, 0xEB	; 235
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	ce 01       	movw	r24, r28
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <strcmp>
    1002:	89 2b       	or	r24, r25
    1004:	71 f7       	brne	.-36     	; 0xfe2 <App_Get_Command+0xc8>
			{
				String_F_PrintLine(PSTR("Wrong Password !!!"));
				ATM_Terminal_GetString(Command , 10);
			}
				String_F_PrintLine(PSTR("Switching to programming mode"));			
    1006:	88 e8       	ldi	r24, 0x88	; 136
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
			return 1 ;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	05 c0       	rjmp	.+10     	; 0x101c <App_Get_Command+0x102>
			
		}else{

			// after exiting programming mode we will enter operation mode directly	
			String_F_PrintLine(PSTR("Switching to OPERATION mode"));
    1012:	8c e6       	ldi	r24, 0x6C	; 108
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
			return 0 ; 
    101a:	80 e0       	ldi	r24, 0x00	; 0
		}
	
	
	
	
}
    101c:	6e 96       	adiw	r28, 0x1e	; 30
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	08 95       	ret

00001032 <APP_UPdate>:


void APP_UPdate(void)
{
	uint8_t Flag = 0 ;
	LCD_Send_String_WithLoc(1,1,ReadStr_F(LCD_StrF[LCD_Print_Dragons]));
    1032:	8e e7       	ldi	r24, 0x7E	; 126
    1034:	9c e0       	ldi	r25, 0x0C	; 12
    1036:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    103a:	ac 01       	movw	r20, r24
    103c:	61 e0       	ldi	r22, 0x01	; 1
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
	LCD_Send_String_WithLoc(2,1,ReadStr_F(LCD_StrF[LCD_Print_ATM_System]));
    1044:	82 e9       	ldi	r24, 0x92	; 146
    1046:	9c e0       	ldi	r25, 0x0C	; 12
    1048:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    104c:	ac 01       	movw	r20, r24
    104e:	61 e0       	ldi	r22, 0x01	; 1
    1050:	82 e0       	ldi	r24, 0x02	; 2
    1052:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
	String_F_PrintTwoLines(LCD_StrF[LCD_Print_Dragons] , LCD_StrF[LCD_Print_ATM_System] );
    1056:	62 e9       	ldi	r22, 0x92	; 146
    1058:	7c e0       	ldi	r23, 0x0C	; 12
    105a:	8e e7       	ldi	r24, 0x7E	; 126
    105c:	9c e0       	ldi	r25, 0x0C	; 12
    105e:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <String_F_PrintTwoLines>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1062:	2f ef       	ldi	r18, 0xFF	; 255
    1064:	8d e3       	ldi	r24, 0x3D	; 61
    1066:	99 e4       	ldi	r25, 0x49	; 73
    1068:	21 50       	subi	r18, 0x01	; 1
    106a:	80 40       	sbci	r24, 0x00	; 0
    106c:	90 40       	sbci	r25, 0x00	; 0
    106e:	e1 f7       	brne	.-8      	; 0x1068 <APP_UPdate+0x36>
    1070:	00 c0       	rjmp	.+0      	; 0x1072 <APP_UPdate+0x40>
    1072:	00 00       	nop
	_delay_ms(ATM_DLEAY_IN_S);
	LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
	LCD_Send_String_WithLoc(1,5,(uint8_t *)"welcome");	
    107a:	4a e2       	ldi	r20, 0x2A	; 42
    107c:	51 e0       	ldi	r21, 0x01	; 1
    107e:	65 e0       	ldi	r22, 0x05	; 5
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>

	String_F_PrintLine(PSTR("welcome"));
    1086:	84 e6       	ldi	r24, 0x64	; 100
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    108e:	2f ef       	ldi	r18, 0xFF	; 255
    1090:	8d e3       	ldi	r24, 0x3D	; 61
    1092:	99 e4       	ldi	r25, 0x49	; 73
    1094:	21 50       	subi	r18, 0x01	; 1
    1096:	80 40       	sbci	r24, 0x00	; 0
    1098:	90 40       	sbci	r25, 0x00	; 0
    109a:	e1 f7       	brne	.-8      	; 0x1094 <APP_UPdate+0x62>
    109c:	00 c0       	rjmp	.+0      	; 0x109e <APP_UPdate+0x6c>
    109e:	00 00       	nop
	_delay_ms(ATM_DLEAY_IN_S);
	LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);	
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
	
	Flag = App_Get_Command();
    10a6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <App_Get_Command>
	if (Flag == 1)
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	11 f4       	brne	.+4      	; 0x10b2 <APP_UPdate+0x80>
	{
		ATM_Programming_mode();
    10ae:	0e 94 05 0c 	call	0x180a	; 0x180a <ATM_Programming_mode>
	
		while(1)
		{
			

			sei();		
    10b2:	78 94       	sei
			TIM_Start(&Tim_1_Handler);			// Enable ADC To Periodically check Temp 
    10b4:	87 e6       	ldi	r24, 0x67	; 103
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	0e 94 75 19 	call	0x32ea	; 0x32ea <TIM_Start>
			if(SERVER_ADMIN_Error_Get() == 0)
    10bc:	0e 94 01 11 	call	0x2202	; 0x2202 <SERVER_ADMIN_Error_Get>
    10c0:	81 11       	cpse	r24, r1
    10c2:	03 c0       	rjmp	.+6      	; 0x10ca <APP_UPdate+0x98>
			{
				ATM_Operation_mode();	// New We can Switch to user Mode 
    10c4:	0e 94 b7 0c 	call	0x196e	; 0x196e <ATM_Operation_mode>
    10c8:	f4 cf       	rjmp	.-24     	; 0x10b2 <APP_UPdate+0x80>
			}else
			{
				ATM_Lock_Fun();
    10ca:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <ATM_Lock_Fun>
    10ce:	f1 cf       	rjmp	.-30     	; 0x10b2 <APP_UPdate+0x80>

000010d0 <ATM_Buttons_GPIO_Init>:
}



void ATM_Buttons_GPIO_Init(void)
{
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <ATM_Buttons_GPIO_Init+0x6>
    10d6:	1f 92       	push	r1
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
	GPIO_InitTypeDef RequestData ={.mode = GPIO_MODE_OUTPUT , .pin = ATM_Request_Card_DATA_Pin ,.pull = GPIO_PULLUP  };
    10dc:	80 e8       	ldi	r24, 0x80	; 128
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	8a 83       	std	Y+2, r24	; 0x02
    10e4:	8b 83       	std	Y+3, r24	; 0x03
	HAL_GPIO_Pin_Init(ATM_Request_Card_DATA_Port , &RequestData);
    10e6:	be 01       	movw	r22, r28
    10e8:	6f 5f       	subi	r22, 0xFF	; 255
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
    10ec:	80 e3       	ldi	r24, 0x30	; 48
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <HAL_GPIO_Pin_Init>
	RequestData.pin = GPIO_PIN_3 ;
    10f4:	88 e0       	ldi	r24, 0x08	; 8
    10f6:	89 83       	std	Y+1, r24	; 0x01
	HAL_GPIO_Pin_Init(GPIOD , &RequestData);
    10f8:	be 01       	movw	r22, r28
    10fa:	6f 5f       	subi	r22, 0xFF	; 255
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255
    10fe:	80 e3       	ldi	r24, 0x30	; 48
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <HAL_GPIO_Pin_Init>
		
	
	Button_Init(ATM_Buttons);
    1106:	81 e7       	ldi	r24, 0x71	; 113
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <Button_Init>
		
}
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <APP_Init>:
								.ADC_Adjust_Select = ADC_Adjust_Right };
								 
							 
								 
void APP_Init(void)
{
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	00 d0       	rcall	.+0      	; 0x1120 <APP_Init+0x6>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <APP_Init+0x8>
    1122:	1f 92       	push	r1
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62

	uint8_t strMax_Temp[ADMIN_TEMP_LEN] ; 		
	Motor_Init();				
    1128:	0e 94 cd 13 	call	0x279a	; 0x279a <Motor_Init>
	KeyPad_Initialization(&KeyPad);
    112c:	8b eb       	ldi	r24, 0xBB	; 187
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 38 11 	call	0x2270	; 0x2270 <KeyPad_Initialization>
	LCD_Initializaion();	
    1134:	0e 94 da 12 	call	0x25b4	; 0x25b4 <LCD_Initializaion>
	I2C_Init(&I2C_Handler);
    1138:	86 e9       	ldi	r24, 0x96	; 150
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <I2C_Init>
	EEPROM_Init();
    1140:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <EEPROM_Init>
	HAL_SPI_Init(&SPI_Handler);
    1144:	88 e8       	ldi	r24, 0x88	; 136
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 39 18 	call	0x3072	; 0x3072 <HAL_SPI_Init>
	HAL_UART_Init(&UART_Handler);
    114c:	87 e7       	ldi	r24, 0x77	; 119
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 a9 1a 	call	0x3552	; 0x3552 <HAL_UART_Init>
	ATM_Buttons_GPIO_Init();	
    1154:	0e 94 68 08 	call	0x10d0	; 0x10d0 <ATM_Buttons_GPIO_Init>

	TIM_NormalModeInit(&Tim_1_Handler);
    1158:	87 e6       	ldi	r24, 0x67	; 103
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 ba 18 	call	0x3174	; 0x3174 <TIM_NormalModeInit>
	ADC_Init(&ADC_Handler);
    1160:	80 e6       	ldi	r24, 0x60	; 96
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <ADC_Init>
	cli();
    1168:	f8 94       	cli
	_TIM_IT_EN( TIM_1_IT_OVER);
    116a:	89 b7       	in	r24, 0x39	; 57
    116c:	84 60       	ori	r24, 0x04	; 4
    116e:	89 bf       	out	0x39, r24	; 57
	ADC_Get_Value_IT(ADC_CH_0);
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	0e 94 99 16 	call	0x2d32	; 0x2d32 <ADC_Get_Value_IT>
	SERVER_ADMIN_Get_Temp(strMax_Temp);
    1176:	ce 01       	movw	r24, r28
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	0e 94 bb 10 	call	0x2176	; 0x2176 <SERVER_ADMIN_Get_Temp>
	Max_Temp = atoi((char *)strMax_Temp);
    117e:	ce 01       	movw	r24, r28
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <atoi>
    1186:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <__data_end+0x1>
    118a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
	if (Max_Temp == 0xffff)
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	31 f4       	brne	.+12     	; 0x119e <APP_Init+0x84>
	{
		Max_Temp = 50 ;		// default value 
    1192:	82 e3       	ldi	r24, 0x32	; 50
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <__data_end+0x1>
    119a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
	}
	stdout = &mystdout; //Required for printf init
    119e:	8f e9       	ldi	r24, 0x9F	; 159
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <__iob+0x3>
    11a6:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__iob+0x2>

}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	08 95       	ret

000011ba <__vector_9>:




ISR(TIMER1_OVF_vect)
{
    11ba:	1f 92       	push	r1
    11bc:	0f 92       	push	r0
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	0f 92       	push	r0
    11c2:	11 24       	eor	r1, r1
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	0f 90       	pop	r0
    11ca:	1f 90       	pop	r1
    11cc:	18 95       	reti

000011ce <ATM_Get_UserCommand>:




uint8_t ATM_Get_UserCommand(void)
{
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	1f 92       	push	r1
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
	uint8_t command = 0; 	
    11d8:	19 82       	std	Y+1, r1	; 0x01
	printf_P(PSTR("**************************************************************\n"));
    11da:	8b ec       	ldi	r24, 0xCB	; 203
    11dc:	96 e0       	ldi	r25, 0x06	; 6
    11de:	9f 93       	push	r25
    11e0:	8f 93       	push	r24
    11e2:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(PSTR("***** Please Choose one of the following Commands ************\n"));
    11e6:	8b e8       	ldi	r24, 0x8B	; 139
    11e8:	96 e0       	ldi	r25, 0x06	; 6
    11ea:	9f 93       	push	r25
    11ec:	8f 93       	push	r24
    11ee:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(PSTR("**************************************************************\n"));
    11f2:	8b e4       	ldi	r24, 0x4B	; 75
    11f4:	96 e0       	ldi	r25, 0x06	; 6
    11f6:	9f 93       	push	r25
    11f8:	8f 93       	push	r24
    11fa:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(PSTR("************* 1- Add Card	 ********************************\n"));
    11fe:	8e e0       	ldi	r24, 0x0E	; 14
    1200:	96 e0       	ldi	r25, 0x06	; 6
    1202:	9f 93       	push	r25
    1204:	8f 93       	push	r24
    1206:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(PSTR("************* 2- Remove Card   *******************************\n"));
    120a:	8e ec       	ldi	r24, 0xCE	; 206
    120c:	95 e0       	ldi	r25, 0x05	; 5
    120e:	9f 93       	push	r25
    1210:	8f 93       	push	r24
    1212:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(PSTR("************* 3- Search For Card With PAN ********************\n"));
    1216:	8e e8       	ldi	r24, 0x8E	; 142
    1218:	95 e0       	ldi	r25, 0x05	; 5
    121a:	9f 93       	push	r25
    121c:	8f 93       	push	r24
    121e:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(PSTR("************* 4- Search With Card Holder Name ****************\n"));
    1222:	8e e4       	ldi	r24, 0x4E	; 78
    1224:	95 e0       	ldi	r25, 0x05	; 5
    1226:	9f 93       	push	r25
    1228:	8f 93       	push	r24
    122a:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(PSTR("************* 5- Total NUM of Current CARDs ******************\n"));
    122e:	8e e0       	ldi	r24, 0x0E	; 14
    1230:	95 e0       	ldi	r25, 0x05	; 5
    1232:	9f 93       	push	r25
    1234:	8f 93       	push	r24
    1236:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(PSTR("************* 6- Reset Data Base *****************************\n"));
    123a:	8e ec       	ldi	r24, 0xCE	; 206
    123c:	94 e0       	ldi	r25, 0x04	; 4
    123e:	9f 93       	push	r25
    1240:	8f 93       	push	r24
    1242:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(PSTR("************* 7- Admin Modify Data ***************************\n"));
    1246:	8e e8       	ldi	r24, 0x8E	; 142
    1248:	94 e0       	ldi	r25, 0x04	; 4
    124a:	9f 93       	push	r25
    124c:	8f 93       	push	r24
    124e:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(PSTR("************* 8- Exit Programming mode ***********************\n"));
    1252:	8e e4       	ldi	r24, 0x4E	; 78
    1254:	94 e0       	ldi	r25, 0x04	; 4
    1256:	9f 93       	push	r25
    1258:	8f 93       	push	r24
    125a:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(PSTR("**************************************************************\n"));
    125e:	8e e0       	ldi	r24, 0x0E	; 14
    1260:	94 e0       	ldi	r25, 0x04	; 4
    1262:	9f 93       	push	r25
    1264:	8f 93       	push	r24
    1266:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(PSTR("******************* END OF SELECTION !!!**********************\n"));
    126a:	8e ec       	ldi	r24, 0xCE	; 206
    126c:	93 e0       	ldi	r25, 0x03	; 3
    126e:	9f 93       	push	r25
    1270:	8f 93       	push	r24
    1272:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(PSTR("**************************************************************\n"));
    1276:	8e e8       	ldi	r24, 0x8E	; 142
    1278:	93 e0       	ldi	r25, 0x03	; 3
    127a:	9f 93       	push	r25
    127c:	8f 93       	push	r24
    127e:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(PSTR(" \n" ));	
    1282:	8b e8       	ldi	r24, 0x8B	; 139
    1284:	93 e0       	ldi	r25, 0x03	; 3
    1286:	9f 93       	push	r25
    1288:	8f 93       	push	r24
    128a:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>

	HAL_UART_RECEIVE(&UART_Handler , &command , 0x01) ;
    128e:	41 e0       	ldi	r20, 0x01	; 1
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	be 01       	movw	r22, r28
    1294:	6f 5f       	subi	r22, 0xFF	; 255
    1296:	7f 4f       	sbci	r23, 0xFF	; 255
    1298:	87 e7       	ldi	r24, 0x77	; 119
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <HAL_UART_RECEIVE>
	printf_P(PSTR("\n")) ;
    12a0:	89 e8       	ldi	r24, 0x89	; 137
    12a2:	93 e0       	ldi	r25, 0x03	; 3
    12a4:	9f 93       	push	r25
    12a6:	8f 93       	push	r24
    12a8:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	return command ; 
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
	
	

}
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	0f 90       	pop	r0
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <ReadStr_F>:
 


uint8_t * ReadStr_F(char const * const Str_F)
{
	if (Str_F == NULL)
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	41 f0       	breq	.+16     	; 0x12d4 <ReadStr_F+0x14>
    12c4:	bc 01       	movw	r22, r24
	{
		return NULL ;
	}
	static uint8_t Buffer_Ram[20] ;
	strcpy_P((char *)Buffer_Ram , (char*)Str_F);
    12c6:	8a ea       	ldi	r24, 0xAA	; 170
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <strcpy_P>
	return Buffer_Ram ; 
    12ce:	8a ea       	ldi	r24, 0xAA	; 170
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	08 95       	ret

uint8_t * ReadStr_F(char const * const Str_F)
{
	if (Str_F == NULL)
	{
		return NULL ;
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
	}
	static uint8_t Buffer_Ram[20] ;
	strcpy_P((char *)Buffer_Ram , (char*)Str_F);
	return Buffer_Ram ; 
}
    12d8:	08 95       	ret

000012da <ATM_Collect_CardData>:
		while(1);
}


void ATM_Collect_CardData(CardData_t * CardData)
{
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
	uint8_t Flag = 0 ; 
	if (CardData == NULL)
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <ATM_Collect_CardData+0xc>
    12e4:	45 c0       	rjmp	.+138    	; 0x1370 <ATM_Collect_CardData+0x96>
    12e6:	ec 01       	movw	r28, r24
	{
		return ;
	}
	LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);	
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
}


void ATM_Collect_CardData(CardData_t * CardData)
{
	uint8_t Flag = 0 ; 
    12ee:	10 e0       	ldi	r17, 0x00	; 0
	if (CardData == NULL)
	{
		return ;
	}
	LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);	
	while(!Flag)
    12f0:	3d c0       	rjmp	.+122    	; 0x136c <ATM_Collect_CardData+0x92>
	{
		
		HAL_GPIO_WRITEPIN(GPIOD , GPIO_PIN_3, GPIO_PIN_SET);
    12f2:	41 e0       	ldi	r20, 0x01	; 1
    12f4:	68 e0       	ldi	r22, 0x08	; 8
    12f6:	80 e3       	ldi	r24, 0x30	; 48
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
		HAL_SPI_Recieve(&SPI_Handler ,(uint8_t*) CardData , 29) ;
    12fe:	4d e1       	ldi	r20, 0x1D	; 29
    1300:	50 e0       	ldi	r21, 0x00	; 0
    1302:	be 01       	movw	r22, r28
    1304:	88 e8       	ldi	r24, 0x88	; 136
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 9b 18 	call	0x3136	; 0x3136 <HAL_SPI_Recieve>
		
		if(strcmp((char * )CardData , "NOT READY" ) == 0 )
    130c:	62 e3       	ldi	r22, 0x32	; 50
    130e:	71 e0       	ldi	r23, 0x01	; 1
    1310:	ce 01       	movw	r24, r28
    1312:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <strcmp>
    1316:	89 2b       	or	r24, r25
    1318:	c9 f4       	brne	.+50     	; 0x134c <ATM_Collect_CardData+0x72>
		{
			String_F_PrintTwoLines(PSTR("CARD") ,PSTR("NOT READY")  );
    131a:	67 e2       	ldi	r22, 0x27	; 39
    131c:	71 e0       	ldi	r23, 0x01	; 1
    131e:	82 e2       	ldi	r24, 0x22	; 34
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <String_F_PrintTwoLines>
			LCD_Send_String_WithLoc(1,1,(uint8_t *)ReadStr_F(LCD_StrF[LCD_Print_CARD]));
    1326:	8e ed       	ldi	r24, 0xDE	; 222
    1328:	9b e0       	ldi	r25, 0x0B	; 11
    132a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    132e:	ac 01       	movw	r20, r24
    1330:	61 e0       	ldi	r22, 0x01	; 1
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
			LCD_Send_String_WithLoc(2,1,(uint8_t *)ReadStr_F(LCD_StrF[LCD_Print_NOT_READY]));				
    1338:	82 ee       	ldi	r24, 0xE2	; 226
    133a:	9c e0       	ldi	r25, 0x0C	; 12
    133c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    1340:	ac 01       	movw	r20, r24
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	82 e0       	ldi	r24, 0x02	; 2
    1346:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
    134a:	01 c0       	rjmp	.+2      	; 0x134e <ATM_Collect_CardData+0x74>

		}
		else
		{
			Flag = 1;
    134c:	11 e0       	ldi	r17, 0x01	; 1
		}
		HAL_GPIO_WRITEPIN(GPIOD , GPIO_PIN_3, GPIO_PIN_RESET);
    134e:	40 e0       	ldi	r20, 0x00	; 0
    1350:	68 e0       	ldi	r22, 0x08	; 8
    1352:	80 e3       	ldi	r24, 0x30	; 48
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
    135a:	2f ef       	ldi	r18, 0xFF	; 255
    135c:	87 ea       	ldi	r24, 0xA7	; 167
    135e:	91 e6       	ldi	r25, 0x61	; 97
    1360:	21 50       	subi	r18, 0x01	; 1
    1362:	80 40       	sbci	r24, 0x00	; 0
    1364:	90 40       	sbci	r25, 0x00	; 0
    1366:	e1 f7       	brne	.-8      	; 0x1360 <ATM_Collect_CardData+0x86>
    1368:	00 c0       	rjmp	.+0      	; 0x136a <ATM_Collect_CardData+0x90>
    136a:	00 00       	nop
	if (CardData == NULL)
	{
		return ;
	}
	LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);	
	while(!Flag)
    136c:	11 23       	and	r17, r17
    136e:	09 f2       	breq	.-126    	; 0x12f2 <ATM_Collect_CardData+0x18>
		}
		HAL_GPIO_WRITEPIN(GPIOD , GPIO_PIN_3, GPIO_PIN_RESET);
		_delay_ms(2000);
	}
	
}
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	08 95       	ret

00001378 <ATM_Terminal_GetString>:




uint8_t ATM_Terminal_GetString(uint8_t * RxBuffer , uint8_t BufferSize )
{
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
	if((RxBuffer == NULL)||(BufferSize == 0))	return -1 ;
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	91 f0       	breq	.+36     	; 0x13a8 <ATM_Terminal_GetString+0x30>
    1384:	66 23       	and	r22, r22
    1386:	91 f0       	breq	.+36     	; 0x13ac <ATM_Terminal_GetString+0x34>
    1388:	ec 01       	movw	r28, r24
	memset(RxBuffer , 0 , BufferSize);
    138a:	06 2f       	mov	r16, r22
    138c:	10 e0       	ldi	r17, 0x00	; 0
    138e:	a8 01       	movw	r20, r16
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <memset>
	HAL_UART_RECEIVE(&UART_Handler , RxBuffer , BufferSize);
    1398:	a8 01       	movw	r20, r16
    139a:	be 01       	movw	r22, r28
    139c:	87 e7       	ldi	r24, 0x77	; 119
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <HAL_UART_RECEIVE>
 
	
	return 0 ;
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	03 c0       	rjmp	.+6      	; 0x13ae <ATM_Terminal_GetString+0x36>



uint8_t ATM_Terminal_GetString(uint8_t * RxBuffer , uint8_t BufferSize )
{
	if((RxBuffer == NULL)||(BufferSize == 0))	return -1 ;
    13a8:	8f ef       	ldi	r24, 0xFF	; 255
    13aa:	01 c0       	rjmp	.+2      	; 0x13ae <ATM_Terminal_GetString+0x36>
    13ac:	8f ef       	ldi	r24, 0xFF	; 255
	memset(RxBuffer , 0 , BufferSize);
	HAL_UART_RECEIVE(&UART_Handler , RxBuffer , BufferSize);
 
	
	return 0 ;
}
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	08 95       	ret

000013b8 <ATM_Add_CardData>:
	

}

void ATM_Add_CardData(void)
{
    13b8:	0f 93       	push	r16
    13ba:	1f 93       	push	r17
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	a3 97       	sbiw	r28, 0x23	; 35
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
		uint8_t  flag = 0 , u8_Index_str =0 , u8_Index_Num =0 ;
		CardData_t TempCard = {0};
    13d0:	8e 01       	movw	r16, r28
    13d2:	0f 5f       	subi	r16, 0xFF	; 255
    13d4:	1f 4f       	sbci	r17, 0xFF	; 255
    13d6:	83 e2       	ldi	r24, 0x23	; 35
    13d8:	f8 01       	movw	r30, r16
    13da:	11 92       	st	Z+, r1
    13dc:	8a 95       	dec	r24
    13de:	e9 f7       	brne	.-6      	; 0x13da <ATM_Add_CardData+0x22>
									
			String_F_PrintLine(PSTR("Please enter Card Holder Name  "));
    13e0:	89 e6       	ldi	r24, 0x69	; 105
    13e2:	93 e0       	ldi	r25, 0x03	; 3
    13e4:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
		ATM_Terminal_GetString(TempCard.CardName , CARD_NAME_LEN +1);
    13e8:	6b e0       	ldi	r22, 0x0B	; 11
    13ea:	c8 01       	movw	r24, r16
    13ec:	0e 94 bc 09 	call	0x1378	; 0x1378 <ATM_Terminal_GetString>
		do 
		{
			u8_Index_str =0; u8_Index_Num =0;
			String_F_PrintLine(PSTR("Please enter Card PAN  :  "));
    13f0:	8e e4       	ldi	r24, 0x4E	; 78
    13f2:	93 e0       	ldi	r25, 0x03	; 3
    13f4:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
			ATM_Terminal_GetString(TempCard.CardPAN , CARD_PAN_LEN+1);	
    13f8:	6b e0       	ldi	r22, 0x0B	; 11
    13fa:	ce 01       	movw	r24, r28
    13fc:	0c 96       	adiw	r24, 0x0c	; 12
    13fe:	0e 94 bc 09 	call	0x1378	; 0x1378 <ATM_Terminal_GetString>
									
			String_F_PrintLine(PSTR("Please enter Card Holder Name  "));
		ATM_Terminal_GetString(TempCard.CardName , CARD_NAME_LEN +1);
		do 
		{
			u8_Index_str =0; u8_Index_Num =0;
    1402:	10 e0       	ldi	r17, 0x00	; 0
    1404:	90 e0       	ldi	r25, 0x00	; 0
			String_F_PrintLine(PSTR("Please enter Card PAN  :  "));
			ATM_Terminal_GetString(TempCard.CardPAN , CARD_PAN_LEN+1);	
			while(TempCard.CardPAN[u8_Index_str] != '\0')
    1406:	05 c0       	rjmp	.+10     	; 0x1412 <ATM_Add_CardData+0x5a>
			{
				if((TempCard.CardPAN[u8_Index_str] >= 0x30 ) && ( TempCard.CardPAN[u8_Index_str] <= 0x39))
    1408:	80 53       	subi	r24, 0x30	; 48
    140a:	8a 30       	cpi	r24, 0x0A	; 10
    140c:	08 f4       	brcc	.+2      	; 0x1410 <ATM_Add_CardData+0x58>
				{
					u8_Index_Num++ ;
    140e:	1f 5f       	subi	r17, 0xFF	; 255
				}
				
				u8_Index_str++;
    1410:	9f 5f       	subi	r25, 0xFF	; 255
		do 
		{
			u8_Index_str =0; u8_Index_Num =0;
			String_F_PrintLine(PSTR("Please enter Card PAN  :  "));
			ATM_Terminal_GetString(TempCard.CardPAN , CARD_PAN_LEN+1);	
			while(TempCard.CardPAN[u8_Index_str] != '\0')
    1412:	ec e0       	ldi	r30, 0x0C	; 12
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	ec 0f       	add	r30, r28
    1418:	fd 1f       	adc	r31, r29
    141a:	e9 0f       	add	r30, r25
    141c:	f1 1d       	adc	r31, r1
    141e:	80 81       	ld	r24, Z
    1420:	81 11       	cpse	r24, r1
    1422:	f2 cf       	rjmp	.-28     	; 0x1408 <ATM_Add_CardData+0x50>
				}
				
				u8_Index_str++;
				
			}
			if(u8_Index_Num != 9 )
    1424:	19 30       	cpi	r17, 0x09	; 9
    1426:	21 f0       	breq	.+8      	; 0x1430 <ATM_Add_CardData+0x78>
			{
				String_F_PrintLine(PSTR("!!!!!!Please enter 9 Numbers only !!!!!!!"));
    1428:	84 e2       	ldi	r24, 0x24	; 36
    142a:	93 e0       	ldi	r25, 0x03	; 3
    142c:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
			}
			
		} while (u8_Index_Num != 9 );
    1430:	19 30       	cpi	r17, 0x09	; 9
    1432:	f1 f6       	brne	.-68     	; 0x13f0 <ATM_Add_CardData+0x38>
		do
		{
			u8_Index_str =0; u8_Index_Num =0;
			String_F_PrintLine(PSTR("Please enter Card PIN  :  "));
    1434:	89 e0       	ldi	r24, 0x09	; 9
    1436:	93 e0       	ldi	r25, 0x03	; 3
    1438:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
			ATM_Terminal_GetString(TempCard.CardPIN , CARD_PIN_LEN);
    143c:	65 e0       	ldi	r22, 0x05	; 5
    143e:	ce 01       	movw	r24, r28
    1440:	47 96       	adiw	r24, 0x17	; 23
    1442:	0e 94 bc 09 	call	0x1378	; 0x1378 <ATM_Terminal_GetString>
			}
			
		} while (u8_Index_Num != 9 );
		do
		{
			u8_Index_str =0; u8_Index_Num =0;
    1446:	10 e0       	ldi	r17, 0x00	; 0
    1448:	90 e0       	ldi	r25, 0x00	; 0
			String_F_PrintLine(PSTR("Please enter Card PIN  :  "));
			ATM_Terminal_GetString(TempCard.CardPIN , CARD_PIN_LEN);
			while(TempCard.CardPIN[u8_Index_str] != '\0')
    144a:	05 c0       	rjmp	.+10     	; 0x1456 <ATM_Add_CardData+0x9e>
			{
				if((TempCard.CardPIN[u8_Index_str] >= 0x30 ) && ( TempCard.CardPIN[u8_Index_str] <= 0x39))
    144c:	80 53       	subi	r24, 0x30	; 48
    144e:	8a 30       	cpi	r24, 0x0A	; 10
    1450:	08 f4       	brcc	.+2      	; 0x1454 <ATM_Add_CardData+0x9c>
				{
					u8_Index_Num++ ;
    1452:	1f 5f       	subi	r17, 0xFF	; 255
				}
				
				u8_Index_str++;
    1454:	9f 5f       	subi	r25, 0xFF	; 255
		do
		{
			u8_Index_str =0; u8_Index_Num =0;
			String_F_PrintLine(PSTR("Please enter Card PIN  :  "));
			ATM_Terminal_GetString(TempCard.CardPIN , CARD_PIN_LEN);
			while(TempCard.CardPIN[u8_Index_str] != '\0')
    1456:	e7 e1       	ldi	r30, 0x17	; 23
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	ec 0f       	add	r30, r28
    145c:	fd 1f       	adc	r31, r29
    145e:	e9 0f       	add	r30, r25
    1460:	f1 1d       	adc	r31, r1
    1462:	80 81       	ld	r24, Z
    1464:	81 11       	cpse	r24, r1
    1466:	f2 cf       	rjmp	.-28     	; 0x144c <ATM_Add_CardData+0x94>
				}
				
				u8_Index_str++;
				
			}
			if(u8_Index_Num != 4 )
    1468:	14 30       	cpi	r17, 0x04	; 4
    146a:	21 f0       	breq	.+8      	; 0x1474 <ATM_Add_CardData+0xbc>
			{
				String_F_PrintLine(PSTR("Please enter 4 Numbers only "));
    146c:	8c ee       	ldi	r24, 0xEC	; 236
    146e:	92 e0       	ldi	r25, 0x02	; 2
    1470:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
			}
			
		} while (u8_Index_Num != 4 );
    1474:	14 30       	cpi	r17, 0x04	; 4
    1476:	f1 f6       	brne	.-68     	; 0x1434 <ATM_Add_CardData+0x7c>

			String_F_PrintLine(PSTR("Please enter Card Total Balance "));
    1478:	8b ec       	ldi	r24, 0xCB	; 203
    147a:	92 e0       	ldi	r25, 0x02	; 2
    147c:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
		ATM_Terminal_GetString(TempCard.CardBalance , CARD_BALANCE_LEN+1);	
    1480:	67 e0       	ldi	r22, 0x07	; 7
    1482:	ce 01       	movw	r24, r28
    1484:	4d 96       	adiw	r24, 0x1d	; 29
    1486:	0e 94 bc 09 	call	0x1378	; 0x1378 <ATM_Terminal_GetString>
		/********************************************************
		*					Add Card Data	to SERVER			*
		********************************************************/						
		flag = SERVER_OPER_Add_CARD(&TempCard);
    148a:	ce 01       	movw	r24, r28
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <SERVER_OPER_Add_CARD>
				
		if (flag == SERVER_OPER_OK ) // if SERVER returned with Success operation 
    1492:	81 11       	cpse	r24, r1
    1494:	05 c0       	rjmp	.+10     	; 0x14a0 <ATM_Add_CardData+0xe8>
		{		
			String_F_PrintLine(PSTR("Great a new Card added successfully"));
    1496:	87 ea       	ldi	r24, 0xA7	; 167
    1498:	92 e0       	ldi	r25, 0x02	; 2
    149a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    149e:	0b c0       	rjmp	.+22     	; 0x14b6 <ATM_Add_CardData+0xfe>
		}
		else if (flag == SERVER_OPER_FullSpace)
    14a0:	83 30       	cpi	r24, 0x03	; 3
    14a2:	29 f4       	brne	.+10     	; 0x14ae <ATM_Add_CardData+0xf6>
		{
			String_F_PrintLine(PSTR("There is no enough space !!!"));
    14a4:	8a e8       	ldi	r24, 0x8A	; 138
    14a6:	92 e0       	ldi	r25, 0x02	; 2
    14a8:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    14ac:	04 c0       	rjmp	.+8      	; 0x14b6 <ATM_Add_CardData+0xfe>
		}else{
			String_F_PrintLine(PSTR("this card already exist !!!"));
    14ae:	8e e6       	ldi	r24, 0x6E	; 110
    14b0:	92 e0       	ldi	r25, 0x02	; 2
    14b2:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
		}
				
}
    14b6:	a3 96       	adiw	r28, 0x23	; 35
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	08 95       	ret

000014cc <ATM_Remove_Card>:

void ATM_Remove_Card(void)
{
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	a3 97       	sbiw	r28, 0x23	; 35
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
		CardData_t TempCard = {0};	
    14e4:	8e 01       	movw	r16, r28
    14e6:	0f 5f       	subi	r16, 0xFF	; 255
    14e8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ea:	83 e2       	ldi	r24, 0x23	; 35
    14ec:	f8 01       	movw	r30, r16
    14ee:	11 92       	st	Z+, r1
    14f0:	8a 95       	dec	r24
    14f2:	e9 f7       	brne	.-6      	; 0x14ee <ATM_Remove_Card+0x22>
			String_F_PrintLine(PSTR("Please enter Card PAN :"));
    14f4:	86 e5       	ldi	r24, 0x56	; 86
    14f6:	92 e0       	ldi	r25, 0x02	; 2
    14f8:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
			ATM_Terminal_GetString(TempCard.CardPAN , CARD_PAN_LEN+1);
    14fc:	6b e0       	ldi	r22, 0x0B	; 11
    14fe:	ce 01       	movw	r24, r28
    1500:	0c 96       	adiw	r24, 0x0c	; 12
    1502:	0e 94 bc 09 	call	0x1378	; 0x1378 <ATM_Terminal_GetString>
				
		/********************************************************
		*				Search Card Data From DataBase			*
		********************************************************/ 
		if (SERVER_OPER_Remove_CARD(&TempCard)  == SERVER_OPER_OK ) // if Card data is exist 
    1506:	c8 01       	movw	r24, r16
    1508:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <SERVER_OPER_Remove_CARD>
    150c:	81 11       	cpse	r24, r1
    150e:	05 c0       	rjmp	.+10     	; 0x151a <ATM_Remove_Card+0x4e>
		{		
			String_F_PrintLine(PSTR("Wait Until remove this Card Data :"));
    1510:	83 e3       	ldi	r24, 0x33	; 51
    1512:	92 e0       	ldi	r25, 0x02	; 2
    1514:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    1518:	04 c0       	rjmp	.+8      	; 0x1522 <ATM_Remove_Card+0x56>
		}else  // if  Card data dose not exist 
		{	
			String_F_PrintLine(PSTR("Not exist Card Data :"));
    151a:	8d e1       	ldi	r24, 0x1D	; 29
    151c:	92 e0       	ldi	r25, 0x02	; 2
    151e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
		}

}
    1522:	a3 96       	adiw	r28, 0x23	; 35
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	08 95       	ret

00001538 <ATM_Search_Card_WithPAN>:


SERVER_OPER_Status_t ATM_Search_Card_WithPAN(void)
{
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	a3 97       	sbiw	r28, 0x23	; 35
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
	CardData_t TempCard = {0};
    1550:	8e 01       	movw	r16, r28
    1552:	0f 5f       	subi	r16, 0xFF	; 255
    1554:	1f 4f       	sbci	r17, 0xFF	; 255
    1556:	83 e2       	ldi	r24, 0x23	; 35
    1558:	f8 01       	movw	r30, r16
    155a:	11 92       	st	Z+, r1
    155c:	8a 95       	dec	r24
    155e:	e9 f7       	brne	.-6      	; 0x155a <ATM_Search_Card_WithPAN+0x22>
		String_F_PrintLine(PSTR("Please enter Card PAN"));
    1560:	87 e0       	ldi	r24, 0x07	; 7
    1562:	92 e0       	ldi	r25, 0x02	; 2
    1564:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
		ATM_Terminal_GetString(TempCard.CardPAN , CARD_PAN_LEN+1);
    1568:	6b e0       	ldi	r22, 0x0B	; 11
    156a:	ce 01       	movw	r24, r28
    156c:	0c 96       	adiw	r24, 0x0c	; 12
    156e:	0e 94 bc 09 	call	0x1378	; 0x1378 <ATM_Terminal_GetString>
	// access SERVER here and return result
	if (SERVER_OPER_Search_CARD(&TempCard , ATM_SEARCH_BY_PAN)  != 0xffff ) // if data exist
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	c8 01       	movw	r24, r16
    1576:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <SERVER_OPER_Search_CARD>
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	31 f0       	breq	.+12     	; 0x158a <ATM_Search_Card_WithPAN+0x52>
	{
		String_F_PrintLine(PSTR("This card Is Exist"));		
    157e:	84 ef       	ldi	r24, 0xF4	; 244
    1580:	91 e0       	ldi	r25, 0x01	; 1
    1582:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
		return  SERVER_OPER_Exist ;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	05 c0       	rjmp	.+10     	; 0x1594 <ATM_Search_Card_WithPAN+0x5c>
	}else  // if data dose not exist
	{
		String_F_PrintLine(PSTR("Not exist Card Data"));
    158a:	80 ee       	ldi	r24, 0xE0	; 224
    158c:	91 e0       	ldi	r25, 0x01	; 1
    158e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
		return  SERVER_OPER_Not_Exist ;
    1592:	82 e0       	ldi	r24, 0x02	; 2
	}
}
    1594:	a3 96       	adiw	r28, 0x23	; 35
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	1f 91       	pop	r17
    15a6:	0f 91       	pop	r16
    15a8:	08 95       	ret

000015aa <ATM_Search_Card_ByName>:

void ATM_Search_Card_ByName(void)
{
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	a3 97       	sbiw	r28, 0x23	; 35
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
	CardData_t TempCard = {0};	
    15c2:	8e 01       	movw	r16, r28
    15c4:	0f 5f       	subi	r16, 0xFF	; 255
    15c6:	1f 4f       	sbci	r17, 0xFF	; 255
    15c8:	83 e2       	ldi	r24, 0x23	; 35
    15ca:	f8 01       	movw	r30, r16
    15cc:	11 92       	st	Z+, r1
    15ce:	8a 95       	dec	r24
    15d0:	e9 f7       	brne	.-6      	; 0x15cc <ATM_Search_Card_ByName+0x22>
	String_F_PrintLine(PSTR("Please enter Card Name:"));
    15d2:	8a e8       	ldi	r24, 0x8A	; 138
    15d4:	9b e0       	ldi	r25, 0x0B	; 11
    15d6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
	ATM_Terminal_GetString(TempCard.CardName , CARD_NAME_LEN );
    15da:	6a e0       	ldi	r22, 0x0A	; 10
    15dc:	c8 01       	movw	r24, r16
    15de:	0e 94 bc 09 	call	0x1378	; 0x1378 <ATM_Terminal_GetString>
	// access SERVER here and return result
	if (SERVER_OPER_Search_CARD(&TempCard , ATM_SEARCH_BY_NAME)  != 0xffff ) // if card data is exist
    15e2:	61 e0       	ldi	r22, 0x01	; 1
    15e4:	c8 01       	movw	r24, r16
    15e6:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <SERVER_OPER_Search_CARD>
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	29 f0       	breq	.+10     	; 0x15f8 <ATM_Search_Card_ByName+0x4e>
	{
		String_F_PrintLine(PSTR("This card  Is Exist"));
    15ee:	86 e7       	ldi	r24, 0x76	; 118
    15f0:	9b e0       	ldi	r25, 0x0B	; 11
    15f2:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    15f6:	04 c0       	rjmp	.+8      	; 0x1600 <ATM_Search_Card_ByName+0x56>
	}else  // if data dose is not exist
	{
		String_F_PrintLine(PSTR("This card Is not Exist"));
    15f8:	8f e5       	ldi	r24, 0x5F	; 95
    15fa:	9b e0       	ldi	r25, 0x0B	; 11
    15fc:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
	}
}
    1600:	a3 96       	adiw	r28, 0x23	; 35
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	08 95       	ret

00001616 <ATM_Admin_Modifying_Data>:



void ATM_Admin_Modifying_Data(void)
{
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	ae 97       	sbiw	r28, 0x2e	; 46
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
	uint8_t ExitFlag = 0 , command =0  ;
    162c:	19 82       	std	Y+1, r1	; 0x01
	CardData_t TempCard = {0};
    162e:	fe 01       	movw	r30, r28
    1630:	32 96       	adiw	r30, 0x02	; 2
    1632:	83 e2       	ldi	r24, 0x23	; 35
    1634:	df 01       	movw	r26, r30
    1636:	1d 92       	st	X+, r1
    1638:	8a 95       	dec	r24
    163a:	e9 f7       	brne	.-6      	; 0x1636 <ATM_Admin_Modifying_Data+0x20>



void ATM_Admin_Modifying_Data(void)
{
	uint8_t ExitFlag = 0 , command =0  ;
    163c:	10 e0       	ldi	r17, 0x00	; 0
	CardData_t TempCard = {0};
	uint8_t MaxDailyWithDraw[MaxDailyWithDraw_Size]  ;
	while(!ExitFlag)
    163e:	d8 c0       	rjmp	.+432    	; 0x17f0 <ATM_Admin_Modifying_Data+0x1da>
	{

		String_F_PrintLine(PSTR("Please Choose one of the following Commands "));
    1640:	82 e3       	ldi	r24, 0x32	; 50
    1642:	9b e0       	ldi	r25, 0x0B	; 11
    1644:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
		printf_P(PSTR("***************** 1- Set Admin Password and Name *************\n" ));
    1648:	82 ef       	ldi	r24, 0xF2	; 242
    164a:	9a e0       	ldi	r25, 0x0A	; 10
    164c:	9f 93       	push	r25
    164e:	8f 93       	push	r24
    1650:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
		printf_P(PSTR("***************** 2- Set Admin Maximum Temperature ***********\n" ));
    1654:	82 eb       	ldi	r24, 0xB2	; 178
    1656:	9a e0       	ldi	r25, 0x0A	; 10
    1658:	9f 93       	push	r25
    165a:	8f 93       	push	r24
    165c:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
		printf_P(PSTR("***************** 3- Clear Error Flag ************************\n" ));
    1660:	82 e7       	ldi	r24, 0x72	; 114
    1662:	9a e0       	ldi	r25, 0x0A	; 10
    1664:	9f 93       	push	r25
    1666:	8f 93       	push	r24
    1668:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
		printf_P(PSTR("***************** 4- Set Max Daily Amount ********************\n" ));
    166c:	82 e3       	ldi	r24, 0x32	; 50
    166e:	9a e0       	ldi	r25, 0x0A	; 10
    1670:	9f 93       	push	r25
    1672:	8f 93       	push	r24
    1674:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
		printf_P(PSTR("***************** 5- Exit ************************************\n" ));
    1678:	82 ef       	ldi	r24, 0xF2	; 242
    167a:	99 e0       	ldi	r25, 0x09	; 9
    167c:	9f 93       	push	r25
    167e:	8f 93       	push	r24
    1680:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
		String_F_PrintLine(PSTR("END OF SELECTION !!!"));
    1684:	8d ed       	ldi	r24, 0xDD	; 221
    1686:	99 e0       	ldi	r25, 0x09	; 9
    1688:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
		HAL_UART_RECEIVE(&UART_Handler , &command , 0x01) ;
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	be 01       	movw	r22, r28
    1692:	6f 5f       	subi	r22, 0xFF	; 255
    1694:	7f 4f       	sbci	r23, 0xFF	; 255
    1696:	87 e7       	ldi	r24, 0x77	; 119
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <HAL_UART_RECEIVE>
		printf_P(PSTR(" \n" ));
    169e:	8a ed       	ldi	r24, 0xDA	; 218
    16a0:	99 e0       	ldi	r25, 0x09	; 9
    16a2:	9f 93       	push	r25
    16a4:	8f 93       	push	r24
    16a6:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
		switch(command)
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	83 33       	cpi	r24, 0x33	; 51
    16b8:	09 f4       	brne	.+2      	; 0x16bc <ATM_Admin_Modifying_Data+0xa6>
    16ba:	65 c0       	rjmp	.+202    	; 0x1786 <ATM_Admin_Modifying_Data+0x170>
    16bc:	28 f4       	brcc	.+10     	; 0x16c8 <ATM_Admin_Modifying_Data+0xb2>
    16be:	81 33       	cpi	r24, 0x31	; 49
    16c0:	51 f0       	breq	.+20     	; 0x16d6 <ATM_Admin_Modifying_Data+0xc0>
    16c2:	82 33       	cpi	r24, 0x32	; 50
    16c4:	d1 f1       	breq	.+116    	; 0x173a <ATM_Admin_Modifying_Data+0x124>
    16c6:	94 c0       	rjmp	.+296    	; 0x17f0 <ATM_Admin_Modifying_Data+0x1da>
    16c8:	84 33       	cpi	r24, 0x34	; 52
    16ca:	09 f4       	brne	.+2      	; 0x16ce <ATM_Admin_Modifying_Data+0xb8>
    16cc:	6b c0       	rjmp	.+214    	; 0x17a4 <ATM_Admin_Modifying_Data+0x18e>
    16ce:	85 33       	cpi	r24, 0x35	; 53
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <ATM_Admin_Modifying_Data+0xbe>
    16d2:	89 c0       	rjmp	.+274    	; 0x17e6 <ATM_Admin_Modifying_Data+0x1d0>
    16d4:	8d c0       	rjmp	.+282    	; 0x17f0 <ATM_Admin_Modifying_Data+0x1da>
		{
			case ATM_ADMIN_COMMAN_SET_PASS :
				String_F_PrintLine(PSTR("Please enter a new admin name :"));
    16d6:	8a eb       	ldi	r24, 0xBA	; 186
    16d8:	99 e0       	ldi	r25, 0x09	; 9
    16da:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
				ATM_Terminal_GetString(TempCard.CardName , CARD_NAME_LEN );
    16de:	6a e0       	ldi	r22, 0x0A	; 10
    16e0:	ce 01       	movw	r24, r28
    16e2:	02 96       	adiw	r24, 0x02	; 2
    16e4:	0e 94 bc 09 	call	0x1378	; 0x1378 <ATM_Terminal_GetString>
				String_F_PrintLine(PSTR("Please enter a new admin pass :"));
    16e8:	8a e9       	ldi	r24, 0x9A	; 154
    16ea:	99 e0       	ldi	r25, 0x09	; 9
    16ec:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
				ATM_Terminal_GetString(TempCard.CardPAN , CARD_NAME_LEN );
    16f0:	6a e0       	ldi	r22, 0x0A	; 10
    16f2:	ce 01       	movw	r24, r28
    16f4:	0d 96       	adiw	r24, 0x0d	; 13
    16f6:	0e 94 bc 09 	call	0x1378	; 0x1378 <ATM_Terminal_GetString>
				String_F_PrintLine(PSTR("wait !!!  \n"));			
    16fa:	8e e8       	ldi	r24, 0x8E	; 142
    16fc:	99 e0       	ldi	r25, 0x09	; 9
    16fe:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    1702:	9f ef       	ldi	r25, 0xFF	; 255
    1704:	ad e3       	ldi	r26, 0x3D	; 61
    1706:	b9 e4       	ldi	r27, 0x49	; 73
    1708:	91 50       	subi	r25, 0x01	; 1
    170a:	a0 40       	sbci	r26, 0x00	; 0
    170c:	b0 40       	sbci	r27, 0x00	; 0
    170e:	e1 f7       	brne	.-8      	; 0x1708 <ATM_Admin_Modifying_Data+0xf2>
    1710:	00 c0       	rjmp	.+0      	; 0x1712 <ATM_Admin_Modifying_Data+0xfc>
    1712:	00 00       	nop
				_delay_ms(ATM_DLEAY_IN_S);
				if( SERVER_ADMIN_Set_Pass(TempCard.CardName , TempCard.CardPAN) == SERVER_OPER_OK )
    1714:	be 01       	movw	r22, r28
    1716:	63 5f       	subi	r22, 0xF3	; 243
    1718:	7f 4f       	sbci	r23, 0xFF	; 255
    171a:	ce 01       	movw	r24, r28
    171c:	02 96       	adiw	r24, 0x02	; 2
    171e:	0e 94 45 10 	call	0x208a	; 0x208a <SERVER_ADMIN_Set_Pass>
    1722:	81 11       	cpse	r24, r1
    1724:	05 c0       	rjmp	.+10     	; 0x1730 <ATM_Admin_Modifying_Data+0x11a>
				{
					String_F_PrintLine(PSTR("Admin Data Stored Successfully"));
    1726:	8f e6       	ldi	r24, 0x6F	; 111
    1728:	99 e0       	ldi	r25, 0x09	; 9
    172a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    172e:	60 c0       	rjmp	.+192    	; 0x17f0 <ATM_Admin_Modifying_Data+0x1da>
				}else
				{
				String_F_PrintLine(PSTR("Please Try Again "));
    1730:	8d e5       	ldi	r24, 0x5D	; 93
    1732:	99 e0       	ldi	r25, 0x09	; 9
    1734:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    1738:	5b c0       	rjmp	.+182    	; 0x17f0 <ATM_Admin_Modifying_Data+0x1da>
				}
			
				break;
			case  ATM_ADMIN_COMMAN_SET_TEMP :
				String_F_PrintLine(PSTR("Enter a new admin MAX Temp value: "));
    173a:	8a e3       	ldi	r24, 0x3A	; 58
    173c:	99 e0       	ldi	r25, 0x09	; 9
    173e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
				ATM_Terminal_GetString(TempCard.CardName , CARD_NAME_LEN );
    1742:	6a e0       	ldi	r22, 0x0A	; 10
    1744:	ce 01       	movw	r24, r28
    1746:	02 96       	adiw	r24, 0x02	; 2
    1748:	0e 94 bc 09 	call	0x1378	; 0x1378 <ATM_Terminal_GetString>
				String_F_PrintLine(PSTR("wait !!!  \n"));				
    174c:	8e e2       	ldi	r24, 0x2E	; 46
    174e:	99 e0       	ldi	r25, 0x09	; 9
    1750:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    1754:	2f ef       	ldi	r18, 0xFF	; 255
    1756:	8d e3       	ldi	r24, 0x3D	; 61
    1758:	99 e4       	ldi	r25, 0x49	; 73
    175a:	21 50       	subi	r18, 0x01	; 1
    175c:	80 40       	sbci	r24, 0x00	; 0
    175e:	90 40       	sbci	r25, 0x00	; 0
    1760:	e1 f7       	brne	.-8      	; 0x175a <ATM_Admin_Modifying_Data+0x144>
    1762:	00 c0       	rjmp	.+0      	; 0x1764 <ATM_Admin_Modifying_Data+0x14e>
    1764:	00 00       	nop
				_delay_ms(ATM_DLEAY_IN_S);
				if( SERVER_ADMIN_Set_Temp(TempCard.CardName) == SERVER_OPER_OK )
    1766:	ce 01       	movw	r24, r28
    1768:	02 96       	adiw	r24, 0x02	; 2
    176a:	0e 94 9b 10 	call	0x2136	; 0x2136 <SERVER_ADMIN_Set_Temp>
    176e:	81 11       	cpse	r24, r1
    1770:	05 c0       	rjmp	.+10     	; 0x177c <ATM_Admin_Modifying_Data+0x166>
				{
					String_F_PrintLine(PSTR("Admin Data Stored Successfully"));			
    1772:	8f e0       	ldi	r24, 0x0F	; 15
    1774:	99 e0       	ldi	r25, 0x09	; 9
    1776:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    177a:	3a c0       	rjmp	.+116    	; 0x17f0 <ATM_Admin_Modifying_Data+0x1da>
				}else
				{
					String_F_PrintLine(PSTR("Please Try Again"));
    177c:	8e ef       	ldi	r24, 0xFE	; 254
    177e:	98 e0       	ldi	r25, 0x08	; 8
    1780:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    1784:	35 c0       	rjmp	.+106    	; 0x17f0 <ATM_Admin_Modifying_Data+0x1da>
				}
			
				break;
			case ATM_ADMIN_ERROR_CLEAR :
				if( SERVER_ADMIN_Error( ADMIN_ERROR_CLEAR ) == SERVER_OPER_OK )
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	0e 94 c3 10 	call	0x2186	; 0x2186 <SERVER_ADMIN_Error>
    178c:	81 11       	cpse	r24, r1
    178e:	05 c0       	rjmp	.+10     	; 0x179a <ATM_Admin_Modifying_Data+0x184>
				{
					String_F_PrintLine(PSTR("Error Cleared Successfully"));
    1790:	83 ee       	ldi	r24, 0xE3	; 227
    1792:	98 e0       	ldi	r25, 0x08	; 8
    1794:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    1798:	2b c0       	rjmp	.+86     	; 0x17f0 <ATM_Admin_Modifying_Data+0x1da>
				}else
				{
					String_F_PrintLine(PSTR("Error Does Not Cleared Successfully !!!!"));
    179a:	8a eb       	ldi	r24, 0xBA	; 186
    179c:	98 e0       	ldi	r25, 0x08	; 8
    179e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    17a2:	26 c0       	rjmp	.+76     	; 0x17f0 <ATM_Admin_Modifying_Data+0x1da>
				}
				break;
			case ATM_ADMIN_MAX_Daliy_Amount :
					String_F_PrintLine(PSTR("Please Enter the MAx Daily Amount"));
    17a4:	88 e9       	ldi	r24, 0x98	; 152
    17a6:	98 e0       	ldi	r25, 0x08	; 8
    17a8:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
					ATM_Terminal_GetString(MaxDailyWithDraw , MaxDailyWithDraw_Size);
    17ac:	6a e0       	ldi	r22, 0x0A	; 10
    17ae:	ce 01       	movw	r24, r28
    17b0:	85 96       	adiw	r24, 0x25	; 37
    17b2:	0e 94 bc 09 	call	0x1378	; 0x1378 <ATM_Terminal_GetString>
					printf_P(PSTR(" \n" ));			 
    17b6:	85 e9       	ldi	r24, 0x95	; 149
    17b8:	98 e0       	ldi	r25, 0x08	; 8
    17ba:	9f 93       	push	r25
    17bc:	8f 93       	push	r24
    17be:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
				if(SERVER_ADMIN_Set_MAximum_DailyAmount(MaxDailyWithDraw) == SERVER_OPER_OK )
    17c2:	ce 01       	movw	r24, r28
    17c4:	85 96       	adiw	r24, 0x25	; 37
    17c6:	0e 94 30 11 	call	0x2260	; 0x2260 <SERVER_ADMIN_Set_MAximum_DailyAmount>
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	81 11       	cpse	r24, r1
    17d0:	05 c0       	rjmp	.+10     	; 0x17dc <ATM_Admin_Modifying_Data+0x1c6>
				{
					String_F_PrintLine(PSTR("Maximum Daily Amount Successfully"));
    17d2:	83 e7       	ldi	r24, 0x73	; 115
    17d4:	98 e0       	ldi	r25, 0x08	; 8
    17d6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    17da:	0a c0       	rjmp	.+20     	; 0x17f0 <ATM_Admin_Modifying_Data+0x1da>
				}else
				{
					String_F_PrintLine(PSTR("Maximum Daily Amount Does Not Set Successfully !!!!"));
    17dc:	8f e3       	ldi	r24, 0x3F	; 63
    17de:	98 e0       	ldi	r25, 0x08	; 8
    17e0:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    17e4:	05 c0       	rjmp	.+10     	; 0x17f0 <ATM_Admin_Modifying_Data+0x1da>
				}
				break;
			case ATM_ADMIN_Exit :
				String_F_PrintLine(PSTR("EXIT Admin Modifying mode successfully"));
    17e6:	88 e1       	ldi	r24, 0x18	; 24
    17e8:	98 e0       	ldi	r25, 0x08	; 8
    17ea:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
				ExitFlag = 1 ;
    17ee:	11 e0       	ldi	r17, 0x01	; 1
void ATM_Admin_Modifying_Data(void)
{
	uint8_t ExitFlag = 0 , command =0  ;
	CardData_t TempCard = {0};
	uint8_t MaxDailyWithDraw[MaxDailyWithDraw_Size]  ;
	while(!ExitFlag)
    17f0:	11 23       	and	r17, r17
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <ATM_Admin_Modifying_Data+0x1e0>
    17f4:	25 cf       	rjmp	.-438    	; 0x1640 <ATM_Admin_Modifying_Data+0x2a>
			
			
				break;
				}
		}
}
    17f6:	ae 96       	adiw	r28, 0x2e	; 46
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	1f 91       	pop	r17
    1808:	08 95       	ret

0000180a <ATM_Programming_mode>:




void ATM_Programming_mode(void)
{
    180a:	cf 93       	push	r28
 	uint8_t ExitFlag = 0 ;
	uint8_t command = 0; 
	
	
	LCD_Send_String_WithLoc(1,1,ReadStr_F(LCD_StrF[LCD_Print_enter_Programing] ));	
    180c:	86 ea       	ldi	r24, 0xA6	; 166
    180e:	9c e0       	ldi	r25, 0x0C	; 12
    1810:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    1814:	ac 01       	movw	r20, r24
    1816:	61 e0       	ldi	r22, 0x01	; 1
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
	LCD_Send_String_WithLoc(2,1,ReadStr_F(LCD_StrF[LCD_Print_Mode] ));
    181e:	8a eb       	ldi	r24, 0xBA	; 186
    1820:	9c e0       	ldi	r25, 0x0C	; 12
    1822:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    1826:	ac 01       	movw	r20, r24
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
	String_F_PrintTwoLines(LCD_StrF[LCD_Print_enter_Programing] , LCD_StrF[LCD_Print_Mode]);
    1830:	6a eb       	ldi	r22, 0xBA	; 186
    1832:	7c e0       	ldi	r23, 0x0C	; 12
    1834:	86 ea       	ldi	r24, 0xA6	; 166
    1836:	9c e0       	ldi	r25, 0x0C	; 12
    1838:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <String_F_PrintTwoLines>
    183c:	2f ef       	ldi	r18, 0xFF	; 255
    183e:	8d e3       	ldi	r24, 0x3D	; 61
    1840:	99 e4       	ldi	r25, 0x49	; 73
    1842:	21 50       	subi	r18, 0x01	; 1
    1844:	80 40       	sbci	r24, 0x00	; 0
    1846:	90 40       	sbci	r25, 0x00	; 0
    1848:	e1 f7       	brne	.-8      	; 0x1842 <ATM_Programming_mode+0x38>
    184a:	00 c0       	rjmp	.+0      	; 0x184c <ATM_Programming_mode+0x42>
    184c:	00 00       	nop
	
	
	
	_delay_ms(ATM_DLEAY_IN_S );
	LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
	LCD_Send_String_WithLoc(1,1,ReadStr_F(LCD_StrF[LCD_Print_Programing_Mode]));
    1854:	8e ec       	ldi	r24, 0xCE	; 206
    1856:	9c e0       	ldi	r25, 0x0C	; 12
    1858:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    185c:	ac 01       	movw	r20, r24
    185e:	61 e0       	ldi	r22, 0x01	; 1
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
	String_F_PrintTwoLines(LCD_StrF[LCD_COMMANED_CLEAR_LCD] , LCD_StrF[LCD_Print_Programing_Mode]);
    1866:	6e ec       	ldi	r22, 0xCE	; 206
    1868:	7c e0       	ldi	r23, 0x0C	; 12
    186a:	86 eb       	ldi	r24, 0xB6	; 182
    186c:	9b e0       	ldi	r25, 0x0B	; 11
    186e:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <String_F_PrintTwoLines>
    1872:	2f ef       	ldi	r18, 0xFF	; 255
    1874:	8d e3       	ldi	r24, 0x3D	; 61
    1876:	99 e4       	ldi	r25, 0x49	; 73
    1878:	21 50       	subi	r18, 0x01	; 1
    187a:	80 40       	sbci	r24, 0x00	; 0
    187c:	90 40       	sbci	r25, 0x00	; 0
    187e:	e1 f7       	brne	.-8      	; 0x1878 <ATM_Programming_mode+0x6e>
    1880:	00 c0       	rjmp	.+0      	; 0x1882 <ATM_Programming_mode+0x78>
    1882:	00 00       	nop



void ATM_Programming_mode(void)
{
 	uint8_t ExitFlag = 0 ;
    1884:	c0 e0       	ldi	r28, 0x00	; 0
    1886:	6e c0       	rjmp	.+220    	; 0x1964 <ATM_Programming_mode+0x15a>
	
	
	while(!ExitFlag)
	{
		
		command =  ATM_Get_UserCommand();
    1888:	0e 94 e7 08 	call	0x11ce	; 0x11ce <ATM_Get_UserCommand>
		switch(command)
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	fc 01       	movw	r30, r24
    1890:	f1 97       	sbiw	r30, 0x31	; 49
    1892:	e8 30       	cpi	r30, 0x08	; 8
    1894:	f1 05       	cpc	r31, r1
    1896:	08 f0       	brcs	.+2      	; 0x189a <ATM_Programming_mode+0x90>
    1898:	61 c0       	rjmp	.+194    	; 0x195c <ATM_Programming_mode+0x152>
    189a:	e6 5d       	subi	r30, 0xD6	; 214
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__tablejump2__>
			case  ATM_ADD_Card :		// Add card
			
				/********************************************************
				*					Collect Card Data					*
				********************************************************/
			  	ATM_Add_CardData() ;
    18a2:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <ATM_Add_CardData>
				break; 	
    18a6:	5e c0       	rjmp	.+188    	; 0x1964 <ATM_Programming_mode+0x15a>
			case ATM_REMOVE_CARD :		// Remove Card 
				/********************************************************
				*			Remove Card Data From DataBase				*
				********************************************************/
				ATM_Remove_Card();
    18a8:	0e 94 66 0a 	call	0x14cc	; 0x14cc <ATM_Remove_Card>
				break;	
    18ac:	5b c0       	rjmp	.+182    	; 0x1964 <ATM_Programming_mode+0x15a>
			case  ATM_SEARCH_FOR_CARD_PAN :		// Search For Specific Card
			
					/********************************************************
					*				Search Card Data in DataBase			*
					********************************************************/ 		 
					ATM_Search_Card_WithPAN();
    18ae:	0e 94 9c 0a 	call	0x1538	; 0x1538 <ATM_Search_Card_WithPAN>
					break;				
    18b2:	58 c0       	rjmp	.+176    	; 0x1964 <ATM_Programming_mode+0x15a>
					
			case  ATM_SEARCH_FOR_CARD_NAME :
					/********************************************************
					*		Search Card Data With Name In DataBASE			*
					********************************************************/ 		
					ATM_Search_Card_ByName();
    18b4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <ATM_Search_Card_ByName>
					break;					
    18b8:	55 c0       	rjmp	.+170    	; 0x1964 <ATM_Programming_mode+0x15a>
				
			case   ATM_TOTAL_NUM_OF_CARDs :	
				/********************************************************
				*			Return Total Num Of Installed Card 			*
				********************************************************/ 
					printf_P(PSTR("****************************************************\n"));
    18ba:	82 ee       	ldi	r24, 0xE2	; 226
    18bc:	97 e0       	ldi	r25, 0x07	; 7
    18be:	9f 93       	push	r25
    18c0:	8f 93       	push	r24
    18c2:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
					printf_P(PSTR("***** The Number of Installed Cards is :" ));
    18c6:	89 eb       	ldi	r24, 0xB9	; 185
    18c8:	97 e0       	ldi	r25, 0x07	; 7
    18ca:	9f 93       	push	r25
    18cc:	8f 93       	push	r24
    18ce:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
					printf("%i" , SERVER_OPER_GetTotal_CARDNum());
    18d2:	0e 94 2f 10 	call	0x205e	; 0x205e <SERVER_OPER_GetTotal_CARDNum>
    18d6:	9f 93       	push	r25
    18d8:	8f 93       	push	r24
    18da:	8c e3       	ldi	r24, 0x3C	; 60
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	9f 93       	push	r25
    18e0:	8f 93       	push	r24
    18e2:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <printf>
					printf_P(PSTR("*********** \n"));
    18e6:	8b ea       	ldi	r24, 0xAB	; 171
    18e8:	97 e0       	ldi	r25, 0x07	; 7
    18ea:	9f 93       	push	r25
    18ec:	8f 93       	push	r24
    18ee:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
					printf_P(PSTR("****************************************************\n"	));
    18f2:	85 e7       	ldi	r24, 0x75	; 117
    18f4:	97 e0       	ldi	r25, 0x07	; 7
    18f6:	9f 93       	push	r25
    18f8:	8f 93       	push	r24
    18fa:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
					printf_P(PSTR(" \n" ));
    18fe:	82 e7       	ldi	r24, 0x72	; 114
    1900:	97 e0       	ldi	r25, 0x07	; 7
    1902:	9f 93       	push	r25
    1904:	8f 93       	push	r24
    1906:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
				break;
    190a:	8d b7       	in	r24, 0x3d	; 61
    190c:	9e b7       	in	r25, 0x3e	; 62
    190e:	0e 96       	adiw	r24, 0x0e	; 14
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	9e bf       	out	0x3e, r25	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	8d bf       	out	0x3d, r24	; 61
    191a:	24 c0       	rjmp	.+72     	; 0x1964 <ATM_Programming_mode+0x15a>
			case   ATM_RESET_DATA_BASE :	
				/********************************************************
				*					Reset Database			 			*
				********************************************************/				
				if(SERVER_OPER_DataBase_Reset() == SERVER_OPER_OK)
    191c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <SERVER_OPER_DataBase_Reset>
    1920:	81 11       	cpse	r24, r1
    1922:	05 c0       	rjmp	.+10     	; 0x192e <ATM_Programming_mode+0x124>
				{
					String_F_PrintLine(PSTR("Deleted successfully"));
    1924:	8d e5       	ldi	r24, 0x5D	; 93
    1926:	97 e0       	ldi	r25, 0x07	; 7
    1928:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    192c:	1b c0       	rjmp	.+54     	; 0x1964 <ATM_Programming_mode+0x15a>
				}else{

					String_F_PrintLine(PSTR("problem With Data Base Call Service Support"));
    192e:	81 e3       	ldi	r24, 0x31	; 49
    1930:	97 e0       	ldi	r25, 0x07	; 7
    1932:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    1936:	16 c0       	rjmp	.+44     	; 0x1964 <ATM_Programming_mode+0x15a>
				break;
			case  ATM_ADMIN_MODIFY :
				/********************************************************
				*					Modify Admin Data 					*
				********************************************************/		
				ATM_Admin_Modifying_Data();
    1938:	0e 94 0b 0b 	call	0x1616	; 0x1616 <ATM_Admin_Modifying_Data>
				break;
    193c:	13 c0       	rjmp	.+38     	; 0x1964 <ATM_Programming_mode+0x15a>
			case    ATM_EXIT_PROGRAMMING_MODE :
				/********************************************************
				*			Switching to Operating Mode					*
				********************************************************/
				String_F_PrintLine(PSTR("wait !!!"));
    193e:	88 e2       	ldi	r24, 0x28	; 40
    1940:	97 e0       	ldi	r25, 0x07	; 7
    1942:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
    1946:	9f ef       	ldi	r25, 0xFF	; 255
    1948:	2d e3       	ldi	r18, 0x3D	; 61
    194a:	89 e4       	ldi	r24, 0x49	; 73
    194c:	91 50       	subi	r25, 0x01	; 1
    194e:	20 40       	sbci	r18, 0x00	; 0
    1950:	80 40       	sbci	r24, 0x00	; 0
    1952:	e1 f7       	brne	.-8      	; 0x194c <ATM_Programming_mode+0x142>
    1954:	00 c0       	rjmp	.+0      	; 0x1956 <ATM_Programming_mode+0x14c>
    1956:	00 00       	nop
				_delay_ms(ATM_DLEAY_IN_S);
				ExitFlag = 1 ;
    1958:	c1 e0       	ldi	r28, 0x01	; 1
			break;				
    195a:	04 c0       	rjmp	.+8      	; 0x1964 <ATM_Programming_mode+0x15a>
			default:
				/********************************************************
				*			Handling All Wrong Commands					*
				********************************************************/			
				String_F_PrintLine(PSTR("Wrong chose Please Try again"));
    195c:	8b e0       	ldi	r24, 0x0B	; 11
    195e:	97 e0       	ldi	r25, 0x07	; 7
    1960:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
	String_F_PrintTwoLines(LCD_StrF[LCD_COMMANED_CLEAR_LCD] , LCD_StrF[LCD_Print_Programing_Mode]);

	_delay_ms(ATM_DLEAY_IN_S);
	
	
	while(!ExitFlag)
    1964:	cc 23       	and	r28, r28
    1966:	09 f4       	brne	.+2      	; 0x196a <ATM_Programming_mode+0x160>
    1968:	8f cf       	rjmp	.-226    	; 0x1888 <ATM_Programming_mode+0x7e>
				break ;
			
			
		}	
	}
}
    196a:	cf 91       	pop	r28
    196c:	08 95       	ret

0000196e <ATM_Operation_mode>:
		uint8_t ExitFlag =0 ; 
void ATM_Operation_mode(void)
{	
	uint8_t index =0 ;
	uint8_t	CommandFlag  =0 ;	
	LCD_Send_String_WithLoc(1,1,ReadStr_F(LCD_StrF[LCD_Print_WELCOME_OPERATE]));
    196e:	82 ea       	ldi	r24, 0xA2	; 162
    1970:	9b e0       	ldi	r25, 0x0B	; 11
    1972:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    1976:	ac 01       	movw	r20, r24
    1978:	61 e0       	ldi	r22, 0x01	; 1
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
	LCD_Send_String_WithLoc(2,1,ReadStr_F(LCD_StrF[LCD_Print_MODE]));
    1980:	86 eb       	ldi	r24, 0xB6	; 182
    1982:	9b e0       	ldi	r25, 0x0B	; 11
    1984:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    1988:	ac 01       	movw	r20, r24
    198a:	61 e0       	ldi	r22, 0x01	; 1
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
	String_F_PrintTwoLines(LCD_StrF[LCD_Print_WELCOME_OPERATE] , LCD_StrF[LCD_Print_MODE]);
    1992:	66 eb       	ldi	r22, 0xB6	; 182
    1994:	7b e0       	ldi	r23, 0x0B	; 11
    1996:	82 ea       	ldi	r24, 0xA2	; 162
    1998:	9b e0       	ldi	r25, 0x0B	; 11
    199a:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <String_F_PrintTwoLines>
    199e:	2f ef       	ldi	r18, 0xFF	; 255
    19a0:	8d e3       	ldi	r24, 0x3D	; 61
    19a2:	99 e4       	ldi	r25, 0x49	; 73
    19a4:	21 50       	subi	r18, 0x01	; 1
    19a6:	80 40       	sbci	r24, 0x00	; 0
    19a8:	90 40       	sbci	r25, 0x00	; 0
    19aa:	e1 f7       	brne	.-8      	; 0x19a4 <ATM_Operation_mode+0x36>
    19ac:	00 c0       	rjmp	.+0      	; 0x19ae <ATM_Operation_mode+0x40>
    19ae:	00 00       	nop

	_delay_ms(ATM_DLEAY_IN_S);

	ExitFlag =0 ;
    19b0:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <ExitFlag>
	while(!ExitFlag)
    19b4:	f8 c1       	rjmp	.+1008   	; 0x1da6 <ATM_Operation_mode+0x438>
	{
		index = 0 , KeyPad_Key = 0;
    19b6:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <KeyPad_Key>
		memset(TempBlance , 0 , ADMIN_MAX_DAILY_LEN);
    19ba:	86 e0       	ldi	r24, 0x06	; 6
    19bc:	e5 eb       	ldi	r30, 0xB5	; 181
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	df 01       	movw	r26, r30
    19c2:	1d 92       	st	X+, r1
    19c4:	8a 95       	dec	r24
    19c6:	e9 f7       	brne	.-6      	; 0x19c2 <ATM_Operation_mode+0x54>

		LCD_Send_Command(LCD_COMMANED_CLEAR_LCD) ;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
		LCD_Send_String_WithLoc(1,1,ReadStr_F(LCD_StrF[LCD_Print_PLEASE_ENTER]));
    19ce:	8a ec       	ldi	r24, 0xCA	; 202
    19d0:	9b e0       	ldi	r25, 0x0B	; 11
    19d2:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    19d6:	ac 01       	movw	r20, r24
    19d8:	61 e0       	ldi	r22, 0x01	; 1
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
		LCD_Send_String_WithLoc(2,1,ReadStr_F(LCD_StrF[LCD_Print_CARD]));
    19e0:	8e ed       	ldi	r24, 0xDE	; 222
    19e2:	9b e0       	ldi	r25, 0x0B	; 11
    19e4:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    19e8:	ac 01       	movw	r20, r24
    19ea:	61 e0       	ldi	r22, 0x01	; 1
    19ec:	82 e0       	ldi	r24, 0x02	; 2
    19ee:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>



		String_F_PrintTwoLines(LCD_StrF[LCD_Print_PLEASE_ENTER] , LCD_StrF[LCD_Print_CARD]);
    19f2:	6e ed       	ldi	r22, 0xDE	; 222
    19f4:	7b e0       	ldi	r23, 0x0B	; 11
    19f6:	8a ec       	ldi	r24, 0xCA	; 202
    19f8:	9b e0       	ldi	r25, 0x0B	; 11
    19fa:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <String_F_PrintTwoLines>
		while(Button_Read(ATM_Buttons, ATM_Insert_Card_Button_INDEX) == State_HIGH);
    19fe:	60 e0       	ldi	r22, 0x00	; 0
    1a00:	81 e7       	ldi	r24, 0x71	; 113
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	0e 94 75 15 	call	0x2aea	; 0x2aea <Button_Read>
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	c9 f3       	breq	.-14     	; 0x19fe <ATM_Operation_mode+0x90>
		if(Button_Read(ATM_Buttons, ATM_Insert_Card_Button_INDEX) == State_LOW)
    1a0c:	60 e0       	ldi	r22, 0x00	; 0
    1a0e:	81 e7       	ldi	r24, 0x71	; 113
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 75 15 	call	0x2aea	; 0x2aea <Button_Read>
    1a16:	81 11       	cpse	r24, r1
    1a18:	67 c1       	rjmp	.+718    	; 0x1ce8 <ATM_Operation_mode+0x37a>
		{
			 ATM_Collect_CardData(&CardData);
    1a1a:	81 e1       	ldi	r24, 0x11	; 17
    1a1c:	92 e0       	ldi	r25, 0x02	; 2
    1a1e:	0e 94 6d 09 	call	0x12da	; 0x12da <ATM_Collect_CardData>
			CardAdd = SERVER_OPER_Search_CARD(&CardData , ATM_SEARCH_BY_PAN) ;
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	81 e1       	ldi	r24, 0x11	; 17
    1a26:	92 e0       	ldi	r25, 0x02	; 2
    1a28:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <SERVER_OPER_Search_CARD>
    1a2c:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <CardAdd+0x1>
    1a30:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <CardAdd>
		
		if ( CardAdd != 0xffff ) // if data exist
    1a34:	8f 3f       	cpi	r24, 0xFF	; 255
    1a36:	bf ef       	ldi	r27, 0xFF	; 255
    1a38:	9b 07       	cpc	r25, r27
    1a3a:	e9 f0       	breq	.+58     	; 0x1a76 <ATM_Operation_mode+0x108>
		{
			EEPROM_ReadByteS(CardAdd , (uint8_t *)&TempCardData , ATM_CARD_BLOCK_SIZE);	
    1a3c:	44 e2       	ldi	r20, 0x24	; 36
    1a3e:	6b ec       	ldi	r22, 0xCB	; 203
    1a40:	71 e0       	ldi	r23, 0x01	; 1
    1a42:	0e 94 81 14 	call	0x2902	; 0x2902 <EEPROM_ReadByteS>
			CardBalance = atoi((char *)TempCardData.CardBalance) ;
    1a46:	87 ee       	ldi	r24, 0xE7	; 231
    1a48:	91 e0       	ldi	r25, 0x01	; 1
    1a4a:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <atoi>
    1a4e:	09 2e       	mov	r0, r25
    1a50:	00 0c       	add	r0, r0
    1a52:	aa 0b       	sbc	r26, r26
    1a54:	bb 0b       	sbc	r27, r27
    1a56:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <CardBalance>
    1a5a:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <CardBalance+0x1>
    1a5e:	a0 93 b3 00 	sts	0x00B3, r26	; 0x8000b3 <CardBalance+0x2>
    1a62:	b0 93 b4 00 	sts	0x00B4, r27	; 0x8000b4 <CardBalance+0x3>
			String_F_PrintLine(PSTR("This card Is Exist"));
    1a66:	8d ec       	ldi	r24, 0xCD	; 205
    1a68:	91 e0       	ldi	r25, 0x01	; 1
    1a6a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
			CardDataExist = 1 ;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <CardDataExist>
    1a74:	06 c0       	rjmp	.+12     	; 0x1a82 <ATM_Operation_mode+0x114>
		}else  // if data dose not exist
		{
			String_F_PrintLine(PSTR("Not exist Card Data"));
    1a76:	89 eb       	ldi	r24, 0xB9	; 185
    1a78:	91 e0       	ldi	r25, 0x01	; 1
    1a7a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
			CardDataExist = 0 ; 
    1a7e:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <CardDataExist>
		}			
		
			
		
			if (CardDataExist == 1)
    1a82:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <CardDataExist>
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <ATM_Operation_mode+0x11e>
    1a8a:	2e c1       	rjmp	.+604    	; 0x1ce8 <ATM_Operation_mode+0x37a>
			{
				
				
				LCD_Send_Command( LCD_COMMANED_CLEAR_LCD );
    1a8c:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
				LCD_Send_String_WithLoc(1,1,ReadStr_F(LCD_StrF[LCD_Print_ENTER_THE]));
    1a90:	82 ef       	ldi	r24, 0xF2	; 242
    1a92:	9b e0       	ldi	r25, 0x0B	; 11
    1a94:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    1a98:	ac 01       	movw	r20, r24
    1a9a:	61 e0       	ldi	r22, 0x01	; 1
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
				LCD_Send_String_WithLoc(2,1,ReadStr_F(LCD_StrF[LCD_Print_TRANSAC_AMOUNT]));
    1aa2:	86 e0       	ldi	r24, 0x06	; 6
    1aa4:	9c e0       	ldi	r25, 0x0C	; 12
    1aa6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    1aaa:	ac 01       	movw	r20, r24
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	82 e0       	ldi	r24, 0x02	; 2
    1ab0:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
				String_F_PrintTwoLines(LCD_StrF[LCD_Print_ENTER_THE] , LCD_StrF[LCD_Print_TRANSAC_AMOUNT]);
    1ab4:	66 e0       	ldi	r22, 0x06	; 6
    1ab6:	7c e0       	ldi	r23, 0x0C	; 12
    1ab8:	82 ef       	ldi	r24, 0xF2	; 242
    1aba:	9b e0       	ldi	r25, 0x0B	; 11
    1abc:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <String_F_PrintTwoLines>
    1ac0:	2f ef       	ldi	r18, 0xFF	; 255
    1ac2:	8d e3       	ldi	r24, 0x3D	; 61
    1ac4:	99 e4       	ldi	r25, 0x49	; 73
    1ac6:	21 50       	subi	r18, 0x01	; 1
    1ac8:	80 40       	sbci	r24, 0x00	; 0
    1aca:	90 40       	sbci	r25, 0x00	; 0
    1acc:	e1 f7       	brne	.-8      	; 0x1ac6 <ATM_Operation_mode+0x158>
    1ace:	00 c0       	rjmp	.+0      	; 0x1ad0 <ATM_Operation_mode+0x162>
    1ad0:	00 00       	nop
				_delay_ms(ATM_DLEAY_IN_S);
				
				
				
				String_F_PrintTwoLines(LCD_StrF[LCD_Print_ENTER_THE] , LCD_StrF[LCD_Print_TRANSAC_AMOUNT]);
    1ad2:	66 e0       	ldi	r22, 0x06	; 6
    1ad4:	7c e0       	ldi	r23, 0x0C	; 12
    1ad6:	82 ef       	ldi	r24, 0xF2	; 242
    1ad8:	9b e0       	ldi	r25, 0x0B	; 11
    1ada:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <String_F_PrintTwoLines>
				LCD_Send_Command( LCD_COMMANED_CLEAR_LCD );
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
				LCD_Send_String_WithLoc(1,1,(uint8_t *) ReadStr_F(LCD_StrF[LCD_Print_TRANSACTION]));
    1ae4:	8a e1       	ldi	r24, 0x1A	; 26
    1ae6:	9c e0       	ldi	r25, 0x0C	; 12
    1ae8:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    1aec:	ac 01       	movw	r20, r24
    1aee:	61 e0       	ldi	r22, 0x01	; 1
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
				LCD_Goto_Location(2,1);
    1af6:	61 e0       	ldi	r22, 0x01	; 1
    1af8:	82 e0       	ldi	r24, 0x02	; 2
    1afa:	0e 94 a1 12 	call	0x2542	; 0x2542 <LCD_Goto_Location>
				String_F_PrintLine(LCD_StrF[LCD_Print_TRANSACTION] );
    1afe:	8a e1       	ldi	r24, 0x1A	; 26
    1b00:	9c e0       	ldi	r25, 0x0C	; 12
    1b02:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
	_delay_ms(ATM_DLEAY_IN_S);

	ExitFlag =0 ;
	while(!ExitFlag)
	{
		index = 0 , KeyPad_Key = 0;
    1b06:	c0 e0       	ldi	r28, 0x00	; 0
    1b08:	13 c0       	rjmp	.+38     	; 0x1b30 <ATM_Operation_mode+0x1c2>
    1b0a:	af ef       	ldi	r26, 0xFF	; 255
    1b0c:	b3 ec       	ldi	r27, 0xC3	; 195
    1b0e:	29 e0       	ldi	r18, 0x09	; 9
    1b10:	a1 50       	subi	r26, 0x01	; 1
    1b12:	b0 40       	sbci	r27, 0x00	; 0
    1b14:	20 40       	sbci	r18, 0x00	; 0
    1b16:	e1 f7       	brne	.-8      	; 0x1b10 <ATM_Operation_mode+0x1a2>
    1b18:	00 c0       	rjmp	.+0      	; 0x1b1a <ATM_Operation_mode+0x1ac>
    1b1a:	00 00       	nop
				while(1)
				{
					while(KeyPad_Key == 0)
					{
						_delay_ms(200);
						KeyPad_Key = KeyPad_GetPressedKey(&KeyPad);
    1b1c:	8b eb       	ldi	r24, 0xBB	; 187
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 81 11 	call	0x2302	; 0x2302 <KeyPad_GetPressedKey>
    1b24:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <KeyPad_Key>
						if((KeyPad_Key == '*'))	KeyPad_Key= 0 ; 
    1b28:	8a 32       	cpi	r24, 0x2A	; 42
    1b2a:	11 f4       	brne	.+4      	; 0x1b30 <ATM_Operation_mode+0x1c2>
    1b2c:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <KeyPad_Key>
				LCD_Goto_Location(2,1);
				String_F_PrintLine(LCD_StrF[LCD_Print_TRANSACTION] );
				
				while(1)
				{
					while(KeyPad_Key == 0)
    1b30:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <KeyPad_Key>
    1b34:	88 23       	and	r24, r24
    1b36:	49 f3       	breq	.-46     	; 0x1b0a <ATM_Operation_mode+0x19c>
						_delay_ms(200);
						KeyPad_Key = KeyPad_GetPressedKey(&KeyPad);
						if((KeyPad_Key == '*'))	KeyPad_Key= 0 ; 
					
					}
					if (KeyPad_Key == '#')
    1b38:	83 32       	cpi	r24, 0x23	; 35
    1b3a:	71 f0       	breq	.+28     	; 0x1b58 <ATM_Operation_mode+0x1ea>
					{
						break; 
					}else
					{
					
						LCD_Send_Character_CurrLoc('*');
    1b3c:	8a e2       	ldi	r24, 0x2A	; 42
    1b3e:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_Send_Character_CurrLoc>
						TempBlance[index++] = KeyPad_Key ;
    1b42:	ec 2f       	mov	r30, r28
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	eb 54       	subi	r30, 0x4B	; 75
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <KeyPad_Key>
    1b4e:	80 83       	st	Z, r24
						KeyPad_Key = 0 ;
    1b50:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <KeyPad_Key>
						break; 
					}else
					{
					
						LCD_Send_Character_CurrLoc('*');
						TempBlance[index++] = KeyPad_Key ;
    1b54:	cf 5f       	subi	r28, 0xFF	; 255
						KeyPad_Key = 0 ;
					}
				
				
				}
    1b56:	ec cf       	rjmp	.-40     	; 0x1b30 <ATM_Operation_mode+0x1c2>
			
			
				// Get Card PAN and Balance from  CARD 
				UserTransAmount = atoi( (char *)TempBlance ) ;
    1b58:	85 eb       	ldi	r24, 0xB5	; 181
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <atoi>
    1b60:	09 2e       	mov	r0, r25
    1b62:	00 0c       	add	r0, r0
    1b64:	aa 0b       	sbc	r26, r26
    1b66:	bb 0b       	sbc	r27, r27
    1b68:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <UserTransAmount>
    1b6c:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <UserTransAmount+0x1>
    1b70:	a0 93 c3 01 	sts	0x01C3, r26	; 0x8001c3 <UserTransAmount+0x2>
    1b74:	b0 93 c4 01 	sts	0x01C4, r27	; 0x8001c4 <UserTransAmount+0x3>
				LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
				LCD_Send_Integer_CurrLoc(UserTransAmount , 7);
    1b7e:	67 e0       	ldi	r22, 0x07	; 7
    1b80:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <UserTransAmount>
    1b84:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <UserTransAmount+0x1>
    1b88:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_Send_Integer_CurrLoc>
    1b8c:	8f ef       	ldi	r24, 0xFF	; 255
    1b8e:	9d e3       	ldi	r25, 0x3D	; 61
    1b90:	a9 e4       	ldi	r26, 0x49	; 73
    1b92:	81 50       	subi	r24, 0x01	; 1
    1b94:	90 40       	sbci	r25, 0x00	; 0
    1b96:	a0 40       	sbci	r26, 0x00	; 0
    1b98:	e1 f7       	brne	.-8      	; 0x1b92 <ATM_Operation_mode+0x224>
    1b9a:	00 c0       	rjmp	.+0      	; 0x1b9c <ATM_Operation_mode+0x22e>
    1b9c:	00 00       	nop
				_delay_ms(ATM_DLEAY_IN_S);
				if((UserTransAmount > MaxDailyWithDraw) || (UserTransAmount > CardBalance))
    1b9e:	40 91 c1 01 	lds	r20, 0x01C1	; 0x8001c1 <UserTransAmount>
    1ba2:	50 91 c2 01 	lds	r21, 0x01C2	; 0x8001c2 <UserTransAmount+0x1>
    1ba6:	60 91 c3 01 	lds	r22, 0x01C3	; 0x8001c3 <UserTransAmount+0x2>
    1baa:	70 91 c4 01 	lds	r23, 0x01C4	; 0x8001c4 <UserTransAmount+0x3>
    1bae:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <MaxDailyWithDraw>
    1bb2:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <MaxDailyWithDraw+0x1>
    1bb6:	a0 91 af 00 	lds	r26, 0x00AF	; 0x8000af <MaxDailyWithDraw+0x2>
    1bba:	b0 91 b0 00 	lds	r27, 0x00B0	; 0x8000b0 <MaxDailyWithDraw+0x3>
    1bbe:	84 17       	cp	r24, r20
    1bc0:	95 07       	cpc	r25, r21
    1bc2:	a6 07       	cpc	r26, r22
    1bc4:	b7 07       	cpc	r27, r23
    1bc6:	68 f0       	brcs	.+26     	; 0x1be2 <ATM_Operation_mode+0x274>
    1bc8:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <CardBalance>
    1bcc:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <CardBalance+0x1>
    1bd0:	a0 91 b3 00 	lds	r26, 0x00B3	; 0x8000b3 <CardBalance+0x2>
    1bd4:	b0 91 b4 00 	lds	r27, 0x00B4	; 0x8000b4 <CardBalance+0x3>
    1bd8:	84 17       	cp	r24, r20
    1bda:	95 07       	cpc	r25, r21
    1bdc:	a6 07       	cpc	r26, r22
    1bde:	b7 07       	cpc	r27, r23
    1be0:	28 f5       	brcc	.+74     	; 0x1c2c <ATM_Operation_mode+0x2be>
				{
					LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
					LCD_Send_String_WithLoc(1,1,ReadStr_F(LCD_StrF[LCD_Print_Wrong]));
    1be8:	8e e2       	ldi	r24, 0x2E	; 46
    1bea:	9c e0       	ldi	r25, 0x0C	; 12
    1bec:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    1bf0:	ac 01       	movw	r20, r24
    1bf2:	61 e0       	ldi	r22, 0x01	; 1
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
					LCD_Send_String_WithLoc(2,1,ReadStr_F(LCD_StrF[LCD_Print_Transaction]));
    1bfa:	82 e4       	ldi	r24, 0x42	; 66
    1bfc:	9c e0       	ldi	r25, 0x0C	; 12
    1bfe:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    1c02:	ac 01       	movw	r20, r24
    1c04:	61 e0       	ldi	r22, 0x01	; 1
    1c06:	82 e0       	ldi	r24, 0x02	; 2
    1c08:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
					String_F_PrintTwoLines(LCD_StrF[LCD_Print_Wrong] , LCD_StrF[LCD_Print_Transaction] );
    1c0c:	62 e4       	ldi	r22, 0x42	; 66
    1c0e:	7c e0       	ldi	r23, 0x0C	; 12
    1c10:	8e e2       	ldi	r24, 0x2E	; 46
    1c12:	9c e0       	ldi	r25, 0x0C	; 12
    1c14:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <String_F_PrintTwoLines>
    1c18:	bf ef       	ldi	r27, 0xFF	; 255
    1c1a:	2d e3       	ldi	r18, 0x3D	; 61
    1c1c:	89 e4       	ldi	r24, 0x49	; 73
    1c1e:	b1 50       	subi	r27, 0x01	; 1
    1c20:	20 40       	sbci	r18, 0x00	; 0
    1c22:	80 40       	sbci	r24, 0x00	; 0
    1c24:	e1 f7       	brne	.-8      	; 0x1c1e <ATM_Operation_mode+0x2b0>
    1c26:	00 c0       	rjmp	.+0      	; 0x1c28 <ATM_Operation_mode+0x2ba>
    1c28:	00 00       	nop
    1c2a:	5e c0       	rjmp	.+188    	; 0x1ce8 <ATM_Operation_mode+0x37a>

					_delay_ms(ATM_DLEAY_IN_S); 
				}else{
					// right transaction
					CardBalance -= UserTransAmount ; 
    1c2c:	84 1b       	sub	r24, r20
    1c2e:	95 0b       	sbc	r25, r21
    1c30:	a6 0b       	sbc	r26, r22
    1c32:	b7 0b       	sbc	r27, r23
    1c34:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <CardBalance>
    1c38:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <CardBalance+0x1>
    1c3c:	a0 93 b3 00 	sts	0x00B3, r26	; 0x8000b3 <CardBalance+0x2>
    1c40:	b0 93 b4 00 	sts	0x00B4, r27	; 0x8000b4 <CardBalance+0x3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1c44:	4a e0       	ldi	r20, 0x0A	; 10
    1c46:	67 ee       	ldi	r22, 0xE7	; 231
    1c48:	71 e0       	ldi	r23, 0x01	; 1
    1c4a:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <__itoa_ncheck>
					itoa(CardBalance , (char *)TempCardData.CardBalance , 10 ) ;
					LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
					LCD_Send_Integer_CurrLoc(CardBalance , 7);
    1c54:	c1 eb       	ldi	r28, 0xB1	; 177
    1c56:	d0 e0       	ldi	r29, 0x00	; 0
    1c58:	67 e0       	ldi	r22, 0x07	; 7
    1c5a:	88 81       	ld	r24, Y
    1c5c:	99 81       	ldd	r25, Y+1	; 0x01
    1c5e:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_Send_Integer_CurrLoc>
					printf("Current  balance is : %lu \n" , CardBalance);
    1c62:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <CardBalance+0x3>
    1c66:	8f 93       	push	r24
    1c68:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <CardBalance+0x2>
    1c6c:	8f 93       	push	r24
    1c6e:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <CardBalance+0x1>
    1c72:	8f 93       	push	r24
    1c74:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <CardBalance>
    1c78:	8f 93       	push	r24
    1c7a:	8f e3       	ldi	r24, 0x3F	; 63
    1c7c:	91 e0       	ldi	r25, 0x01	; 1
    1c7e:	9f 93       	push	r25
    1c80:	8f 93       	push	r24
    1c82:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <printf>
					EEPROM_WriteByteS(CardAdd , (uint8_t *)&TempCardData , ATM_CARD_BLOCK_SIZE);
    1c86:	44 e2       	ldi	r20, 0x24	; 36
    1c88:	6b ec       	ldi	r22, 0xCB	; 203
    1c8a:	71 e0       	ldi	r23, 0x01	; 1
    1c8c:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <CardAdd>
    1c90:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <CardAdd+0x1>
    1c94:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <EEPROM_WriteByteS>
					LCD_Send_String_WithLoc(1,1,(uint8_t *)"Current");
    1c98:	4b e5       	ldi	r20, 0x5B	; 91
    1c9a:	51 e0       	ldi	r21, 0x01	; 1
    1c9c:	61 e0       	ldi	r22, 0x01	; 1
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
					LCD_Send_String_WithLoc(2,1,(uint8_t *)"Balance is ");
    1ca4:	43 e6       	ldi	r20, 0x63	; 99
    1ca6:	51 e0       	ldi	r21, 0x01	; 1
    1ca8:	61 e0       	ldi	r22, 0x01	; 1
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
					LCD_Send_Integer_CurrLoc(CardBalance , 5 );
    1cb0:	65 e0       	ldi	r22, 0x05	; 5
    1cb2:	88 81       	ld	r24, Y
    1cb4:	99 81       	ldd	r25, Y+1	; 0x01
    1cb6:	0e 94 2d 13 	call	0x265a	; 0x265a <LCD_Send_Integer_CurrLoc>
					Motor_Dir( DIR_LEFT , 70);
    1cba:	66 e4       	ldi	r22, 0x46	; 70
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	0e 94 0c 14 	call	0x2818	; 0x2818 <Motor_Dir>
    1cc2:	9f ef       	ldi	r25, 0xFF	; 255
    1cc4:	a3 ed       	ldi	r26, 0xD3	; 211
    1cc6:	b0 e3       	ldi	r27, 0x30	; 48
    1cc8:	91 50       	subi	r25, 0x01	; 1
    1cca:	a0 40       	sbci	r26, 0x00	; 0
    1ccc:	b0 40       	sbci	r27, 0x00	; 0
    1cce:	e1 f7       	brne	.-8      	; 0x1cc8 <ATM_Operation_mode+0x35a>
    1cd0:	00 c0       	rjmp	.+0      	; 0x1cd2 <ATM_Operation_mode+0x364>
    1cd2:	00 00       	nop
					_delay_ms(1000);
					Motor_Dir( DIR_LEFT , 0);
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	0e 94 0c 14 	call	0x2818	; 0x2818 <Motor_Dir>
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
			}
		}else
		{
			;
		}
		String_F_PrintLine(PSTR("Please Choose one of the following Commands "));
    1ce8:	8c e8       	ldi	r24, 0x8C	; 140
    1cea:	91 e0       	ldi	r25, 0x01	; 1
    1cec:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
		String_F_PrintTwoLines(PSTR("1- Try another Transaction   ") , PSTR("2- Exit  "));
    1cf0:	62 e8       	ldi	r22, 0x82	; 130
    1cf2:	71 e0       	ldi	r23, 0x01	; 1
    1cf4:	84 e6       	ldi	r24, 0x64	; 100
    1cf6:	91 e0       	ldi	r25, 0x01	; 1
    1cf8:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <String_F_PrintTwoLines>
		String_F_PrintLine(PSTR("END OF SELECTION !!!"));
    1cfc:	8f e4       	ldi	r24, 0x4F	; 79
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
		LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
		LCD_Send_String_WithLoc(1,1,(uint8_t *)"Select Command");
    1d0a:	4f e6       	ldi	r20, 0x6F	; 111
    1d0c:	51 e0       	ldi	r21, 0x01	; 1
    1d0e:	61 e0       	ldi	r22, 0x01	; 1
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
		LCD_Send_String_WithLoc(2,1,(uint8_t *)"1.Try   2.Exit");
    1d16:	4e e7       	ldi	r20, 0x7E	; 126
    1d18:	51 e0       	ldi	r21, 0x01	; 1
    1d1a:	61 e0       	ldi	r22, 0x01	; 1
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
 
		CommandFlag  = 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
		while(CommandFlag)
    1d24:	3e c0       	rjmp	.+124    	; 0x1da2 <ATM_Operation_mode+0x434>
		{
			
			KeyPad_Key = 0 ;
    1d26:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <KeyPad_Key>
			while(KeyPad_Key == 0)
    1d2a:	13 c0       	rjmp	.+38     	; 0x1d52 <ATM_Operation_mode+0x3e4>
    1d2c:	2f ef       	ldi	r18, 0xFF	; 255
    1d2e:	83 ec       	ldi	r24, 0xC3	; 195
    1d30:	99 e0       	ldi	r25, 0x09	; 9
    1d32:	21 50       	subi	r18, 0x01	; 1
    1d34:	80 40       	sbci	r24, 0x00	; 0
    1d36:	90 40       	sbci	r25, 0x00	; 0
    1d38:	e1 f7       	brne	.-8      	; 0x1d32 <ATM_Operation_mode+0x3c4>
    1d3a:	00 c0       	rjmp	.+0      	; 0x1d3c <ATM_Operation_mode+0x3ce>
    1d3c:	00 00       	nop
			{
				_delay_ms(200);
				KeyPad_Key = KeyPad_GetPressedKey(&KeyPad);
    1d3e:	8b eb       	ldi	r24, 0xBB	; 187
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 81 11 	call	0x2302	; 0x2302 <KeyPad_GetPressedKey>
    1d46:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <KeyPad_Key>
				if((KeyPad_Key == '*'))	KeyPad_Key= 0 ;
    1d4a:	8a 32       	cpi	r24, 0x2A	; 42
    1d4c:	11 f4       	brne	.+4      	; 0x1d52 <ATM_Operation_mode+0x3e4>
    1d4e:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <KeyPad_Key>
		CommandFlag  = 1;
		while(CommandFlag)
		{
			
			KeyPad_Key = 0 ;
			while(KeyPad_Key == 0)
    1d52:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <KeyPad_Key>
    1d56:	88 23       	and	r24, r24
    1d58:	49 f3       	breq	.-46     	; 0x1d2c <ATM_Operation_mode+0x3be>
				_delay_ms(200);
				KeyPad_Key = KeyPad_GetPressedKey(&KeyPad);
				if((KeyPad_Key == '*'))	KeyPad_Key= 0 ;
			
			}
			LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
			LCD_Send_String_WithLoc(1,1,(uint8_t *)"You Entered = ");
    1d60:	4d e8       	ldi	r20, 0x8D	; 141
    1d62:	51 e0       	ldi	r21, 0x01	; 1
    1d64:	61 e0       	ldi	r22, 0x01	; 1
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
			LCD_Send_Character_WithLoc(2,6,KeyPad_Key);
    1d6c:	40 91 c6 01 	lds	r20, 0x01C6	; 0x8001c6 <KeyPad_Key>
    1d70:	66 e0       	ldi	r22, 0x06	; 6
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	0e 94 be 12 	call	0x257c	; 0x257c <LCD_Send_Character_WithLoc>
			switch(KeyPad_Key)
    1d78:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <KeyPad_Key>
    1d7c:	81 33       	cpi	r24, 0x31	; 49
    1d7e:	19 f0       	breq	.+6      	; 0x1d86 <ATM_Operation_mode+0x418>
    1d80:	82 33       	cpi	r24, 0x32	; 50
    1d82:	29 f0       	breq	.+10     	; 0x1d8e <ATM_Operation_mode+0x420>
    1d84:	09 c0       	rjmp	.+18     	; 0x1d98 <ATM_Operation_mode+0x42a>
			{
				case '1' :
							ExitFlag = 0 ; 
    1d86:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <ExitFlag>
							CommandFlag = 0 ;
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
					break; 
    1d8c:	0a c0       	rjmp	.+20     	; 0x1da2 <ATM_Operation_mode+0x434>
					
				case '2' : 
							ExitFlag = 1 ;	
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ExitFlag>
							CommandFlag = 0 ;	
    1d94:	80 e0       	ldi	r24, 0x00	; 0
					break;
    1d96:	05 c0       	rjmp	.+10     	; 0x1da2 <ATM_Operation_mode+0x434>
			
				default: 	
					String_F_PrintLine(PSTR("Wrong Command!!!"));
    1d98:	8e e3       	ldi	r24, 0x3E	; 62
    1d9a:	91 e0       	ldi	r25, 0x01	; 1
    1d9c:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
					CommandFlag = 1 ;	
    1da0:	81 e0       	ldi	r24, 0x01	; 1
		LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
		LCD_Send_String_WithLoc(1,1,(uint8_t *)"Select Command");
		LCD_Send_String_WithLoc(2,1,(uint8_t *)"1.Try   2.Exit");
 
		CommandFlag  = 1;
		while(CommandFlag)
    1da2:	81 11       	cpse	r24, r1
    1da4:	c0 cf       	rjmp	.-128    	; 0x1d26 <ATM_Operation_mode+0x3b8>
	String_F_PrintTwoLines(LCD_StrF[LCD_Print_WELCOME_OPERATE] , LCD_StrF[LCD_Print_MODE]);

	_delay_ms(ATM_DLEAY_IN_S);

	ExitFlag =0 ;
	while(!ExitFlag)
    1da6:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ExitFlag>
    1daa:	88 23       	and	r24, r24
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <ATM_Operation_mode+0x442>
    1dae:	03 ce       	rjmp	.-1018   	; 0x19b6 <ATM_Operation_mode+0x48>
    1db0:	af ef       	ldi	r26, 0xFF	; 255
    1db2:	b7 ea       	ldi	r27, 0xA7	; 167
    1db4:	21 e6       	ldi	r18, 0x61	; 97
    1db6:	a1 50       	subi	r26, 0x01	; 1
    1db8:	b0 40       	sbci	r27, 0x00	; 0
    1dba:	20 40       	sbci	r18, 0x00	; 0
    1dbc:	e1 f7       	brne	.-8      	; 0x1db6 <ATM_Operation_mode+0x448>
    1dbe:	00 c0       	rjmp	.+0      	; 0x1dc0 <ATM_Operation_mode+0x452>
    1dc0:	00 00       	nop
				}
		}
	
	}
		_delay_ms(2000);
		String_F_PrintLine(PSTR("Thank You   "));
    1dc2:	81 e3       	ldi	r24, 0x31	; 49
    1dc4:	91 e0       	ldi	r25, 0x01	; 1
    1dc6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <String_F_PrintLine>
		LCD_Send_Command( LCD_COMMANED_CLEAR_LCD );
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
		LCD_Send_String_WithLoc(1,1,ReadStr_F(LCD_StrF[LCD_Print_THANK]));
    1dd0:	86 ef       	ldi	r24, 0xF6	; 246
    1dd2:	9c e0       	ldi	r25, 0x0C	; 12
    1dd4:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    1dd8:	ac 01       	movw	r20, r24
    1dda:	61 e0       	ldi	r22, 0x01	; 1
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
		LCD_Send_String_WithLoc(2,1,ReadStr_F(LCD_StrF[LCD_Print_YOU]));
    1de2:	8a e0       	ldi	r24, 0x0A	; 10
    1de4:	9d e0       	ldi	r25, 0x0D	; 13
    1de6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    1dea:	ac 01       	movw	r20, r24
    1dec:	61 e0       	ldi	r22, 0x01	; 1
    1dee:	82 e0       	ldi	r24, 0x02	; 2
    1df0:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
    1df4:	ff cf       	rjmp	.-2      	; 0x1df4 <ATM_Operation_mode+0x486>

00001df6 <ATM_Lock_Fun>:


void ATM_Lock_Fun(void)
{
	  
	LCD_Send_String_WithLoc(1,1,ReadStr_F(LCD_StrF[LCD_Print_ERROR_Temp]));
    1df6:	86 e5       	ldi	r24, 0x56	; 86
    1df8:	9c e0       	ldi	r25, 0x0C	; 12
    1dfa:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    1dfe:	ac 01       	movw	r20, r24
    1e00:	61 e0       	ldi	r22, 0x01	; 1
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
	LCD_Send_String_WithLoc(2,1,ReadStr_F(LCD_StrF[LCD_Print_CALL_XXXXXX]));
    1e08:	8a e6       	ldi	r24, 0x6A	; 106
    1e0a:	9c e0       	ldi	r25, 0x0C	; 12
    1e0c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <ReadStr_F>
    1e10:	ac 01       	movw	r20, r24
    1e12:	61 e0       	ldi	r22, 0x01	; 1
    1e14:	82 e0       	ldi	r24, 0x02	; 2
    1e16:	0e 94 1e 13 	call	0x263c	; 0x263c <LCD_Send_String_WithLoc>
	String_F_PrintTwoLines(PSTR("LOCKED") , PSTR("Please Call XXXX")  );
    1e1a:	61 e1       	ldi	r22, 0x11	; 17
    1e1c:	71 e0       	ldi	r23, 0x01	; 1
    1e1e:	8a e0       	ldi	r24, 0x0A	; 10
    1e20:	91 e0       	ldi	r25, 0x01	; 1
    1e22:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <String_F_PrintTwoLines>
    1e26:	ff cf       	rjmp	.-2      	; 0x1e26 <ATM_Lock_Fun+0x30>

00001e28 <SERVER_OPER_DataBase_Reset>:

#include "Server.h"


SERVER_OPER_Status_t SERVER_OPER_DataBase_Reset(void)
{
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <SERVER_OPER_DataBase_Reset+0x6>
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <SERVER_OPER_DataBase_Reset+0x8>
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62

	// add dummy card 
	uint16_t TXBuffer[2]  ={0,ATM_SERVER_CARD_START_ADD};
    1e34:	1a 82       	std	Y+2, r1	; 0x02
    1e36:	19 82       	std	Y+1, r1	; 0x01
    1e38:	8a ec       	ldi	r24, 0xCA	; 202
    1e3a:	9b e6       	ldi	r25, 0x6B	; 107
    1e3c:	9c 83       	std	Y+4, r25	; 0x04
    1e3e:	8b 83       	std	Y+3, r24	; 0x03
	EEPROM_WriteByteS(0, (uint8_t *)&TXBuffer ,4);			// write number of card 
    1e40:	44 e0       	ldi	r20, 0x04	; 4
    1e42:	be 01       	movw	r22, r28
    1e44:	6f 5f       	subi	r22, 0xFF	; 255
    1e46:	7f 4f       	sbci	r23, 0xFF	; 255
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <EEPROM_WriteByteS>
	
	return SERVER_OPER_OK ;
}
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	08 95       	ret

00001e60 <SERVER_OPER_Search_CARD>:
	return SERVER_OPER_OK ;
}

	CardData_t TempCardData = {0};	uint16_t TempAdd = 0 , TempNumCards =0 ;
uint16_t SERVER_OPER_Search_CARD(CardData_t * CardData , uint8_t SearchBase )
{
    1e60:	ff 92       	push	r15
    1e62:	0f 93       	push	r16
    1e64:	1f 93       	push	r17
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	8c 01       	movw	r16, r24
    1e6c:	f6 2e       	mov	r15, r22

	EEPROM_ReadByteS(0,(uint8_t*)&TempNumCards , 2);
    1e6e:	42 e0       	ldi	r20, 0x02	; 2
    1e70:	67 ec       	ldi	r22, 0xC7	; 199
    1e72:	71 e0       	ldi	r23, 0x01	; 1
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	0e 94 81 14 	call	0x2902	; 0x2902 <EEPROM_ReadByteS>
	if(TempNumCards == 0)	{printf_P(PSTR("Hint!!!! Empty DataBase \n")) ; return -1  ;}
    1e7c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <TempNumCards>
    1e80:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <TempNumCards+0x1>
    1e84:	89 2b       	or	r24, r25
    1e86:	09 f0       	breq	.+2      	; 0x1e8a <SERVER_OPER_Search_CARD+0x2a>
    1e88:	4c c0       	rjmp	.+152    	; 0x1f22 <SERVER_OPER_Search_CARD+0xc2>
    1e8a:	82 e3       	ldi	r24, 0x32	; 50
    1e8c:	9d e0       	ldi	r25, 0x0D	; 13
    1e8e:	9f 93       	push	r25
    1e90:	8f 93       	push	r24
    1e92:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	8f ef       	ldi	r24, 0xFF	; 255
    1e9c:	9f ef       	ldi	r25, 0xFF	; 255
    1e9e:	4d c0       	rjmp	.+154    	; 0x1f3a <SERVER_OPER_Search_CARD+0xda>
	for (uint16_t iter = 2 ; iter < ATM_SERVER_TOTAL_CAPCITY *  ATM_CARD_ADDRESS_SIZE ; iter += ATM_CARD_ADDRESS_SIZE)
	{
		EEPROM_ReadByteS(iter ,(uint8_t *)&TempAdd  , ATM_CARD_ADDRESS_SIZE);
    1ea0:	42 e0       	ldi	r20, 0x02	; 2
    1ea2:	69 ec       	ldi	r22, 0xC9	; 201
    1ea4:	71 e0       	ldi	r23, 0x01	; 1
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	0e 94 81 14 	call	0x2902	; 0x2902 <EEPROM_ReadByteS>
		if (TempAdd != 0xffffu)
    1eac:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <TempAdd>
    1eb0:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <TempAdd+0x1>
    1eb4:	8f 3f       	cpi	r24, 0xFF	; 255
    1eb6:	2f ef       	ldi	r18, 0xFF	; 255
    1eb8:	92 07       	cpc	r25, r18
    1eba:	89 f1       	breq	.+98     	; 0x1f1e <SERVER_OPER_Search_CARD+0xbe>
		{
			TempNumCards--;
    1ebc:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <TempNumCards>
    1ec0:	30 91 c8 01 	lds	r19, 0x01C8	; 0x8001c8 <TempNumCards+0x1>
    1ec4:	21 50       	subi	r18, 0x01	; 1
    1ec6:	31 09       	sbc	r19, r1
    1ec8:	30 93 c8 01 	sts	0x01C8, r19	; 0x8001c8 <TempNumCards+0x1>
    1ecc:	20 93 c7 01 	sts	0x01C7, r18	; 0x8001c7 <TempNumCards>
			EEPROM_ReadByteS(TempAdd , (uint8_t *)&TempCardData , ATM_CARD_BLOCK_SIZE );
    1ed0:	44 e2       	ldi	r20, 0x24	; 36
    1ed2:	6b ec       	ldi	r22, 0xCB	; 203
    1ed4:	71 e0       	ldi	r23, 0x01	; 1
    1ed6:	0e 94 81 14 	call	0x2902	; 0x2902 <EEPROM_ReadByteS>
			if ( ATM_SEARCH_BY_PAN == SearchBase)
    1eda:	f1 10       	cpse	r15, r1
    1edc:	0e c0       	rjmp	.+28     	; 0x1efa <SERVER_OPER_Search_CARD+0x9a>
			{
				if (strcmp((char *)TempCardData.CardPAN,(char *)CardData->CardPAN)== 0 )
    1ede:	b8 01       	movw	r22, r16
    1ee0:	65 5f       	subi	r22, 0xF5	; 245
    1ee2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee4:	86 ed       	ldi	r24, 0xD6	; 214
    1ee6:	91 e0       	ldi	r25, 0x01	; 1
    1ee8:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <strcmp>
    1eec:	89 2b       	or	r24, r25
    1eee:	89 f4       	brne	.+34     	; 0x1f12 <SERVER_OPER_Search_CARD+0xb2>
				{
					return TempAdd ;
    1ef0:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <TempAdd>
    1ef4:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <TempAdd+0x1>
    1ef8:	20 c0       	rjmp	.+64     	; 0x1f3a <SERVER_OPER_Search_CARD+0xda>
				}
			}else{
				
				if (strcmp((char *)TempCardData.CardName,(char *)CardData->CardName)== 0 )
    1efa:	b8 01       	movw	r22, r16
    1efc:	8b ec       	ldi	r24, 0xCB	; 203
    1efe:	91 e0       	ldi	r25, 0x01	; 1
    1f00:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <strcmp>
    1f04:	89 2b       	or	r24, r25
    1f06:	29 f4       	brne	.+10     	; 0x1f12 <SERVER_OPER_Search_CARD+0xb2>
				{
					return TempAdd ;
    1f08:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <TempAdd>
    1f0c:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <TempAdd+0x1>
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <SERVER_OPER_Search_CARD+0xda>

								
			}
			
							
			if (TempNumCards == 0)
    1f12:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <TempNumCards>
    1f16:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <TempNumCards+0x1>
    1f1a:	89 2b       	or	r24, r25
    1f1c:	61 f0       	breq	.+24     	; 0x1f36 <SERVER_OPER_Search_CARD+0xd6>
uint16_t SERVER_OPER_Search_CARD(CardData_t * CardData , uint8_t SearchBase )
{

	EEPROM_ReadByteS(0,(uint8_t*)&TempNumCards , 2);
	if(TempNumCards == 0)	{printf_P(PSTR("Hint!!!! Empty DataBase \n")) ; return -1  ;}
	for (uint16_t iter = 2 ; iter < ATM_SERVER_TOTAL_CAPCITY *  ATM_CARD_ADDRESS_SIZE ; iter += ATM_CARD_ADDRESS_SIZE)
    1f1e:	22 96       	adiw	r28, 0x02	; 2
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <SERVER_OPER_Search_CARD+0xc6>
    1f22:	c2 e0       	ldi	r28, 0x02	; 2
    1f24:	d0 e0       	ldi	r29, 0x00	; 0
    1f26:	ca 3c       	cpi	r28, 0xCA	; 202
    1f28:	8b e6       	ldi	r24, 0x6B	; 107
    1f2a:	d8 07       	cpc	r29, r24
    1f2c:	08 f4       	brcc	.+2      	; 0x1f30 <SERVER_OPER_Search_CARD+0xd0>
    1f2e:	b8 cf       	rjmp	.-144    	; 0x1ea0 <SERVER_OPER_Search_CARD+0x40>
		{
			;
		}
	}
	
	return -1 ; 
    1f30:	8f ef       	ldi	r24, 0xFF	; 255
    1f32:	9f ef       	ldi	r25, 0xFF	; 255
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <SERVER_OPER_Search_CARD+0xda>
			}
			
							
			if (TempNumCards == 0)
			{
				return -1 ;
    1f36:	8f ef       	ldi	r24, 0xFF	; 255
    1f38:	9f ef       	ldi	r25, 0xFF	; 255
			;
		}
	}
	
	return -1 ; 
}
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	ff 90       	pop	r15
    1f44:	08 95       	ret

00001f46 <SERVER_OPER_Add_CARD>:




SERVER_OPER_Status_t SERVER_OPER_Add_CARD(CardData_t * CardData)
{
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <SERVER_OPER_Add_CARD+0xa>
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <SERVER_OPER_Add_CARD+0xc>
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	8c 01       	movw	r16, r24

	uint16_t NewAdd = 0 , NumOfCards  =0	;
    1f58:	1a 82       	std	Y+2, r1	; 0x02
    1f5a:	19 82       	std	Y+1, r1	; 0x01
    1f5c:	1c 82       	std	Y+4, r1	; 0x04
    1f5e:	1b 82       	std	Y+3, r1	; 0x03
	EEPROM_ReadByteS(0, (uint8_t *)&NumOfCards ,2);
    1f60:	42 e0       	ldi	r20, 0x02	; 2
    1f62:	be 01       	movw	r22, r28
    1f64:	6d 5f       	subi	r22, 0xFD	; 253
    1f66:	7f 4f       	sbci	r23, 0xFF	; 255
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	0e 94 81 14 	call	0x2902	; 0x2902 <EEPROM_ReadByteS>
	if(NumOfCards >= ATM_SERVER_TOTAL_CAPCITY)
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	9c 81       	ldd	r25, Y+4	; 0x04
    1f74:	85 3e       	cpi	r24, 0xE5	; 229
    1f76:	95 43       	sbci	r25, 0x35	; 53
    1f78:	70 f5       	brcc	.+92     	; 0x1fd6 <SERVER_OPER_Add_CARD+0x90>
	{
		return SERVER_OPER_FullSpace ; 
	}else if (SERVER_OPER_Search_CARD(CardData , ATM_SEARCH_BY_PAN) == 0xffff )
    1f7a:	60 e0       	ldi	r22, 0x00	; 0
    1f7c:	c8 01       	movw	r24, r16
    1f7e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <SERVER_OPER_Search_CARD>
    1f82:	01 96       	adiw	r24, 0x01	; 1
    1f84:	51 f5       	brne	.+84     	; 0x1fda <SERVER_OPER_Add_CARD+0x94>
	{
		NewAdd = ATM_SERVER_CARD_START_ADD + ( NumOfCards++ * ATM_CARD_BLOCK_SIZE) ;
    1f86:	2b 81       	ldd	r18, Y+3	; 0x03
    1f88:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8a:	c9 01       	movw	r24, r18
    1f8c:	01 96       	adiw	r24, 0x01	; 1
    1f8e:	9c 83       	std	Y+4, r25	; 0x04
    1f90:	8b 83       	std	Y+3, r24	; 0x03
    1f92:	44 e2       	ldi	r20, 0x24	; 36
    1f94:	42 9f       	mul	r20, r18
    1f96:	c0 01       	movw	r24, r0
    1f98:	43 9f       	mul	r20, r19
    1f9a:	90 0d       	add	r25, r0
    1f9c:	11 24       	eor	r1, r1
    1f9e:	86 53       	subi	r24, 0x36	; 54
    1fa0:	94 49       	sbci	r25, 0x94	; 148
    1fa2:	9a 83       	std	Y+2, r25	; 0x02
    1fa4:	89 83       	std	Y+1, r24	; 0x01
		EEPROM_WriteByteS(NewAdd , (uint8_t *)CardData , ATM_CARD_BLOCK_SIZE );											// store card data
    1fa6:	b8 01       	movw	r22, r16
    1fa8:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <EEPROM_WriteByteS>
		EEPROM_WriteByteS(NumOfCards*ATM_CARD_ADDRESS_SIZE+2 ,  (uint8_t *)&NewAdd , ATM_CARD_ADDRESS_SIZE );			// store card address
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb0:	01 96       	adiw	r24, 0x01	; 1
    1fb2:	42 e0       	ldi	r20, 0x02	; 2
    1fb4:	be 01       	movw	r22, r28
    1fb6:	6f 5f       	subi	r22, 0xFF	; 255
    1fb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <EEPROM_WriteByteS>
		EEPROM_WriteByteS(ATM_SERVER_FIRST_ADDRESS , (uint8_t *)&NumOfCards , ATM_CARD_ADDRESS_SIZE );
    1fc2:	42 e0       	ldi	r20, 0x02	; 2
    1fc4:	be 01       	movw	r22, r28
    1fc6:	6d 5f       	subi	r22, 0xFD	; 253
    1fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <EEPROM_WriteByteS>
		return SERVER_OPER_Exist ;
	}

	
	
	return SERVER_OPER_OK ;
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	03 c0       	rjmp	.+6      	; 0x1fdc <SERVER_OPER_Add_CARD+0x96>

	uint16_t NewAdd = 0 , NumOfCards  =0	;
	EEPROM_ReadByteS(0, (uint8_t *)&NumOfCards ,2);
	if(NumOfCards >= ATM_SERVER_TOTAL_CAPCITY)
	{
		return SERVER_OPER_FullSpace ; 
    1fd6:	83 e0       	ldi	r24, 0x03	; 3
    1fd8:	01 c0       	rjmp	.+2      	; 0x1fdc <SERVER_OPER_Add_CARD+0x96>
		EEPROM_WriteByteS(NewAdd , (uint8_t *)CardData , ATM_CARD_BLOCK_SIZE );											// store card data
		EEPROM_WriteByteS(NumOfCards*ATM_CARD_ADDRESS_SIZE+2 ,  (uint8_t *)&NewAdd , ATM_CARD_ADDRESS_SIZE );			// store card address
		EEPROM_WriteByteS(ATM_SERVER_FIRST_ADDRESS , (uint8_t *)&NumOfCards , ATM_CARD_ADDRESS_SIZE );
	}else
	{
		return SERVER_OPER_Exist ;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
	}

	
	
	return SERVER_OPER_OK ;
}
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	df 91       	pop	r29
    1fe6:	cf 91       	pop	r28
    1fe8:	1f 91       	pop	r17
    1fea:	0f 91       	pop	r16
    1fec:	08 95       	ret

00001fee <SERVER_OPER_Remove_CARD>:
}



SERVER_OPER_Status_t SERVER_OPER_Remove_CARD(CardData_t * CardData)
{
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <SERVER_OPER_Remove_CARD+0x6>
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <SERVER_OPER_Remove_CARD+0x8>
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
	uint16_t TempIndex = SERVER_OPER_Search_CARD(CardData , ATM_SEARCH_BY_PAN) ;
    1ffa:	60 e0       	ldi	r22, 0x00	; 0
    1ffc:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <SERVER_OPER_Search_CARD>
	uint16_t ResetIndex = 0xffffu ;
    2000:	2f ef       	ldi	r18, 0xFF	; 255
    2002:	3f ef       	ldi	r19, 0xFF	; 255
    2004:	3a 83       	std	Y+2, r19	; 0x02
    2006:	29 83       	std	Y+1, r18	; 0x01
	uint16_t NumOfCards =0 ; 
    2008:	1c 82       	std	Y+4, r1	; 0x04
    200a:	1b 82       	std	Y+3, r1	; 0x03
	if(TempIndex != 0xffff)
    200c:	8f 3f       	cpi	r24, 0xFF	; 255
    200e:	2f ef       	ldi	r18, 0xFF	; 255
    2010:	92 07       	cpc	r25, r18
    2012:	e9 f0       	breq	.+58     	; 0x204e <SERVER_OPER_Remove_CARD+0x60>
	{
		EEPROM_WriteByteS(TempIndex ,(uint8_t *)&ResetIndex , 2 );
    2014:	42 e0       	ldi	r20, 0x02	; 2
    2016:	be 01       	movw	r22, r28
    2018:	6f 5f       	subi	r22, 0xFF	; 255
    201a:	7f 4f       	sbci	r23, 0xFF	; 255
    201c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <EEPROM_WriteByteS>
		EEPROM_ReadByteS(0 ,(uint8_t * )&NumOfCards ,2 );
    2020:	42 e0       	ldi	r20, 0x02	; 2
    2022:	be 01       	movw	r22, r28
    2024:	6d 5f       	subi	r22, 0xFD	; 253
    2026:	7f 4f       	sbci	r23, 0xFF	; 255
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	0e 94 81 14 	call	0x2902	; 0x2902 <EEPROM_ReadByteS>
		--NumOfCards ;
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	9c 81       	ldd	r25, Y+4	; 0x04
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	9c 83       	std	Y+4, r25	; 0x04
    2038:	8b 83       	std	Y+3, r24	; 0x03
		EEPROM_WriteByteS(0 , (uint8_t * )&NumOfCards , 2);
    203a:	42 e0       	ldi	r20, 0x02	; 2
    203c:	be 01       	movw	r22, r28
    203e:	6d 5f       	subi	r22, 0xFD	; 253
    2040:	7f 4f       	sbci	r23, 0xFF	; 255
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <EEPROM_WriteByteS>
	{
		return SERVER_OPER_Not_Exist ; 
	}
	

	return SERVER_OPER_OK ;
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	01 c0       	rjmp	.+2      	; 0x2050 <SERVER_OPER_Remove_CARD+0x62>
		EEPROM_ReadByteS(0 ,(uint8_t * )&NumOfCards ,2 );
		--NumOfCards ;
		EEPROM_WriteByteS(0 , (uint8_t * )&NumOfCards , 2);
	}else
	{
		return SERVER_OPER_Not_Exist ; 
    204e:	82 e0       	ldi	r24, 0x02	; 2
	}
	

	return SERVER_OPER_OK ;
}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	08 95       	ret

0000205e <SERVER_OPER_GetTotal_CARDNum>:




uint16_t SERVER_OPER_GetTotal_CARDNum(void)
{
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	00 d0       	rcall	.+0      	; 0x2064 <SERVER_OPER_GetTotal_CARDNum+0x6>
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
		uint16_t Totla_CardNum  = 0 ;
    2068:	1a 82       	std	Y+2, r1	; 0x02
    206a:	19 82       	std	Y+1, r1	; 0x01
		EEPROM_ReadByteS(ATM_SERVER_FIRST_ADDRESS ,(uint8_t *)&Totla_CardNum  , ATM_CARD_ADDRESS_SIZE);
    206c:	42 e0       	ldi	r20, 0x02	; 2
    206e:	be 01       	movw	r22, r28
    2070:	6f 5f       	subi	r22, 0xFF	; 255
    2072:	7f 4f       	sbci	r23, 0xFF	; 255
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	0e 94 81 14 	call	0x2902	; 0x2902 <EEPROM_ReadByteS>
		return Totla_CardNum ;
}
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	9a 81       	ldd	r25, Y+2	; 0x02
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	08 95       	ret

0000208a <SERVER_ADMIN_Set_Pass>:




SERVER_OPER_Status_t SERVER_ADMIN_Set_Pass(uint8_t * StrName , uint8_t * Password)
{
    208a:	ef 92       	push	r14
    208c:	ff 92       	push	r15
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	1f 92       	push	r1
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	7c 01       	movw	r14, r24
    209e:	8b 01       	movw	r16, r22
		uint8_t AdminFlag  = 'S';
    20a0:	83 e5       	ldi	r24, 0x53	; 83
    20a2:	89 83       	std	Y+1, r24	; 0x01
		EEPROM_WriteByteS(SERVER_ADMIN_FLAG_START_ADD ,(uint8_t *)&AdminFlag	, 1);		
    20a4:	41 e0       	ldi	r20, 0x01	; 1
    20a6:	be 01       	movw	r22, r28
    20a8:	6f 5f       	subi	r22, 0xFF	; 255
    20aa:	7f 4f       	sbci	r23, 0xFF	; 255
    20ac:	88 ee       	ldi	r24, 0xE8	; 232
    20ae:	9d ef       	ldi	r25, 0xFD	; 253
    20b0:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <EEPROM_WriteByteS>
		EEPROM_WriteByteS(SERVER_ADMIN_NAME_START_ADD ,(uint8_t *)StrName		, ADMIN_USERNAME_LEN-1);
    20b4:	49 e0       	ldi	r20, 0x09	; 9
    20b6:	b7 01       	movw	r22, r14
    20b8:	82 ef       	ldi	r24, 0xF2	; 242
    20ba:	9d ef       	ldi	r25, 0xFD	; 253
    20bc:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <EEPROM_WriteByteS>
		EEPROM_WriteByteS(SERVER_ADMIN_PASS_START_ADD ,(uint8_t *)Password		, ADMIN_PASSWARD_LEN-1);
    20c0:	49 e0       	ldi	r20, 0x09	; 9
    20c2:	b8 01       	movw	r22, r16
    20c4:	8c ef       	ldi	r24, 0xFC	; 252
    20c6:	9d ef       	ldi	r25, 0xFD	; 253
    20c8:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <EEPROM_WriteByteS>
	return SERVER_OPER_OK ;

}
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	0f 90       	pop	r0
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	1f 91       	pop	r17
    20d6:	0f 91       	pop	r16
    20d8:	ff 90       	pop	r15
    20da:	ef 90       	pop	r14
    20dc:	08 95       	ret

000020de <SERVER_ADMIN_Get_Pass>:




SERVER_OPER_Status_t SERVER_ADMIN_Get_Pass(uint8_t * StrName , uint8_t * Password)
{
    20de:	ef 92       	push	r14
    20e0:	ff 92       	push	r15
    20e2:	0f 93       	push	r16
    20e4:	1f 93       	push	r17
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	1f 92       	push	r1
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	7c 01       	movw	r14, r24
    20f2:	8b 01       	movw	r16, r22
	uint8_t AdminFlag  = 0 ;
    20f4:	19 82       	std	Y+1, r1	; 0x01
	EEPROM_ReadByteS(SERVER_ADMIN_FLAG_START_ADD ,(uint8_t *)&AdminFlag ,1);
    20f6:	41 e0       	ldi	r20, 0x01	; 1
    20f8:	be 01       	movw	r22, r28
    20fa:	6f 5f       	subi	r22, 0xFF	; 255
    20fc:	7f 4f       	sbci	r23, 0xFF	; 255
    20fe:	88 ee       	ldi	r24, 0xE8	; 232
    2100:	9d ef       	ldi	r25, 0xFD	; 253
    2102:	0e 94 81 14 	call	0x2902	; 0x2902 <EEPROM_ReadByteS>
	if (AdminFlag == 'S')
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	83 35       	cpi	r24, 0x53	; 83
    210a:	61 f4       	brne	.+24     	; 0x2124 <SERVER_ADMIN_Get_Pass+0x46>
	{
		EEPROM_ReadByteS(SERVER_ADMIN_NAME_START_ADD ,(uint8_t *)StrName , ADMIN_USERNAME_LEN  );
    210c:	4a e0       	ldi	r20, 0x0A	; 10
    210e:	b7 01       	movw	r22, r14
    2110:	82 ef       	ldi	r24, 0xF2	; 242
    2112:	9d ef       	ldi	r25, 0xFD	; 253
    2114:	0e 94 81 14 	call	0x2902	; 0x2902 <EEPROM_ReadByteS>
		EEPROM_ReadByteS(SERVER_ADMIN_PASS_START_ADD ,(uint8_t *)Password , ADMIN_PASSWARD_LEN );
    2118:	4a e0       	ldi	r20, 0x0A	; 10
    211a:	b8 01       	movw	r22, r16
    211c:	8c ef       	ldi	r24, 0xFC	; 252
    211e:	9d ef       	ldi	r25, 0xFD	; 253
    2120:	0e 94 81 14 	call	0x2902	; 0x2902 <EEPROM_ReadByteS>
	}
	

	return SERVER_OPER_OK ;

}
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	0f 90       	pop	r0
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	1f 91       	pop	r17
    212e:	0f 91       	pop	r16
    2130:	ff 90       	pop	r15
    2132:	ef 90       	pop	r14
    2134:	08 95       	ret

00002136 <SERVER_ADMIN_Set_Temp>:




SERVER_OPER_Status_t SERVER_ADMIN_Set_Temp(uint8_t * MaxTemp)
{
    2136:	0f 93       	push	r16
    2138:	1f 93       	push	r17
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    213e:	00 d0       	rcall	.+0      	; 0x2140 <SERVER_ADMIN_Set_Temp+0xa>
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	8c 01       	movw	r16, r24
	uint16_t AdminFlag  =0 ;
    2146:	1a 82       	std	Y+2, r1	; 0x02
    2148:	19 82       	std	Y+1, r1	; 0x01

	EEPROM_WriteByteS(SERVER_ADMIN_FLAG_START_ADD ,(uint8_t *)&AdminFlag ,ATM_CARD_ADDRESS_SIZE);
    214a:	42 e0       	ldi	r20, 0x02	; 2
    214c:	be 01       	movw	r22, r28
    214e:	6f 5f       	subi	r22, 0xFF	; 255
    2150:	7f 4f       	sbci	r23, 0xFF	; 255
    2152:	88 ee       	ldi	r24, 0xE8	; 232
    2154:	9d ef       	ldi	r25, 0xFD	; 253
    2156:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <EEPROM_WriteByteS>
	EEPROM_WriteByteS(SERVER_ADMIN_TEMP_START_ADD ,(uint8_t *)MaxTemp ,ADMIN_TEMP_LEN);
    215a:	45 e0       	ldi	r20, 0x05	; 5
    215c:	b8 01       	movw	r22, r16
    215e:	86 e0       	ldi	r24, 0x06	; 6
    2160:	9e ef       	ldi	r25, 0xFE	; 254
    2162:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <EEPROM_WriteByteS>
	return SERVER_OPER_OK ;
}
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	df 91       	pop	r29
    216e:	cf 91       	pop	r28
    2170:	1f 91       	pop	r17
    2172:	0f 91       	pop	r16
    2174:	08 95       	ret

00002176 <SERVER_ADMIN_Get_Temp>:


SERVER_OPER_Status_t SERVER_ADMIN_Get_Temp(uint8_t * MaxTemp)
{

	EEPROM_ReadByteS(SERVER_ADMIN_TEMP_START_ADD ,(uint8_t *)MaxTemp ,ADMIN_TEMP_LEN);
    2176:	45 e0       	ldi	r20, 0x05	; 5
    2178:	bc 01       	movw	r22, r24
    217a:	86 e0       	ldi	r24, 0x06	; 6
    217c:	9e ef       	ldi	r25, 0xFE	; 254
    217e:	0e 94 81 14 	call	0x2902	; 0x2902 <EEPROM_ReadByteS>
	return SERVER_OPER_OK ;
}
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	08 95       	ret

00002186 <SERVER_ADMIN_Error>:



SERVER_OPER_Status_t SERVER_ADMIN_Error(Admin_ErrorAction_t Action )
{
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	2a 97       	sbiw	r28, 0x0a	; 10
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	cd bf       	out	0x3d, r28	; 61
	uint8_t  Error[ADMIN_ERROR_LEN] = "ERROR" ; 
    219a:	96 e0       	ldi	r25, 0x06	; 6
    219c:	ec ef       	ldi	r30, 0xFC	; 252
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	de 01       	movw	r26, r28
    21a2:	11 96       	adiw	r26, 0x01	; 1
    21a4:	01 90       	ld	r0, Z+
    21a6:	0d 92       	st	X+, r0
    21a8:	9a 95       	dec	r25
    21aa:	e1 f7       	brne	.-8      	; 0x21a4 <SERVER_ADMIN_Error+0x1e>
    21ac:	fe 01       	movw	r30, r28
    21ae:	37 96       	adiw	r30, 0x07	; 7
    21b0:	94 e0       	ldi	r25, 0x04	; 4
    21b2:	df 01       	movw	r26, r30
    21b4:	1d 92       	st	X+, r1
    21b6:	9a 95       	dec	r25
    21b8:	e9 f7       	brne	.-6      	; 0x21b4 <SERVER_ADMIN_Error+0x2e>
	if (Action == ADMIN_ERROR_SET)
    21ba:	81 11       	cpse	r24, r1
    21bc:	09 c0       	rjmp	.+18     	; 0x21d0 <SERVER_ADMIN_Error+0x4a>
	{
		EEPROM_WriteByteS(SERVER_ADMIN_ERROR_START_ADD ,(uint8_t *)Error ,ADMIN_ERROR_LEN);
    21be:	4a e0       	ldi	r20, 0x0A	; 10
    21c0:	be 01       	movw	r22, r28
    21c2:	6f 5f       	subi	r22, 0xFF	; 255
    21c4:	7f 4f       	sbci	r23, 0xFF	; 255
    21c6:	80 e1       	ldi	r24, 0x10	; 16
    21c8:	9e ef       	ldi	r25, 0xFE	; 254
    21ca:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <EEPROM_WriteByteS>
    21ce:	0f c0       	rjmp	.+30     	; 0x21ee <SERVER_ADMIN_Error+0x68>
		
	}else if (Action == ADMIN_ERROR_CLEAR )
    21d0:	81 30       	cpi	r24, 0x01	; 1
    21d2:	69 f4       	brne	.+26     	; 0x21ee <SERVER_ADMIN_Error+0x68>
	{
		memset(Error , 0 , ADMIN_ERROR_LEN);
    21d4:	be 01       	movw	r22, r28
    21d6:	6f 5f       	subi	r22, 0xFF	; 255
    21d8:	7f 4f       	sbci	r23, 0xFF	; 255
    21da:	8a e0       	ldi	r24, 0x0A	; 10
    21dc:	fb 01       	movw	r30, r22
    21de:	11 92       	st	Z+, r1
    21e0:	8a 95       	dec	r24
    21e2:	e9 f7       	brne	.-6      	; 0x21de <SERVER_ADMIN_Error+0x58>
		EEPROM_WriteByteS(SERVER_ADMIN_ERROR_START_ADD ,(uint8_t *)Error ,ADMIN_ERROR_LEN);
    21e4:	4a e0       	ldi	r20, 0x0A	; 10
    21e6:	80 e1       	ldi	r24, 0x10	; 16
    21e8:	9e ef       	ldi	r25, 0xFE	; 254
    21ea:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <EEPROM_WriteByteS>
	}
	return SERVER_OPER_OK ; 
}
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	2a 96       	adiw	r28, 0x0a	; 10
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	de bf       	out	0x3e, r29	; 62
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	cd bf       	out	0x3d, r28	; 61
    21fc:	df 91       	pop	r29
    21fe:	cf 91       	pop	r28
    2200:	08 95       	ret

00002202 <SERVER_ADMIN_Error_Get>:

uint8_t SERVER_ADMIN_Error_Get(void)
{
    2202:	0f 93       	push	r16
    2204:	1f 93       	push	r17
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	2a 97       	sbiw	r28, 0x0a	; 10
    2210:	0f b6       	in	r0, 0x3f	; 63
    2212:	f8 94       	cli
    2214:	de bf       	out	0x3e, r29	; 62
    2216:	0f be       	out	0x3f, r0	; 63
    2218:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t  Error[ADMIN_ERROR_LEN] = {0} ;
    221a:	8e 01       	movw	r16, r28
    221c:	0f 5f       	subi	r16, 0xFF	; 255
    221e:	1f 4f       	sbci	r17, 0xFF	; 255
    2220:	8a e0       	ldi	r24, 0x0A	; 10
    2222:	f8 01       	movw	r30, r16
    2224:	11 92       	st	Z+, r1
    2226:	8a 95       	dec	r24
    2228:	e9 f7       	brne	.-6      	; 0x2224 <SERVER_ADMIN_Error_Get+0x22>
	EEPROM_ReadByteS(SERVER_ADMIN_ERROR_START_ADD ,(uint8_t *)Error , ADMIN_ERROR_LEN);
    222a:	4a e0       	ldi	r20, 0x0A	; 10
    222c:	b8 01       	movw	r22, r16
    222e:	80 e1       	ldi	r24, 0x10	; 16
    2230:	9e ef       	ldi	r25, 0xFE	; 254
    2232:	0e 94 81 14 	call	0x2902	; 0x2902 <EEPROM_ReadByteS>
	if (strcmp((char *)Error , "ERROR") == 0)
    2236:	6c ef       	ldi	r22, 0xFC	; 252
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	c8 01       	movw	r24, r16
    223c:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <strcmp>
    2240:	89 2b       	or	r24, r25
    2242:	11 f4       	brne	.+4      	; 0x2248 <SERVER_ADMIN_Error_Get+0x46>
	{
		return 1 ;
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	01 c0       	rjmp	.+2      	; 0x224a <SERVER_ADMIN_Error_Get+0x48>
	}else{
		return 0 ; 
    2248:	80 e0       	ldi	r24, 0x00	; 0
	}
	return SERVER_OPER_OK ;
}
    224a:	2a 96       	adiw	r28, 0x0a	; 10
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	f8 94       	cli
    2250:	de bf       	out	0x3e, r29	; 62
    2252:	0f be       	out	0x3f, r0	; 63
    2254:	cd bf       	out	0x3d, r28	; 61
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	1f 91       	pop	r17
    225c:	0f 91       	pop	r16
    225e:	08 95       	ret

00002260 <SERVER_ADMIN_Set_MAximum_DailyAmount>:



SERVER_OPER_Status_t SERVER_ADMIN_Set_MAximum_DailyAmount(uint8_t * MaxDailyAmount)
{
	EEPROM_WriteByteS(SERVER_ADMIN_MAX_DAILY_AMOUNT , MaxDailyAmount , ADMIN_MAX_DAILY_LEN );
    2260:	46 e0       	ldi	r20, 0x06	; 6
    2262:	bc 01       	movw	r22, r24
    2264:	8a e1       	ldi	r24, 0x1A	; 26
    2266:	9e ef       	ldi	r25, 0xFE	; 254
    2268:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <EEPROM_WriteByteS>
	return SERVER_OPER_OK ;
}
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	08 95       	ret

00002270 <KeyPad_Initialization>:
 * brief  : this function used to initialize keypad
 * param. : KeyPadInit pointer to the handler of keypad
 * return : void 
 */
void KeyPad_Initialization(KeyPad_t * KeyPad)
{
    2270:	ff 92       	push	r15
    2272:	0f 93       	push	r16
    2274:	1f 93       	push	r17
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	8c 01       	movw	r16, r24
    /* for output pins  --> all colomn will set as autput pins*/
	KeyPad_gpio.mode = GPIO_MODE_OUTPUT ;
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <KeyPad_gpio+0x1>
	for(uint8_t iter =0 ; iter < _NUM_OF_ColumnS ;iter++)
    2282:	f1 2c       	mov	r15, r1
    2284:	19 c0       	rjmp	.+50     	; 0x22b8 <KeyPad_Initialization+0x48>
	{
		KeyPad_gpio.pin = KeyPad->ColumnPins[iter].Pin ;
    2286:	cf 2d       	mov	r28, r15
    2288:	d0 e0       	ldi	r29, 0x00	; 0
    228a:	ce 01       	movw	r24, r28
    228c:	88 0f       	add	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	c8 0f       	add	r28, r24
    2292:	d9 1f       	adc	r29, r25
    2294:	c0 0f       	add	r28, r16
    2296:	d1 1f       	adc	r29, r17
    2298:	8e 85       	ldd	r24, Y+14	; 0x0e
    229a:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <KeyPad_gpio>
		HAL_GPIO_Pin_Init(KeyPad->ColumnPins[iter].Port , &KeyPad_gpio);
    229e:	6e ee       	ldi	r22, 0xEE	; 238
    22a0:	71 e0       	ldi	r23, 0x01	; 1
    22a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    22a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    22a6:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <HAL_GPIO_Pin_Init>
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iter].Port , KeyPad->ColumnPins[iter].Pin , WRIGHT_SECOND);
    22aa:	41 e0       	ldi	r20, 0x01	; 1
    22ac:	6e 85       	ldd	r22, Y+14	; 0x0e
    22ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    22b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    22b2:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
 */
void KeyPad_Initialization(KeyPad_t * KeyPad)
{
    /* for output pins  --> all colomn will set as autput pins*/
	KeyPad_gpio.mode = GPIO_MODE_OUTPUT ;
	for(uint8_t iter =0 ; iter < _NUM_OF_ColumnS ;iter++)
    22b6:	f3 94       	inc	r15
    22b8:	82 e0       	ldi	r24, 0x02	; 2
    22ba:	8f 15       	cp	r24, r15
    22bc:	20 f7       	brcc	.-56     	; 0x2286 <KeyPad_Initialization+0x16>
		HAL_GPIO_Pin_Init(KeyPad->ColumnPins[iter].Port , &KeyPad_gpio);
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iter].Port , KeyPad->ColumnPins[iter].Pin , WRIGHT_SECOND);
	}


	KeyPad_gpio.mode = GPIO_MODE_INPUT ;
    22be:	ee ee       	ldi	r30, 0xEE	; 238
    22c0:	f1 e0       	ldi	r31, 0x01	; 1
    22c2:	11 82       	std	Z+1, r1	; 0x01
	KeyPad_gpio.pull = WRIGHT_SECOND ;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	82 83       	std	Z+2, r24	; 0x02
	for(uint8_t iter =0 ; iter < _NUM_OF_ROWS ;iter++)
    22c8:	c0 e0       	ldi	r28, 0x00	; 0
    22ca:	13 c0       	rjmp	.+38     	; 0x22f2 <KeyPad_Initialization+0x82>
	{
		KeyPad_gpio.pin = KeyPad->RowPins[iter].Pin ;
    22cc:	ec 2f       	mov	r30, r28
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	cf 01       	movw	r24, r30
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	e8 0f       	add	r30, r24
    22d8:	f9 1f       	adc	r31, r25
    22da:	e0 0f       	add	r30, r16
    22dc:	f1 1f       	adc	r31, r17
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <KeyPad_gpio>
		HAL_GPIO_Pin_Init(KeyPad->RowPins[iter].Port , &KeyPad_gpio);
    22e4:	6e ee       	ldi	r22, 0xEE	; 238
    22e6:	71 e0       	ldi	r23, 0x01	; 1
    22e8:	80 81       	ld	r24, Z
    22ea:	91 81       	ldd	r25, Z+1	; 0x01
    22ec:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <HAL_GPIO_Pin_Init>
	}


	KeyPad_gpio.mode = GPIO_MODE_INPUT ;
	KeyPad_gpio.pull = WRIGHT_SECOND ;
	for(uint8_t iter =0 ; iter < _NUM_OF_ROWS ;iter++)
    22f0:	cf 5f       	subi	r28, 0xFF	; 255
    22f2:	c4 30       	cpi	r28, 0x04	; 4
    22f4:	58 f3       	brcs	.-42     	; 0x22cc <KeyPad_Initialization+0x5c>
		HAL_GPIO_Pin_Init(KeyPad->RowPins[iter].Port , &KeyPad_gpio);
	}	
	


}/* END_FUN KeyPad_Initialization()*/
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	1f 91       	pop	r17
    22fc:	0f 91       	pop	r16
    22fe:	ff 90       	pop	r15
    2300:	08 95       	ret

00002302 <KeyPad_GetPressedKey>:
 * brief  : this function used to return the pressed key 
 * param. : void
 * return : pressed character 
 */
char KeyPad_GetPressedKey(KeyPad_t * KeyPad)
{
    2302:	cf 92       	push	r12
    2304:	df 92       	push	r13
    2306:	ef 92       	push	r14
    2308:	ff 92       	push	r15
    230a:	0f 93       	push	r16
    230c:	1f 93       	push	r17
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	ec 01       	movw	r28, r24
	char Key = 0;
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
    2314:	c1 2c       	mov	r12, r1
    2316:	4d c0       	rjmp	.+154    	; 0x23b2 <KeyPad_GetPressedKey+0xb0>
	{

		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_FIRST) ;
    2318:	0c 2d       	mov	r16, r12
    231a:	10 e0       	ldi	r17, 0x00	; 0
    231c:	f8 01       	movw	r30, r16
    231e:	ee 0f       	add	r30, r30
    2320:	ff 1f       	adc	r31, r31
    2322:	e0 0f       	add	r30, r16
    2324:	f1 1f       	adc	r31, r17
    2326:	ec 0f       	add	r30, r28
    2328:	fd 1f       	adc	r31, r29
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	66 85       	ldd	r22, Z+14	; 0x0e
    232e:	84 85       	ldd	r24, Z+12	; 0x0c
    2330:	95 85       	ldd	r25, Z+13	; 0x0d
    2332:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
		for (uint8_t iterROW = 0 ; iterROW < _NUM_OF_ROWS ; iterROW++)
    2336:	d1 2c       	mov	r13, r1
    2338:	2a c0       	rjmp	.+84     	; 0x238e <KeyPad_GetPressedKey+0x8c>
		{
			
			if ( HAL_GPIO_READPIN(KeyPad->RowPins[iterROW].Port ,KeyPad->RowPins[iterROW].Pin ) == WRIGHT_FIRST )
    233a:	ed 2c       	mov	r14, r13
    233c:	f1 2c       	mov	r15, r1
    233e:	f7 01       	movw	r30, r14
    2340:	ee 0f       	add	r30, r30
    2342:	ff 1f       	adc	r31, r31
    2344:	ee 0d       	add	r30, r14
    2346:	ff 1d       	adc	r31, r15
    2348:	ec 0f       	add	r30, r28
    234a:	fd 1f       	adc	r31, r29
    234c:	62 81       	ldd	r22, Z+2	; 0x02
    234e:	80 81       	ld	r24, Z
    2350:	91 81       	ldd	r25, Z+1	; 0x01
    2352:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <HAL_GPIO_READPIN>
    2356:	81 11       	cpse	r24, r1
    2358:	19 c0       	rjmp	.+50     	; 0x238c <KeyPad_GetPressedKey+0x8a>
			{
				
				HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;
    235a:	c8 01       	movw	r24, r16
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	80 0f       	add	r24, r16
    2362:	91 1f       	adc	r25, r17
    2364:	c8 0f       	add	r28, r24
    2366:	d9 1f       	adc	r29, r25
    2368:	41 e0       	ldi	r20, 0x01	; 1
    236a:	6e 85       	ldd	r22, Y+14	; 0x0e
    236c:	8c 85       	ldd	r24, Y+12	; 0x0c
    236e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2370:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
				return arr_KeyPad_char[iterROW][iterCOL] ;
    2374:	c7 01       	movw	r24, r14
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	8e 0d       	add	r24, r14
    237c:	9f 1d       	adc	r25, r15
    237e:	80 53       	subi	r24, 0x30	; 48
    2380:	9f 4f       	sbci	r25, 0xFF	; 255
    2382:	fc 01       	movw	r30, r24
    2384:	e0 0f       	add	r30, r16
    2386:	f1 1f       	adc	r31, r17
    2388:	80 81       	ld	r24, Z
    238a:	18 c0       	rjmp	.+48     	; 0x23bc <KeyPad_GetPressedKey+0xba>
	char Key = 0;
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
	{

		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_FIRST) ;
		for (uint8_t iterROW = 0 ; iterROW < _NUM_OF_ROWS ; iterROW++)
    238c:	d3 94       	inc	r13
    238e:	83 e0       	ldi	r24, 0x03	; 3
    2390:	8d 15       	cp	r24, r13
    2392:	98 f6       	brcc	.-90     	; 0x233a <KeyPad_GetPressedKey+0x38>
				return arr_KeyPad_char[iterROW][iterCOL] ;
			}else{
				;
			}
		}
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;
    2394:	f8 01       	movw	r30, r16
    2396:	ee 0f       	add	r30, r30
    2398:	ff 1f       	adc	r31, r31
    239a:	0e 0f       	add	r16, r30
    239c:	1f 1f       	adc	r17, r31
    239e:	fe 01       	movw	r30, r28
    23a0:	e0 0f       	add	r30, r16
    23a2:	f1 1f       	adc	r31, r17
    23a4:	41 e0       	ldi	r20, 0x01	; 1
    23a6:	66 85       	ldd	r22, Z+14	; 0x0e
    23a8:	84 85       	ldd	r24, Z+12	; 0x0c
    23aa:	95 85       	ldd	r25, Z+13	; 0x0d
    23ac:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
 * return : pressed character 
 */
char KeyPad_GetPressedKey(KeyPad_t * KeyPad)
{
	char Key = 0;
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
    23b0:	c3 94       	inc	r12
    23b2:	82 e0       	ldi	r24, 0x02	; 2
    23b4:	8c 15       	cp	r24, r12
    23b6:	08 f0       	brcs	.+2      	; 0x23ba <KeyPad_GetPressedKey+0xb8>
    23b8:	af cf       	rjmp	.-162    	; 0x2318 <KeyPad_GetPressedKey+0x16>
		}
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;

	}
	
return Key ;
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	1f 91       	pop	r17
    23c2:	0f 91       	pop	r16
    23c4:	ff 90       	pop	r15
    23c6:	ef 90       	pop	r14
    23c8:	df 90       	pop	r13
    23ca:	cf 90       	pop	r12
    23cc:	08 95       	ret

000023ce <LCD_Triger_Enable>:
 * return : void 
 */


static void LCD_Triger_Enable(void)
{
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
	
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_E_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_E_PIN].Pin,GPIO_PIN_SET);  // set enable pin
    23d2:	cc ed       	ldi	r28, 0xDC	; 220
    23d4:	d0 e0       	ldi	r29, 0x00	; 0
    23d6:	41 e0       	ldi	r20, 0x01	; 1
    23d8:	68 85       	ldd	r22, Y+8	; 0x08
    23da:	8e 81       	ldd	r24, Y+6	; 0x06
    23dc:	9f 81       	ldd	r25, Y+7	; 0x07
    23de:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    23e2:	85 e0       	ldi	r24, 0x05	; 5
    23e4:	8a 95       	dec	r24
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <LCD_Triger_Enable+0x16>
    23e8:	00 00       	nop
	_delay_us(1);
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_E_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_E_PIN].Pin,GPIO_PIN_RESET);  // set enable pin
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	68 85       	ldd	r22, Y+8	; 0x08
    23ee:	8e 81       	ldd	r24, Y+6	; 0x06
    23f0:	9f 81       	ldd	r25, Y+7	; 0x07
    23f2:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    23f6:	8f e3       	ldi	r24, 0x3F	; 63
    23f8:	9f e1       	ldi	r25, 0x1F	; 31
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <LCD_Triger_Enable+0x2c>
    23fe:	00 c0       	rjmp	.+0      	; 0x2400 <LCD_Triger_Enable+0x32>
    2400:	00 00       	nop
	_delay_ms(2);	
	
} /* END_FUN LCD_Triger_Enable()*/
    2402:	df 91       	pop	r29
    2404:	cf 91       	pop	r28
    2406:	08 95       	ret

00002408 <LCD_Send_4BitData>:
 * brief  : this function used to send Data to LCD in 4 bit form 
 * param. : data the specific byte that you want to send to LCD 
 * return : void 
 */
static void LCD_Send_4BitData(uint8_t data)
{
    2408:	0f 93       	push	r16
    240a:	1f 93       	push	r17
    240c:	cf 93       	push	r28
    240e:	c8 2f       	mov	r28, r24
	
		for(int i =3 ; i < 7 ;i++)																			
    2410:	83 e0       	ldi	r24, 0x03	; 3
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	23 c0       	rjmp	.+70     	; 0x245c <LCD_Send_4BitData+0x54>
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i+1))&(data))>>(i+1));	/* set the high nibble */
    2416:	8c 01       	movw	r16, r24
    2418:	0f 5f       	subi	r16, 0xFF	; 255
    241a:	1f 4f       	sbci	r17, 0xFF	; 255
    241c:	41 e0       	ldi	r20, 0x01	; 1
    241e:	50 e0       	ldi	r21, 0x00	; 0
    2420:	00 2e       	mov	r0, r16
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <LCD_Send_4BitData+0x20>
    2424:	44 0f       	add	r20, r20
    2426:	55 1f       	adc	r21, r21
    2428:	0a 94       	dec	r0
    242a:	e2 f7       	brpl	.-8      	; 0x2424 <LCD_Send_4BitData+0x1c>
    242c:	2c 2f       	mov	r18, r28
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	42 23       	and	r20, r18
    2432:	53 23       	and	r21, r19
    2434:	00 2e       	mov	r0, r16
    2436:	02 c0       	rjmp	.+4      	; 0x243c <LCD_Send_4BitData+0x34>
    2438:	55 95       	asr	r21
    243a:	47 95       	ror	r20
    243c:	0a 94       	dec	r0
    243e:	e2 f7       	brpl	.-8      	; 0x2438 <LCD_Send_4BitData+0x30>
    2440:	fc 01       	movw	r30, r24
    2442:	ee 0f       	add	r30, r30
    2444:	ff 1f       	adc	r31, r31
    2446:	8e 0f       	add	r24, r30
    2448:	9f 1f       	adc	r25, r31
    244a:	fc 01       	movw	r30, r24
    244c:	e4 52       	subi	r30, 0x24	; 36
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	62 81       	ldd	r22, Z+2	; 0x02
    2452:	80 81       	ld	r24, Z
    2454:	91 81       	ldd	r25, Z+1	; 0x01
    2456:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
 * return : void 
 */
static void LCD_Send_4BitData(uint8_t data)
{
	
		for(int i =3 ; i < 7 ;i++)																			
    245a:	c8 01       	movw	r24, r16
    245c:	87 30       	cpi	r24, 0x07	; 7
    245e:	91 05       	cpc	r25, r1
    2460:	d4 f2       	brlt	.-76     	; 0x2416 <LCD_Send_4BitData+0xe>
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i+1))&(data))>>(i+1));	/* set the high nibble */
		LCD_Triger_Enable();
    2462:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Triger_Enable>
		for(int i =3 ; i < 7 ;i++)
    2466:	03 e0       	ldi	r16, 0x03	; 3
    2468:	10 e0       	ldi	r17, 0x00	; 0
    246a:	21 c0       	rjmp	.+66     	; 0x24ae <LCD_Send_4BitData+0xa6>
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i-3))&(data))>>(i-3));	/* set the high nibble */
    246c:	c8 01       	movw	r24, r16
    246e:	03 97       	sbiw	r24, 0x03	; 3
    2470:	41 e0       	ldi	r20, 0x01	; 1
    2472:	50 e0       	ldi	r21, 0x00	; 0
    2474:	08 2e       	mov	r0, r24
    2476:	02 c0       	rjmp	.+4      	; 0x247c <LCD_Send_4BitData+0x74>
    2478:	44 0f       	add	r20, r20
    247a:	55 1f       	adc	r21, r21
    247c:	0a 94       	dec	r0
    247e:	e2 f7       	brpl	.-8      	; 0x2478 <LCD_Send_4BitData+0x70>
    2480:	2c 2f       	mov	r18, r28
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	42 23       	and	r20, r18
    2486:	53 23       	and	r21, r19
    2488:	02 c0       	rjmp	.+4      	; 0x248e <LCD_Send_4BitData+0x86>
    248a:	55 95       	asr	r21
    248c:	47 95       	ror	r20
    248e:	8a 95       	dec	r24
    2490:	e2 f7       	brpl	.-8      	; 0x248a <LCD_Send_4BitData+0x82>
    2492:	f8 01       	movw	r30, r16
    2494:	ee 0f       	add	r30, r30
    2496:	ff 1f       	adc	r31, r31
    2498:	e0 0f       	add	r30, r16
    249a:	f1 1f       	adc	r31, r17
    249c:	e4 52       	subi	r30, 0x24	; 36
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	62 81       	ldd	r22, Z+2	; 0x02
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
{
	
		for(int i =3 ; i < 7 ;i++)																			
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i+1))&(data))>>(i+1));	/* set the high nibble */
		LCD_Triger_Enable();
		for(int i =3 ; i < 7 ;i++)
    24aa:	0f 5f       	subi	r16, 0xFF	; 255
    24ac:	1f 4f       	sbci	r17, 0xFF	; 255
    24ae:	07 30       	cpi	r16, 0x07	; 7
    24b0:	11 05       	cpc	r17, r1
    24b2:	e4 f2       	brlt	.-72     	; 0x246c <LCD_Send_4BitData+0x64>
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i-3))&(data))>>(i-3));	/* set the high nibble */
		LCD_Triger_Enable();
    24b4:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Triger_Enable>


} /* END_FUN LCD_Send_4BitData()*/
    24b8:	cf 91       	pop	r28
    24ba:	1f 91       	pop	r17
    24bc:	0f 91       	pop	r16
    24be:	08 95       	ret

000024c0 <LCD_Send_Character_CurrLoc>:
 * brief  : this function used to send an character to LCD with the current location 
 * param. : Character the specific character to send to LCD 
 * return : void 
 */ 
LCD_Status_t LCD_Send_Character_CurrLoc(uint8_t character)
{
    24c0:	1f 93       	push	r17
    24c2:	cf 93       	push	r28
    24c4:	df 93       	push	r29
    24c6:	18 2f       	mov	r17, r24
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Pin,GPIO_PIN_SET);  // set enable pin
    24c8:	cc ed       	ldi	r28, 0xDC	; 220
    24ca:	d0 e0       	ldi	r29, 0x00	; 0
    24cc:	41 e0       	ldi	r20, 0x01	; 1
    24ce:	6a 81       	ldd	r22, Y+2	; 0x02
    24d0:	88 81       	ld	r24, Y
    24d2:	99 81       	ldd	r25, Y+1	; 0x01
    24d4:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Pin,GPIO_PIN_RESET);  // set enable pin
    24d8:	40 e0       	ldi	r20, 0x00	; 0
    24da:	6d 81       	ldd	r22, Y+5	; 0x05
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	9c 81       	ldd	r25, Y+4	; 0x04
    24e0:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>

	LCD_Send_4BitData(character);
    24e4:	81 2f       	mov	r24, r17
    24e6:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_Send_4BitData>
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Character_CurrLoc()*/
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	1f 91       	pop	r17
    24f2:	08 95       	ret

000024f4 <LCD_Send_Command>:
 * brief  : this function used to send command to LCD  
 * param. : command the specific command to send to LCD chose one of @ LCD_COMMANED_ 
 * return : void 
 */
LCD_Status_t LCD_Send_Command(uint8_t command)
{
    24f4:	1f 93       	push	r17
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	18 2f       	mov	r17, r24
	
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Pin,GPIO_PIN_RESET);  // set enable pin		
    24fc:	cc ed       	ldi	r28, 0xDC	; 220
    24fe:	d0 e0       	ldi	r29, 0x00	; 0
    2500:	40 e0       	ldi	r20, 0x00	; 0
    2502:	6a 81       	ldd	r22, Y+2	; 0x02
    2504:	88 81       	ld	r24, Y
    2506:	99 81       	ldd	r25, Y+1	; 0x01
    2508:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Pin,GPIO_PIN_RESET);  // set enable pin
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	6d 81       	ldd	r22, Y+5	; 0x05
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
	LCD_Send_4BitData(command);
    2518:	81 2f       	mov	r24, r17
    251a:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_Send_4BitData>
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Command()*/
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	08 95       	ret

00002528 <LCD_Send_String_CurrLoc>:
 * brief  : this function used to send an string to LCD with the current location 
 * param. : Character the specific character to send to LCD 
 * return : void 
 */
LCD_Status_t LCD_Send_String_CurrLoc(uint8_t *string)
{
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
    252c:	ec 01       	movw	r28, r24
	while (*string != 0)
    252e:	03 c0       	rjmp	.+6      	; 0x2536 <LCD_Send_String_CurrLoc+0xe>
	{
		LCD_Send_Character_CurrLoc(*string++);
    2530:	21 96       	adiw	r28, 0x01	; 1
    2532:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_Send_Character_CurrLoc>
 * param. : Character the specific character to send to LCD 
 * return : void 
 */
LCD_Status_t LCD_Send_String_CurrLoc(uint8_t *string)
{
	while (*string != 0)
    2536:	88 81       	ld	r24, Y
    2538:	81 11       	cpse	r24, r1
    253a:	fa cf       	rjmp	.-12     	; 0x2530 <LCD_Send_String_CurrLoc+0x8>

	}
	
	
	return LCD_OK ;
} /* END_FUN LCD_Send_String_CurrLoc()*/
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	08 95       	ret

00002542 <LCD_Goto_Location>:
 * param. :  y  is specify the new Y axises
 * param. :  x  is specify the new X axises
 * return : void 
 */
LCD_Status_t LCD_Goto_Location(uint8_t y , uint8_t x)
{
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	00 d0       	rcall	.+0      	; 0x2548 <LCD_Goto_Location+0x6>
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
	uint8_t column_position [2] = {0x80,0xc0};
    254c:	90 e8       	ldi	r25, 0x80	; 128
    254e:	99 83       	std	Y+1, r25	; 0x01
    2550:	90 ec       	ldi	r25, 0xC0	; 192
    2552:	9a 83       	std	Y+2, r25	; 0x02
	LCD_Send_Command(column_position[y-1]+(x-1));
    2554:	e8 2f       	mov	r30, r24
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	31 97       	sbiw	r30, 0x01	; 1
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	8c 0f       	add	r24, r28
    2560:	9d 1f       	adc	r25, r29
    2562:	e8 0f       	add	r30, r24
    2564:	f9 1f       	adc	r31, r25
    2566:	80 81       	ld	r24, Z
    2568:	86 0f       	add	r24, r22
    256a:	81 50       	subi	r24, 0x01	; 1
    256c:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>


	return LCD_OK ;	
} /* END_FUN LCD_Goto_Location()*/
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	08 95       	ret

0000257c <LCD_Send_Character_WithLoc>:
 * param. :  x  is specify the new X axises
 * param. : character the specific character to send to LCD 
 * return : void 
 */
LCD_Status_t LCD_Send_Character_WithLoc(uint8_t y,uint8_t x,uint8_t character)
{
    257c:	1f 93       	push	r17
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	14 2f       	mov	r17, r20
	
	LCD_Goto_Location(y,x);
    2584:	0e 94 a1 12 	call	0x2542	; 0x2542 <LCD_Goto_Location>
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Pin,GPIO_PIN_SET);  // set enable pin
    2588:	cc ed       	ldi	r28, 0xDC	; 220
    258a:	d0 e0       	ldi	r29, 0x00	; 0
    258c:	41 e0       	ldi	r20, 0x01	; 1
    258e:	6a 81       	ldd	r22, Y+2	; 0x02
    2590:	88 81       	ld	r24, Y
    2592:	99 81       	ldd	r25, Y+1	; 0x01
    2594:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Pin,GPIO_PIN_RESET);  // set enable pin
    2598:	40 e0       	ldi	r20, 0x00	; 0
    259a:	6d 81       	ldd	r22, Y+5	; 0x05
    259c:	8b 81       	ldd	r24, Y+3	; 0x03
    259e:	9c 81       	ldd	r25, Y+4	; 0x04
    25a0:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
	LCD_Send_4BitData(character);
    25a4:	81 2f       	mov	r24, r17
    25a6:	0e 94 04 12 	call	0x2408	; 0x2408 <LCD_Send_4BitData>
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Character_WithLoc()*/
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	1f 91       	pop	r17
    25b2:	08 95       	ret

000025b4 <LCD_Initializaion>:
/*
 * brief  : this function used to initialize (GPIO &LCD) 
 * return : void 
 */ 
LCD_Status_t LCD_Initializaion(void)
{
    25b4:	0f 93       	push	r16
    25b6:	1f 93       	push	r17
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
    25bc:	00 d0       	rcall	.+0      	; 0x25be <LCD_Initializaion+0xa>
    25be:	1f 92       	push	r1
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	2f ef       	ldi	r18, 0xFF	; 255
    25c6:	89 ef       	ldi	r24, 0xF9	; 249
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	21 50       	subi	r18, 0x01	; 1
    25cc:	80 40       	sbci	r24, 0x00	; 0
    25ce:	90 40       	sbci	r25, 0x00	; 0
    25d0:	e1 f7       	brne	.-8      	; 0x25ca <LCD_Initializaion+0x16>
    25d2:	00 c0       	rjmp	.+0      	; 0x25d4 <LCD_Initializaion+0x20>
    25d4:	00 00       	nop
	GPIO_InitTypeDef LCD_GPIO_Handler ;
	
	
	_delay_ms(20);
	/* Set portB pin 1,2,3 as output */
	LCD_GPIO_Handler.mode = GPIO_MODE_OUTPUT ;
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	8a 83       	std	Y+2, r24	; 0x02
	LCD_GPIO_Handler.pull =GPIO_NOPULL ;
    25da:	1b 82       	std	Y+3, r1	; 0x03
	
	
	
	
	for(int i =0 ; i < 7 ;i++)
    25dc:	00 e0       	ldi	r16, 0x00	; 0
    25de:	10 e0       	ldi	r17, 0x00	; 0
    25e0:	12 c0       	rjmp	.+36     	; 0x2606 <LCD_Initializaion+0x52>
	{
		LCD_GPIO_Handler.pin = LcdBitSelect.LcdBits[i].Pin ;
    25e2:	f8 01       	movw	r30, r16
    25e4:	ee 0f       	add	r30, r30
    25e6:	ff 1f       	adc	r31, r31
    25e8:	e0 0f       	add	r30, r16
    25ea:	f1 1f       	adc	r31, r17
    25ec:	e4 52       	subi	r30, 0x24	; 36
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	82 81       	ldd	r24, Z+2	; 0x02
    25f2:	89 83       	std	Y+1, r24	; 0x01
		  
		HAL_GPIO_Pin_Init(LcdBitSelect.LcdBits[i].Port,&LCD_GPIO_Handler);
    25f4:	be 01       	movw	r22, r28
    25f6:	6f 5f       	subi	r22, 0xFF	; 255
    25f8:	7f 4f       	sbci	r23, 0xFF	; 255
    25fa:	80 81       	ld	r24, Z
    25fc:	91 81       	ldd	r25, Z+1	; 0x01
    25fe:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <HAL_GPIO_Pin_Init>
	LCD_GPIO_Handler.pull =GPIO_NOPULL ;
	
	
	
	
	for(int i =0 ; i < 7 ;i++)
    2602:	0f 5f       	subi	r16, 0xFF	; 255
    2604:	1f 4f       	sbci	r17, 0xFF	; 255
    2606:	07 30       	cpi	r16, 0x07	; 7
    2608:	11 05       	cpc	r17, r1
    260a:	5c f3       	brlt	.-42     	; 0x25e2 <LCD_Initializaion+0x2e>
		  
		HAL_GPIO_Pin_Init(LcdBitSelect.LcdBits[i].Port,&LCD_GPIO_Handler);
	}

	/* LCD Initialization command*/
	LCD_Send_Command(0x33U);  
    260c:	83 e3       	ldi	r24, 0x33	; 51
    260e:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
	LCD_Send_Command(0x32U);
    2612:	82 e3       	ldi	r24, 0x32	; 50
    2614:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
	LCD_Send_Command(LCD_COMMANED2LINE_4_BIT_MODE);
    2618:	88 e2       	ldi	r24, 0x28	; 40
    261a:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
	LCD_Send_Command(LCD_COMMANED_CLEAR_CURSOR_OFF);
    261e:	8c e0       	ldi	r24, 0x0C	; 12
    2620:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
	LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <LCD_Send_Command>
	

	return LCD_OK ;
	
} /* END_FUN LCD_Initializaion()*/
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	1f 91       	pop	r17
    2638:	0f 91       	pop	r16
    263a:	08 95       	ret

0000263c <LCD_Send_String_WithLoc>:
 * param. :  x  is specify y axises location start from 1
 * param. : StringOfCharacters pointer to string that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_String_WithLoc(uint8_t y, uint8_t x, uint8_t * StringOfCharacters)
{
    263c:	cf 93       	push	r28
    263e:	df 93       	push	r29
    2640:	ea 01       	movw	r28, r20
	LCD_Goto_Location(y,x);
    2642:	0e 94 a1 12 	call	0x2542	; 0x2542 <LCD_Goto_Location>
	while (*StringOfCharacters != 0)
    2646:	03 c0       	rjmp	.+6      	; 0x264e <LCD_Send_String_WithLoc+0x12>
	{
		LCD_Send_Character_CurrLoc(*StringOfCharacters++);  
    2648:	21 96       	adiw	r28, 0x01	; 1
    264a:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_Send_Character_CurrLoc>
 * return : void 
 */
LCD_Status_t LCD_Send_String_WithLoc(uint8_t y, uint8_t x, uint8_t * StringOfCharacters)
{
	LCD_Goto_Location(y,x);
	while (*StringOfCharacters != 0)
    264e:	88 81       	ld	r24, Y
    2650:	81 11       	cpse	r24, r1
    2652:	fa cf       	rjmp	.-12     	; 0x2648 <LCD_Send_String_WithLoc+0xc>
		LCD_Send_Character_CurrLoc(*StringOfCharacters++);  
	}
	
	
	return LCD_OK ;
} /* END_FUN Send_A_String_WithLoc()*/
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	08 95       	ret

0000265a <LCD_Send_Integer_CurrLoc>:
 * param. : IntegerToDisplay this is the integer value that you want to display
 * param. : NumberOfDigits number of digits of the integer number that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_Integer_CurrLoc(uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
    265a:	ef 92       	push	r14
    265c:	ff 92       	push	r15
    265e:	0f 93       	push	r16
    2660:	1f 93       	push	r17
    2662:	cf 93       	push	r28
    2664:	df 93       	push	r29
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
		itoa(IntegerToDisplay,(char *)StringToDisplay,10); /* convert from int num. to char num. */
		LCD_Send_String_CurrLoc(StringToDisplay);  /* print char array on the screen */
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Integer_CurrLoc()*/
    266a:	ed b6       	in	r14, 0x3d	; 61
    266c:	fe b6       	in	r15, 0x3e	; 62
 * param. : NumberOfDigits number of digits of the integer number that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_Integer_CurrLoc(uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
		uint8_t StringToDisplay[NumberOfDigits];   /* create array with required size */ 
    266e:	2d b7       	in	r18, 0x3d	; 61
    2670:	3e b7       	in	r19, 0x3e	; 62
    2672:	26 1b       	sub	r18, r22
    2674:	31 09       	sbc	r19, r1
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	3e bf       	out	0x3e, r19	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	2d bf       	out	0x3d, r18	; 61
    2680:	0d b7       	in	r16, 0x3d	; 61
    2682:	1e b7       	in	r17, 0x3e	; 62
    2684:	0f 5f       	subi	r16, 0xFF	; 255
    2686:	1f 4f       	sbci	r17, 0xFF	; 255
    2688:	4a e0       	ldi	r20, 0x0A	; 10
    268a:	b8 01       	movw	r22, r16
    268c:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <__itoa_ncheck>
		itoa(IntegerToDisplay,(char *)StringToDisplay,10); /* convert from int num. to char num. */
		LCD_Send_String_CurrLoc(StringToDisplay);  /* print char array on the screen */
    2690:	c8 01       	movw	r24, r16
    2692:	0e 94 94 12 	call	0x2528	; 0x2528 <LCD_Send_String_CurrLoc>
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Integer_CurrLoc()*/
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	fe be       	out	0x3e, r15	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	ed be       	out	0x3d, r14	; 61
    26a2:	df 91       	pop	r29
    26a4:	cf 91       	pop	r28
    26a6:	1f 91       	pop	r17
    26a8:	0f 91       	pop	r16
    26aa:	ff 90       	pop	r15
    26ac:	ef 90       	pop	r14
    26ae:	08 95       	ret

000026b0 <Motor_Stop>:
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__L] , MOTORS.Motor[Motor_num].Pin[MOTOR__L] , GPIO_PIN_SET);	
}


static void Motor_Stop(uint8_t Motor_num)
{
    26b0:	ef 92       	push	r14
    26b2:	ff 92       	push	r15
    26b4:	0f 93       	push	r16
    26b6:	1f 93       	push	r17
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__H] , MOTORS.Motor[Motor_num].Pin[MOTOR__H] , GPIO_PIN_RESET);
    26bc:	c8 2f       	mov	r28, r24
    26be:	d0 e0       	ldi	r29, 0x00	; 0
    26c0:	7e 01       	movw	r14, r28
    26c2:	ee 0c       	add	r14, r14
    26c4:	ff 1c       	adc	r15, r15
    26c6:	87 01       	movw	r16, r14
    26c8:	0c 0f       	add	r16, r28
    26ca:	1d 1f       	adc	r17, r29
    26cc:	00 0f       	add	r16, r16
    26ce:	11 1f       	adc	r17, r17
    26d0:	04 56       	subi	r16, 0x64	; 100
    26d2:	1e 4f       	sbci	r17, 0xFE	; 254
    26d4:	40 e0       	ldi	r20, 0x00	; 0
    26d6:	f8 01       	movw	r30, r16
    26d8:	64 81       	ldd	r22, Z+4	; 0x04
    26da:	80 81       	ld	r24, Z
    26dc:	91 81       	ldd	r25, Z+1	; 0x01
    26de:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__L] , MOTORS.Motor[Motor_num].Pin[MOTOR__L] , GPIO_PIN_RESET);
    26e2:	e8 01       	movw	r28, r16
    26e4:	40 e0       	ldi	r20, 0x00	; 0
    26e6:	6d 81       	ldd	r22, Y+5	; 0x05
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	9b 81       	ldd	r25, Y+3	; 0x03
    26ec:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
}
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	1f 91       	pop	r17
    26f6:	0f 91       	pop	r16
    26f8:	ff 90       	pop	r15
    26fa:	ef 90       	pop	r14
    26fc:	08 95       	ret

000026fe <Motor_ACW>:
	return MOTOR_OK ;
	
}

static void Motor_ACW(uint8_t Motor_num)
{
    26fe:	ef 92       	push	r14
    2700:	ff 92       	push	r15
    2702:	0f 93       	push	r16
    2704:	1f 93       	push	r17
    2706:	cf 93       	push	r28
    2708:	df 93       	push	r29
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__H] , MOTORS.Motor[Motor_num].Pin[MOTOR__H] , GPIO_PIN_SET);
    270a:	c8 2f       	mov	r28, r24
    270c:	d0 e0       	ldi	r29, 0x00	; 0
    270e:	7e 01       	movw	r14, r28
    2710:	ee 0c       	add	r14, r14
    2712:	ff 1c       	adc	r15, r15
    2714:	87 01       	movw	r16, r14
    2716:	0c 0f       	add	r16, r28
    2718:	1d 1f       	adc	r17, r29
    271a:	00 0f       	add	r16, r16
    271c:	11 1f       	adc	r17, r17
    271e:	04 56       	subi	r16, 0x64	; 100
    2720:	1e 4f       	sbci	r17, 0xFE	; 254
    2722:	41 e0       	ldi	r20, 0x01	; 1
    2724:	f8 01       	movw	r30, r16
    2726:	64 81       	ldd	r22, Z+4	; 0x04
    2728:	80 81       	ld	r24, Z
    272a:	91 81       	ldd	r25, Z+1	; 0x01
    272c:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__L] , MOTORS.Motor[Motor_num].Pin[MOTOR__L] , GPIO_PIN_RESET);
    2730:	e8 01       	movw	r28, r16
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	6d 81       	ldd	r22, Y+5	; 0x05
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	9b 81       	ldd	r25, Y+3	; 0x03
    273a:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
}
    273e:	df 91       	pop	r29
    2740:	cf 91       	pop	r28
    2742:	1f 91       	pop	r17
    2744:	0f 91       	pop	r16
    2746:	ff 90       	pop	r15
    2748:	ef 90       	pop	r14
    274a:	08 95       	ret

0000274c <Motor_CW>:


static void Motor_CW(uint8_t Motor_num)
{
    274c:	ef 92       	push	r14
    274e:	ff 92       	push	r15
    2750:	0f 93       	push	r16
    2752:	1f 93       	push	r17
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
	
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__H] , MOTORS.Motor[Motor_num].Pin[MOTOR__H] , GPIO_PIN_RESET);
    2758:	c8 2f       	mov	r28, r24
    275a:	d0 e0       	ldi	r29, 0x00	; 0
    275c:	7e 01       	movw	r14, r28
    275e:	ee 0c       	add	r14, r14
    2760:	ff 1c       	adc	r15, r15
    2762:	87 01       	movw	r16, r14
    2764:	0c 0f       	add	r16, r28
    2766:	1d 1f       	adc	r17, r29
    2768:	00 0f       	add	r16, r16
    276a:	11 1f       	adc	r17, r17
    276c:	04 56       	subi	r16, 0x64	; 100
    276e:	1e 4f       	sbci	r17, 0xFE	; 254
    2770:	40 e0       	ldi	r20, 0x00	; 0
    2772:	f8 01       	movw	r30, r16
    2774:	64 81       	ldd	r22, Z+4	; 0x04
    2776:	80 81       	ld	r24, Z
    2778:	91 81       	ldd	r25, Z+1	; 0x01
    277a:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__L] , MOTORS.Motor[Motor_num].Pin[MOTOR__L] , GPIO_PIN_SET);	
    277e:	e8 01       	movw	r28, r16
    2780:	41 e0       	ldi	r20, 0x01	; 1
    2782:	6d 81       	ldd	r22, Y+5	; 0x05
    2784:	8a 81       	ldd	r24, Y+2	; 0x02
    2786:	9b 81       	ldd	r25, Y+3	; 0x03
    2788:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
}
    278c:	df 91       	pop	r29
    278e:	cf 91       	pop	r28
    2790:	1f 91       	pop	r17
    2792:	0f 91       	pop	r16
    2794:	ff 90       	pop	r15
    2796:	ef 90       	pop	r14
    2798:	08 95       	ret

0000279a <Motor_Init>:
static TIMInit_t  Tim_PWM_Handler ={ .Instance = TIM0 ,.COMPConfig.TIM8Bit.CompAction = TIM_COMP_PIN_OUT_Normal   , .TIM_Interrupt = TIM_0_IT_COMP ,.TimPreScaler = TIM_0_Prescaler_256  , .COMPConfig.TIM8Bit.CompValue = 0  };
#endif


MOTOR_STATUS_t Motor_Init(void)
{
    279a:	0f 93       	push	r16
    279c:	1f 93       	push	r17
    279e:	cf 93       	push	r28
    27a0:	df 93       	push	r29
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <Motor_Init+0xa>
    27a4:	1f 92       	push	r1
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
		GPIO_InitTypeDef   PIN_CONFIG = {.mode = GPIO_MODE_OUTPUT , .pull = GPIO_NOPULL }; 
    27aa:	19 82       	std	Y+1, r1	; 0x01
    27ac:	1a 82       	std	Y+2, r1	; 0x02
    27ae:	1b 82       	std	Y+3, r1	; 0x03
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	8a 83       	std	Y+2, r24	; 0x02
		if(Software_PWM_Init( GPIOD , GPIO_PIN_7 ,  &Tim_PWM_Handler ) != UTIL_OK)
    27b4:	42 ef       	ldi	r20, 0xF2	; 242
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	60 e8       	ldi	r22, 0x80	; 128
    27ba:	80 e3       	ldi	r24, 0x30	; 48
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	0e 94 23 1c 	call	0x3846	; 0x3846 <Software_PWM_Init>
    27c2:	81 11       	cpse	r24, r1
    27c4:	1e c0       	rjmp	.+60     	; 0x2802 <Motor_Init+0x68>
		{
			return MOTOR_PWM_ERROR ; 
		}
		if (Software_PWM_Start (&Tim_PWM_Handler) != UTIL_OK)
    27c6:	82 ef       	ldi	r24, 0xF2	; 242
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0e 94 93 1c 	call	0x3926	; 0x3926 <Software_PWM_Start>
    27ce:	81 11       	cpse	r24, r1
    27d0:	1a c0       	rjmp	.+52     	; 0x2806 <Motor_Init+0x6c>
    27d2:	10 e0       	ldi	r17, 0x00	; 0
    27d4:	12 c0       	rjmp	.+36     	; 0x27fa <Motor_Init+0x60>
			return MOTOR_PWM_ERROR ;
		}
		
		for (uint8_t iter = 0 ; iter < Total_MOTORS ; iter++)
		{
			PIN_CONFIG.pin = MOTORS.Motor[MOTOR_1].Pin[MOTOR__H];
    27d6:	04 e0       	ldi	r16, 0x04	; 4
    27d8:	09 83       	std	Y+1, r16	; 0x01
			HAL_GPIO_Pin_Init(MOTORS.Motor[MOTOR_1].Port[MOTOR__L] , &PIN_CONFIG);
    27da:	be 01       	movw	r22, r28
    27dc:	6f 5f       	subi	r22, 0xFF	; 255
    27de:	7f 4f       	sbci	r23, 0xFF	; 255
    27e0:	86 e3       	ldi	r24, 0x36	; 54
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <HAL_GPIO_Pin_Init>
			PIN_CONFIG.pin = MOTORS.Motor[MOTOR_1].Pin[MOTOR__H];
    27e8:	09 83       	std	Y+1, r16	; 0x01
			HAL_GPIO_Pin_Init(MOTORS.Motor[MOTOR_1].Port[MOTOR__L] , &PIN_CONFIG);
    27ea:	be 01       	movw	r22, r28
    27ec:	6f 5f       	subi	r22, 0xFF	; 255
    27ee:	7f 4f       	sbci	r23, 0xFF	; 255
    27f0:	86 e3       	ldi	r24, 0x36	; 54
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <HAL_GPIO_Pin_Init>
		if (Software_PWM_Start (&Tim_PWM_Handler) != UTIL_OK)
		{
			return MOTOR_PWM_ERROR ;
		}
		
		for (uint8_t iter = 0 ; iter < Total_MOTORS ; iter++)
    27f8:	1f 5f       	subi	r17, 0xFF	; 255
    27fa:	12 30       	cpi	r17, 0x02	; 2
    27fc:	60 f3       	brcs	.-40     	; 0x27d6 <Motor_Init+0x3c>
			HAL_GPIO_Pin_Init(MOTORS.Motor[MOTOR_1].Port[MOTOR__L] , &PIN_CONFIG);
			PIN_CONFIG.pin = MOTORS.Motor[MOTOR_1].Pin[MOTOR__H];
			HAL_GPIO_Pin_Init(MOTORS.Motor[MOTOR_1].Port[MOTOR__L] , &PIN_CONFIG);
		}
	
	return MOTOR_OK ; 
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	03 c0       	rjmp	.+6      	; 0x2808 <Motor_Init+0x6e>
MOTOR_STATUS_t Motor_Init(void)
{
		GPIO_InitTypeDef   PIN_CONFIG = {.mode = GPIO_MODE_OUTPUT , .pull = GPIO_NOPULL }; 
		if(Software_PWM_Init( GPIOD , GPIO_PIN_7 ,  &Tim_PWM_Handler ) != UTIL_OK)
		{
			return MOTOR_PWM_ERROR ; 
    2802:	83 e0       	ldi	r24, 0x03	; 3
    2804:	01 c0       	rjmp	.+2      	; 0x2808 <Motor_Init+0x6e>
		}
		if (Software_PWM_Start (&Tim_PWM_Handler) != UTIL_OK)
		{
			return MOTOR_PWM_ERROR ;
    2806:	83 e0       	ldi	r24, 0x03	; 3
			PIN_CONFIG.pin = MOTORS.Motor[MOTOR_1].Pin[MOTOR__H];
			HAL_GPIO_Pin_Init(MOTORS.Motor[MOTOR_1].Port[MOTOR__L] , &PIN_CONFIG);
		}
	
	return MOTOR_OK ; 
}
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	1f 91       	pop	r17
    2814:	0f 91       	pop	r16
    2816:	08 95       	ret

00002818 <Motor_Dir>:




MOTOR_STATUS_t Motor_Dir(Motor_DIR_t DIR , uint8_t Speed )
{
    2818:	cf 93       	push	r28
	static	uint8_t Motor_Speed = 0 ;
	static	Motor_DIR_t Motor_Dir = DID_STOP ;
	
	if ((Motor_Speed == Speed)&&(Motor_Dir == DIR))
    281a:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <Motor_Speed.1979>
    281e:	96 13       	cpse	r25, r22
    2820:	05 c0       	rjmp	.+10     	; 0x282c <Motor_Dir+0x14>
    2822:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <Motor_Dir.1980>
    2826:	98 17       	cp	r25, r24
    2828:	09 f4       	brne	.+2      	; 0x282c <Motor_Dir+0x14>
    282a:	62 c0       	rjmp	.+196    	; 0x28f0 <Motor_Dir+0xd8>
    282c:	c6 2f       	mov	r28, r22
	{
		return MOTOR_OK ; 
	}
	
	switch(DIR)
    282e:	82 30       	cpi	r24, 0x02	; 2
    2830:	71 f1       	breq	.+92     	; 0x288e <Motor_Dir+0x76>
    2832:	30 f4       	brcc	.+12     	; 0x2840 <Motor_Dir+0x28>
    2834:	88 23       	and	r24, r24
    2836:	e1 f1       	breq	.+120    	; 0x28b0 <Motor_Dir+0x98>
    2838:	81 30       	cpi	r24, 0x01	; 1
    283a:	09 f4       	brne	.+2      	; 0x283e <Motor_Dir+0x26>
    283c:	49 c0       	rjmp	.+146    	; 0x28d0 <Motor_Dir+0xb8>
    283e:	58 c0       	rjmp	.+176    	; 0x28f0 <Motor_Dir+0xd8>
    2840:	83 30       	cpi	r24, 0x03	; 3
    2842:	a1 f0       	breq	.+40     	; 0x286c <Motor_Dir+0x54>
    2844:	84 30       	cpi	r24, 0x04	; 4
    2846:	09 f0       	breq	.+2      	; 0x284a <Motor_Dir+0x32>
    2848:	53 c0       	rjmp	.+166    	; 0x28f0 <Motor_Dir+0xd8>
	{
		case DID_STOP :
			Motor_Stop(MOTOR_1);
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	0e 94 58 13 	call	0x26b0	; 0x26b0 <Motor_Stop>
			Motor_Stop(MOTOR_2);
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	0e 94 58 13 	call	0x26b0	; 0x26b0 <Motor_Stop>
			Motor_Dir = DID_STOP ; 
    2856:	84 e0       	ldi	r24, 0x04	; 4
    2858:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <Motor_Dir.1980>
			Motor_Speed = 0 ;
    285c:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <Motor_Speed.1979>

			Software_PWM_UpdateDuty( 0 ,&Tim_PWM_Handler );
    2860:	62 ef       	ldi	r22, 0xF2	; 242
    2862:	70 e0       	ldi	r23, 0x00	; 0
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	0e 94 9b 1c 	call	0x3936	; 0x3936 <Software_PWM_UpdateDuty>
		break; 
    286a:	42 c0       	rjmp	.+132    	; 0x28f0 <Motor_Dir+0xd8>
		case  DIR_BACKWARD :
			Motor_ACW(MOTOR_1);
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <Motor_ACW>
			Motor_ACW(MOTOR_2);
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	0e 94 7f 13 	call	0x26fe	; 0x26fe <Motor_ACW>
			Motor_Dir = DIR_BACKWARD ;
    2878:	83 e0       	ldi	r24, 0x03	; 3
    287a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <Motor_Dir.1980>
			Motor_Speed = Speed ;
    287e:	c0 93 f1 01 	sts	0x01F1, r28	; 0x8001f1 <Motor_Speed.1979>
			Software_PWM_UpdateDuty( Speed ,&Tim_PWM_Handler );
    2882:	62 ef       	ldi	r22, 0xF2	; 242
    2884:	70 e0       	ldi	r23, 0x00	; 0
    2886:	8c 2f       	mov	r24, r28
    2888:	0e 94 9b 1c 	call	0x3936	; 0x3936 <Software_PWM_UpdateDuty>
		break; 
    288c:	31 c0       	rjmp	.+98     	; 0x28f0 <Motor_Dir+0xd8>
		case  DIR_FORWARD :
			Motor_CW(MOTOR_1);
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	0e 94 a6 13 	call	0x274c	; 0x274c <Motor_CW>
			Motor_CW(MOTOR_2);
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	0e 94 a6 13 	call	0x274c	; 0x274c <Motor_CW>
			Motor_Dir = DIR_FORWARD ;
    289a:	82 e0       	ldi	r24, 0x02	; 2
    289c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <Motor_Dir.1980>
			Motor_Speed = Speed ;
    28a0:	c0 93 f1 01 	sts	0x01F1, r28	; 0x8001f1 <Motor_Speed.1979>
			Software_PWM_UpdateDuty( Speed ,&Tim_PWM_Handler );
    28a4:	62 ef       	ldi	r22, 0xF2	; 242
    28a6:	70 e0       	ldi	r23, 0x00	; 0
    28a8:	8c 2f       	mov	r24, r28
    28aa:	0e 94 9b 1c 	call	0x3936	; 0x3936 <Software_PWM_UpdateDuty>
		break; 
    28ae:	20 c0       	rjmp	.+64     	; 0x28f0 <Motor_Dir+0xd8>
		case  DIR_LEFT :
			Motor_CW(MOTOR_1);
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	0e 94 a6 13 	call	0x274c	; 0x274c <Motor_CW>
			Motor_ACW(MOTOR_2);
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	0e 94 7f 13 	call	0x26fe	; 0x26fe <Motor_ACW>
			Motor_Dir = DIR_LEFT ;
    28bc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <Motor_Dir.1980>
			Motor_Speed = Speed ;
    28c0:	c0 93 f1 01 	sts	0x01F1, r28	; 0x8001f1 <Motor_Speed.1979>
			Software_PWM_UpdateDuty( Speed ,&Tim_PWM_Handler );
    28c4:	62 ef       	ldi	r22, 0xF2	; 242
    28c6:	70 e0       	ldi	r23, 0x00	; 0
    28c8:	8c 2f       	mov	r24, r28
    28ca:	0e 94 9b 1c 	call	0x3936	; 0x3936 <Software_PWM_UpdateDuty>
		break; 
    28ce:	10 c0       	rjmp	.+32     	; 0x28f0 <Motor_Dir+0xd8>
		case DIR_RIGHT :
			Motor_ACW(MOTOR_1);
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	0e 94 7f 13 	call	0x26fe	; 0x26fe <Motor_ACW>
			Motor_CW(MOTOR_2);
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	0e 94 a6 13 	call	0x274c	; 0x274c <Motor_CW>
			Motor_Dir = DIR_RIGHT ;
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <Motor_Dir.1980>
			Motor_Speed = Speed ;
    28e2:	c0 93 f1 01 	sts	0x01F1, r28	; 0x8001f1 <Motor_Speed.1979>
			Software_PWM_UpdateDuty( Speed ,&Tim_PWM_Handler );
    28e6:	62 ef       	ldi	r22, 0xF2	; 242
    28e8:	70 e0       	ldi	r23, 0x00	; 0
    28ea:	8c 2f       	mov	r24, r28
    28ec:	0e 94 9b 1c 	call	0x3936	; 0x3936 <Software_PWM_UpdateDuty>
		
	}
	
	return MOTOR_OK ;
	
}
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	cf 91       	pop	r28
    28f4:	08 95       	ret

000028f6 <EEPROM_Init>:
	
	
	HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS ,(PageNum )*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE), ATM_CARD_ADDRESS_SIZE , TXBuffer , EEPROM_NUMBER_OF_BYTES_FOR_PAGE);
	return EEPROM_OK ;
	
}
    28f6:	86 e9       	ldi	r24, 0x96	; 150
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <I2C_Init>
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	08 95       	ret

00002902 <EEPROM_ReadByteS>:


EEPROM_Status_t EEPROM_ReadByteS(uint16_t StartByteNum , uint8_t * RXByte , uint8_t DataSize)
{
    2902:	8f 92       	push	r8
    2904:	9f 92       	push	r9
    2906:	af 92       	push	r10
    2908:	bf 92       	push	r11
    290a:	cf 92       	push	r12
    290c:	df 92       	push	r13
    290e:	ef 92       	push	r14
    2910:	0f 93       	push	r16
    2912:	1f 93       	push	r17
    2914:	cf 93       	push	r28
	
	if ((RXByte == NULL) || ( DataSize <= 0))
    2916:	61 15       	cp	r22, r1
    2918:	71 05       	cpc	r23, r1
    291a:	09 f4       	brne	.+2      	; 0x291e <EEPROM_ReadByteS+0x1c>
    291c:	46 c0       	rjmp	.+140    	; 0x29aa <EEPROM_ReadByteS+0xa8>
    291e:	44 23       	and	r20, r20
    2920:	09 f4       	brne	.+2      	; 0x2924 <EEPROM_ReadByteS+0x22>
    2922:	45 c0       	rjmp	.+138    	; 0x29ae <EEPROM_ReadByteS+0xac>
    2924:	c4 2f       	mov	r28, r20
    2926:	6b 01       	movw	r12, r22
    2928:	ac 01       	movw	r20, r24
	
		

		
		uint16_t PageNum =0 , ByteAddress =0 ;
		PageNum = StartByteNum/EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
    292a:	5c 01       	movw	r10, r24
    292c:	aa 0c       	add	r10, r10
    292e:	ab 2c       	mov	r10, r11
    2930:	aa 1c       	adc	r10, r10
    2932:	bb 08       	sbc	r11, r11
    2934:	b1 94       	neg	r11
		ByteAddress = StartByteNum%EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
    2936:	4c 01       	movw	r8, r24
    2938:	e8 94       	clt
    293a:	87 f8       	bld	r8, 7
    293c:	99 24       	eor	r9, r9
		if((ByteAddress + DataSize ) > EEPROM_NUMBER_OF_BYTES_FOR_PAGE )
    293e:	c4 01       	movw	r24, r8
    2940:	8c 0f       	add	r24, r28
    2942:	91 1d       	adc	r25, r1
    2944:	81 38       	cpi	r24, 0x81	; 129
    2946:	91 05       	cpc	r25, r1
    2948:	30 f1       	brcs	.+76     	; 0x2996 <EEPROM_ReadByteS+0x94>
		{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte ,
    294a:	80 e8       	ldi	r24, 0x80	; 128
    294c:	e8 2e       	mov	r14, r24
    294e:	e8 18       	sub	r14, r8
    2950:	8b 01       	movw	r16, r22
    2952:	22 e0       	ldi	r18, 0x02	; 2
    2954:	60 ea       	ldi	r22, 0xA0	; 160
    2956:	86 e9       	ldi	r24, 0x96	; 150
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <HAL_I2C_Mem_Read>
							  EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress);
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE)   ,
						ATM_CARD_ADDRESS_SIZE , RXByte + EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress , DataSize - EEPROM_NUMBER_OF_BYTES_FOR_PAGE + ByteAddress);
    295e:	00 e8       	ldi	r16, 0x80	; 128
    2960:	10 e0       	ldi	r17, 0x00	; 0
    2962:	08 19       	sub	r16, r8
    2964:	19 09       	sbc	r17, r9
		ByteAddress = StartByteNum%EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
		if((ByteAddress + DataSize ) > EEPROM_NUMBER_OF_BYTES_FOR_PAGE )
		{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte ,
							  EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress);
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE)   ,
    2966:	8c 2f       	mov	r24, r28
    2968:	88 0d       	add	r24, r8
    296a:	68 94       	set
    296c:	ee 24       	eor	r14, r14
    296e:	e7 f8       	bld	r14, 7
    2970:	e8 0e       	add	r14, r24
    2972:	0c 0d       	add	r16, r12
    2974:	1d 1d       	adc	r17, r13
    2976:	a5 01       	movw	r20, r10
    2978:	4f 5f       	subi	r20, 0xFF	; 255
    297a:	5f 4f       	sbci	r21, 0xFF	; 255
    297c:	56 95       	lsr	r21
    297e:	54 2f       	mov	r21, r20
    2980:	44 27       	eor	r20, r20
    2982:	57 95       	ror	r21
    2984:	47 95       	ror	r20
    2986:	22 e0       	ldi	r18, 0x02	; 2
    2988:	60 ea       	ldi	r22, 0xA0	; 160
    298a:	86 e9       	ldi	r24, 0x96	; 150
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <HAL_I2C_Mem_Read>
		}
		else{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte , DataSize );
		}
	
	return EEPROM_OK ;	
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	0d c0       	rjmp	.+26     	; 0x29b0 <EEPROM_ReadByteS+0xae>
							  EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress);
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE)   ,
						ATM_CARD_ADDRESS_SIZE , RXByte + EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress , DataSize - EEPROM_NUMBER_OF_BYTES_FOR_PAGE + ByteAddress);
		}
		else{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte , DataSize );
    2996:	ec 2e       	mov	r14, r28
    2998:	8b 01       	movw	r16, r22
    299a:	22 e0       	ldi	r18, 0x02	; 2
    299c:	60 ea       	ldi	r22, 0xA0	; 160
    299e:	86 e9       	ldi	r24, 0x96	; 150
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <HAL_I2C_Mem_Read>
		}
	
	return EEPROM_OK ;	
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	03 c0       	rjmp	.+6      	; 0x29b0 <EEPROM_ReadByteS+0xae>
EEPROM_Status_t EEPROM_ReadByteS(uint16_t StartByteNum , uint8_t * RXByte , uint8_t DataSize)
{
	
	if ((RXByte == NULL) || ( DataSize <= 0))
	{
		return EEPROM_PARAM_ERROR ;
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	01 c0       	rjmp	.+2      	; 0x29b0 <EEPROM_ReadByteS+0xae>
    29ae:	81 e0       	ldi	r24, 0x01	; 1
		else{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte , DataSize );
		}
	
	return EEPROM_OK ;	
}
    29b0:	cf 91       	pop	r28
    29b2:	1f 91       	pop	r17
    29b4:	0f 91       	pop	r16
    29b6:	ef 90       	pop	r14
    29b8:	df 90       	pop	r13
    29ba:	cf 90       	pop	r12
    29bc:	bf 90       	pop	r11
    29be:	af 90       	pop	r10
    29c0:	9f 90       	pop	r9
    29c2:	8f 90       	pop	r8
    29c4:	08 95       	ret

000029c6 <EEPROM_WriteByteS>:

EEPROM_Status_t EEPROM_WriteByteS(uint16_t StartByteNum , uint8_t  * TXByte , uint8_t BufferSize)
{
    29c6:	8f 92       	push	r8
    29c8:	9f 92       	push	r9
    29ca:	af 92       	push	r10
    29cc:	bf 92       	push	r11
    29ce:	cf 92       	push	r12
    29d0:	df 92       	push	r13
    29d2:	ef 92       	push	r14
    29d4:	0f 93       	push	r16
    29d6:	1f 93       	push	r17
    29d8:	cf 93       	push	r28
	uint16_t PageNum =0 , ByteAddress =0  ;
	if ((TXByte == NULL) || (BufferSize <= 0))
    29da:	61 15       	cp	r22, r1
    29dc:	71 05       	cpc	r23, r1
    29de:	09 f4       	brne	.+2      	; 0x29e2 <EEPROM_WriteByteS+0x1c>
    29e0:	46 c0       	rjmp	.+140    	; 0x2a6e <EEPROM_WriteByteS+0xa8>
    29e2:	44 23       	and	r20, r20
    29e4:	09 f4       	brne	.+2      	; 0x29e8 <EEPROM_WriteByteS+0x22>
    29e6:	45 c0       	rjmp	.+138    	; 0x2a72 <EEPROM_WriteByteS+0xac>
    29e8:	c4 2f       	mov	r28, r20
    29ea:	6b 01       	movw	r12, r22
    29ec:	ac 01       	movw	r20, r24
	{
		;
	}
	

		PageNum = StartByteNum/EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
    29ee:	5c 01       	movw	r10, r24
    29f0:	aa 0c       	add	r10, r10
    29f2:	ab 2c       	mov	r10, r11
    29f4:	aa 1c       	adc	r10, r10
    29f6:	bb 08       	sbc	r11, r11
    29f8:	b1 94       	neg	r11
		ByteAddress = StartByteNum%EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
    29fa:	4c 01       	movw	r8, r24
    29fc:	e8 94       	clt
    29fe:	87 f8       	bld	r8, 7
    2a00:	99 24       	eor	r9, r9

	if((ByteAddress + BufferSize ) > EEPROM_NUMBER_OF_BYTES_FOR_PAGE )
    2a02:	c4 01       	movw	r24, r8
    2a04:	8c 0f       	add	r24, r28
    2a06:	91 1d       	adc	r25, r1
    2a08:	81 38       	cpi	r24, 0x81	; 129
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	30 f1       	brcs	.+76     	; 0x2a5a <EEPROM_WriteByteS+0x94>
	{
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , TXByte ,  
    2a0e:	80 e8       	ldi	r24, 0x80	; 128
    2a10:	e8 2e       	mov	r14, r24
    2a12:	e8 18       	sub	r14, r8
    2a14:	8b 01       	movw	r16, r22
    2a16:	22 e0       	ldi	r18, 0x02	; 2
    2a18:	60 ea       	ldi	r22, 0xA0	; 160
    2a1a:	86 e9       	ldi	r24, 0x96	; 150
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <HAL_I2C_Mem_Write>
							EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress );
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE) , ATM_CARD_ADDRESS_SIZE , TXByte + (EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress), 
    2a22:	00 e8       	ldi	r16, 0x80	; 128
    2a24:	10 e0       	ldi	r17, 0x00	; 0
    2a26:	08 19       	sub	r16, r8
    2a28:	19 09       	sbc	r17, r9
    2a2a:	8c 2f       	mov	r24, r28
    2a2c:	88 0d       	add	r24, r8
    2a2e:	68 94       	set
    2a30:	ee 24       	eor	r14, r14
    2a32:	e7 f8       	bld	r14, 7
    2a34:	e8 0e       	add	r14, r24
    2a36:	0c 0d       	add	r16, r12
    2a38:	1d 1d       	adc	r17, r13
    2a3a:	a5 01       	movw	r20, r10
    2a3c:	4f 5f       	subi	r20, 0xFF	; 255
    2a3e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a40:	56 95       	lsr	r21
    2a42:	54 2f       	mov	r21, r20
    2a44:	44 27       	eor	r20, r20
    2a46:	57 95       	ror	r21
    2a48:	47 95       	ror	r20
    2a4a:	22 e0       	ldi	r18, 0x02	; 2
    2a4c:	60 ea       	ldi	r22, 0xA0	; 160
    2a4e:	86 e9       	ldi	r24, 0x96	; 150
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <HAL_I2C_Mem_Write>
		}else
		{
			this means this can be done in one transaction 
		}
	*/
return EEPROM_OK ; 	
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	0d c0       	rjmp	.+26     	; 0x2a74 <EEPROM_WriteByteS+0xae>
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , TXByte ,  
							EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress );
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE) , ATM_CARD_ADDRESS_SIZE , TXByte + (EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress), 
							 BufferSize - EEPROM_NUMBER_OF_BYTES_FOR_PAGE + ByteAddress);	
	}else{
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , TXByte , BufferSize);
    2a5a:	ec 2e       	mov	r14, r28
    2a5c:	8b 01       	movw	r16, r22
    2a5e:	22 e0       	ldi	r18, 0x02	; 2
    2a60:	60 ea       	ldi	r22, 0xA0	; 160
    2a62:	86 e9       	ldi	r24, 0x96	; 150
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <HAL_I2C_Mem_Write>
		}else
		{
			this means this can be done in one transaction 
		}
	*/
return EEPROM_OK ; 	
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	03 c0       	rjmp	.+6      	; 0x2a74 <EEPROM_WriteByteS+0xae>
EEPROM_Status_t EEPROM_WriteByteS(uint16_t StartByteNum , uint8_t  * TXByte , uint8_t BufferSize)
{
	uint16_t PageNum =0 , ByteAddress =0  ;
	if ((TXByte == NULL) || (BufferSize <= 0))
	{
		return EEPROM_PARAM_ERROR ;
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	01 c0       	rjmp	.+2      	; 0x2a74 <EEPROM_WriteByteS+0xae>
    2a72:	81 e0       	ldi	r24, 0x01	; 1
			this means this can be done in one transaction 
		}
	*/
return EEPROM_OK ; 	

}
    2a74:	cf 91       	pop	r28
    2a76:	1f 91       	pop	r17
    2a78:	0f 91       	pop	r16
    2a7a:	ef 90       	pop	r14
    2a7c:	df 90       	pop	r13
    2a7e:	cf 90       	pop	r12
    2a80:	bf 90       	pop	r11
    2a82:	af 90       	pop	r10
    2a84:	9f 90       	pop	r9
    2a86:	8f 90       	pop	r8
    2a88:	08 95       	ret

00002a8a <Button_Init>:
 * brief : this function used to initialize all Buttons  
 * parameter(input) : Buttons pointer to array of Buttons configurations 
 * return : status  
 */
ButtonStatus_t Button_Init(ButtonConfig_t * Buttons )
{
    2a8a:	ef 92       	push	r14
    2a8c:	ff 92       	push	r15
    2a8e:	1f 93       	push	r17
    2a90:	cf 93       	push	r28
    2a92:	df 93       	push	r29
    2a94:	00 d0       	rcall	.+0      	; 0x2a96 <Button_Init+0xc>
    2a96:	1f 92       	push	r1
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
	
	if(Buttons == NULL )
    2a9c:	00 97       	sbiw	r24, 0x00	; 0
    2a9e:	d9 f0       	breq	.+54     	; 0x2ad6 <Button_Init+0x4c>
    2aa0:	7c 01       	movw	r14, r24
	}
	else
	{
		
		GPIO_InitTypeDef ButtoninInit ; 
		ButtoninInit.mode = GPIO_MODE_INPUT ; 
    2aa2:	1a 82       	std	Y+2, r1	; 0x02
	
	
		for (uint8_t itera = 0 ; itera < NumberOFButtons ; itera++ )
    2aa4:	10 e0       	ldi	r17, 0x00	; 0
    2aa6:	13 c0       	rjmp	.+38     	; 0x2ace <Button_Init+0x44>
		{
			ButtoninInit.pin = 	Buttons[itera].PINNum ;
    2aa8:	e1 2f       	mov	r30, r17
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	cf 01       	movw	r24, r30
    2aae:	88 0f       	add	r24, r24
    2ab0:	99 1f       	adc	r25, r25
    2ab2:	e8 0f       	add	r30, r24
    2ab4:	f9 1f       	adc	r31, r25
    2ab6:	ee 0d       	add	r30, r14
    2ab8:	ff 1d       	adc	r31, r15
    2aba:	82 81       	ldd	r24, Z+2	; 0x02
    2abc:	89 83       	std	Y+1, r24	; 0x01
			HAL_GPIO_Pin_Init(Buttons[itera].PORT , &ButtoninInit) ;
    2abe:	be 01       	movw	r22, r28
    2ac0:	6f 5f       	subi	r22, 0xFF	; 255
    2ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac4:	80 81       	ld	r24, Z
    2ac6:	91 81       	ldd	r25, Z+1	; 0x01
    2ac8:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <HAL_GPIO_Pin_Init>
		
		GPIO_InitTypeDef ButtoninInit ; 
		ButtoninInit.mode = GPIO_MODE_INPUT ; 
	
	
		for (uint8_t itera = 0 ; itera < NumberOFButtons ; itera++ )
    2acc:	1f 5f       	subi	r17, 0xFF	; 255
    2ace:	12 30       	cpi	r17, 0x02	; 2
    2ad0:	58 f3       	brcs	.-42     	; 0x2aa8 <Button_Init+0x1e>
	
	
	
	}
	
	return  FUN_Ok ;
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	01 c0       	rjmp	.+2      	; 0x2ad8 <Button_Init+0x4e>
ButtonStatus_t Button_Init(ButtonConfig_t * Buttons )
{
	
	if(Buttons == NULL )
	{
		return FUN_Param_ERROR ;
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return  FUN_Ok ;
	
	
}
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	df 91       	pop	r29
    2ae0:	cf 91       	pop	r28
    2ae2:	1f 91       	pop	r17
    2ae4:	ff 90       	pop	r15
    2ae6:	ef 90       	pop	r14
    2ae8:	08 95       	ret

00002aea <Button_Read>:
 * return : states of specified pin 
 */
ButtonState_t Button_Read(ButtonConfig_t * Buttons , uint8_t ButtonIndex  )
{
	
	if ((Buttons == NULL) || (ButtonIndex > NumberOFButtons))
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	89 f0       	breq	.+34     	; 0x2b10 <Button_Read+0x26>
    2aee:	63 30       	cpi	r22, 0x03	; 3
    2af0:	88 f4       	brcc	.+34     	; 0x2b14 <Button_Read+0x2a>
	{
		return -1 ;
	}else
	{
		return HAL_GPIO_READPIN(Buttons[ButtonIndex].PORT , Buttons[ButtonIndex].PINNum) ;
    2af2:	70 e0       	ldi	r23, 0x00	; 0
    2af4:	fb 01       	movw	r30, r22
    2af6:	ee 0f       	add	r30, r30
    2af8:	ff 1f       	adc	r31, r31
    2afa:	6e 0f       	add	r22, r30
    2afc:	7f 1f       	adc	r23, r31
    2afe:	fc 01       	movw	r30, r24
    2b00:	e6 0f       	add	r30, r22
    2b02:	f7 1f       	adc	r31, r23
    2b04:	62 81       	ldd	r22, Z+2	; 0x02
    2b06:	80 81       	ld	r24, Z
    2b08:	91 81       	ldd	r25, Z+1	; 0x01
    2b0a:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <HAL_GPIO_READPIN>
    2b0e:	08 95       	ret
ButtonState_t Button_Read(ButtonConfig_t * Buttons , uint8_t ButtonIndex  )
{
	
	if ((Buttons == NULL) || (ButtonIndex > NumberOFButtons))
	{
		return -1 ;
    2b10:	8f ef       	ldi	r24, 0xFF	; 255
    2b12:	08 95       	ret
    2b14:	8f ef       	ldi	r24, 0xFF	; 255
	}else
	{
		return HAL_GPIO_READPIN(Buttons[ButtonIndex].PORT , Buttons[ButtonIndex].PINNum) ;
	}
	
}
    2b16:	08 95       	ret

00002b18 <String_F_PrintLine>:




String_F_Status_t String_F_PrintLine(char const * Str_F)
{
    2b18:	cf 93       	push	r28
    2b1a:	df 93       	push	r29
	if (Str_F == NULL)
    2b1c:	00 97       	sbiw	r24, 0x00	; 0
    2b1e:	69 f1       	breq	.+90     	; 0x2b7a <String_F_PrintLine+0x62>
    2b20:	ec 01       	movw	r28, r24
	{
		return String_F_NOK ; 
	}
		printf_P(PSTR("\n"));
    2b22:	83 e9       	ldi	r24, 0x93	; 147
    2b24:	9e e0       	ldi	r25, 0x0E	; 14
    2b26:	9f 93       	push	r25
    2b28:	8f 93       	push	r24
    2b2a:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
		printf_P(PSTR("**************************************************************\n               " ));
    2b2e:	84 e4       	ldi	r24, 0x44	; 68
    2b30:	9e e0       	ldi	r25, 0x0E	; 14
    2b32:	9f 93       	push	r25
    2b34:	8f 93       	push	r24
    2b36:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
		printf_P(Str_F);
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
		printf_P(PSTR("                \n"));		
    2b42:	82 e3       	ldi	r24, 0x32	; 50
    2b44:	9e e0       	ldi	r25, 0x0E	; 14
    2b46:	9f 93       	push	r25
    2b48:	8f 93       	push	r24
    2b4a:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
		printf_P(PSTR("**************************************************************\n"));
    2b4e:	82 ef       	ldi	r24, 0xF2	; 242
    2b50:	9d e0       	ldi	r25, 0x0D	; 13
    2b52:	9f 93       	push	r25
    2b54:	8f 93       	push	r24
    2b56:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
		printf_P(PSTR("\n"));
    2b5a:	80 ef       	ldi	r24, 0xF0	; 240
    2b5c:	9d e0       	ldi	r25, 0x0D	; 13
    2b5e:	9f 93       	push	r25
    2b60:	8f 93       	push	r24
    2b62:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
		return   String_F_OK ;	
    2b66:	8d b7       	in	r24, 0x3d	; 61
    2b68:	9e b7       	in	r25, 0x3e	; 62
    2b6a:	0c 96       	adiw	r24, 0x0c	; 12
    2b6c:	0f b6       	in	r0, 0x3f	; 63
    2b6e:	f8 94       	cli
    2b70:	9e bf       	out	0x3e, r25	; 62
    2b72:	0f be       	out	0x3f, r0	; 63
    2b74:	8d bf       	out	0x3d, r24	; 61
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	01 c0       	rjmp	.+2      	; 0x2b7c <String_F_PrintLine+0x64>

String_F_Status_t String_F_PrintLine(char const * Str_F)
{
	if (Str_F == NULL)
	{
		return String_F_NOK ; 
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
		printf_P(Str_F);
		printf_P(PSTR("                \n"));		
		printf_P(PSTR("**************************************************************\n"));
		printf_P(PSTR("\n"));
		return   String_F_OK ;	
}
    2b7c:	df 91       	pop	r29
    2b7e:	cf 91       	pop	r28
    2b80:	08 95       	ret

00002b82 <String_F_PrintTwoLines>:



String_F_Status_t String_F_PrintTwoLines(char const *  Str_F1 ,char const *  Str_F2)
{
    2b82:	0f 93       	push	r16
    2b84:	1f 93       	push	r17
    2b86:	cf 93       	push	r28
    2b88:	df 93       	push	r29
	if ((Str_F1 == NULL)||(Str_F2 == NULL))
    2b8a:	00 97       	sbiw	r24, 0x00	; 0
    2b8c:	79 f1       	breq	.+94     	; 0x2bec <String_F_PrintTwoLines+0x6a>
    2b8e:	61 15       	cp	r22, r1
    2b90:	71 05       	cpc	r23, r1
    2b92:	71 f1       	breq	.+92     	; 0x2bf0 <String_F_PrintTwoLines+0x6e>
    2b94:	8b 01       	movw	r16, r22
    2b96:	ec 01       	movw	r28, r24
	{
		return String_F_NOK ;
	}
	printf_P(PSTR("**************************************************************\n                " ));
    2b98:	80 ea       	ldi	r24, 0xA0	; 160
    2b9a:	9d e0       	ldi	r25, 0x0D	; 13
    2b9c:	9f 93       	push	r25
    2b9e:	8f 93       	push	r24
    2ba0:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(Str_F1);	
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(PSTR("\n                "));	
    2bac:	8e e8       	ldi	r24, 0x8E	; 142
    2bae:	9d e0       	ldi	r25, 0x0D	; 13
    2bb0:	9f 93       	push	r25
    2bb2:	8f 93       	push	r24
    2bb4:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(Str_F2);
    2bb8:	1f 93       	push	r17
    2bba:	0f 93       	push	r16
    2bbc:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(PSTR("\n"));
    2bc0:	8c e8       	ldi	r24, 0x8C	; 140
    2bc2:	9d e0       	ldi	r25, 0x0D	; 13
    2bc4:	9f 93       	push	r25
    2bc6:	8f 93       	push	r24
    2bc8:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	printf_P(PSTR("**************************************************************\n"));
    2bcc:	8c e4       	ldi	r24, 0x4C	; 76
    2bce:	9d e0       	ldi	r25, 0x0D	; 13
    2bd0:	9f 93       	push	r25
    2bd2:	8f 93       	push	r24
    2bd4:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <printf_P>
	return   String_F_OK ;
    2bd8:	8d b7       	in	r24, 0x3d	; 61
    2bda:	9e b7       	in	r25, 0x3e	; 62
    2bdc:	0c 96       	adiw	r24, 0x0c	; 12
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	9e bf       	out	0x3e, r25	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	8d bf       	out	0x3d, r24	; 61
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	03 c0       	rjmp	.+6      	; 0x2bf2 <String_F_PrintTwoLines+0x70>

String_F_Status_t String_F_PrintTwoLines(char const *  Str_F1 ,char const *  Str_F2)
{
	if ((Str_F1 == NULL)||(Str_F2 == NULL))
	{
		return String_F_NOK ;
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	01 c0       	rjmp	.+2      	; 0x2bf2 <String_F_PrintTwoLines+0x70>
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
	printf_P(Str_F2);
	printf_P(PSTR("\n"));
	printf_P(PSTR("**************************************************************\n"));
	return   String_F_OK ;
	
}
    2bf2:	df 91       	pop	r29
    2bf4:	cf 91       	pop	r28
    2bf6:	1f 91       	pop	r17
    2bf8:	0f 91       	pop	r16
    2bfa:	08 95       	ret

00002bfc <main>:

int main(void)
{
	
    /* Replace with your application code */
	APP_Init();
    2bfc:	0e 94 8d 08 	call	0x111a	; 0x111a <APP_Init>
	sei();
    2c00:	78 94       	sei

	while (1) 
    {
		APP_UPdate();
    2c02:	0e 94 19 08 	call	0x1032	; 0x1032 <APP_UPdate>
    2c06:	fd cf       	rjmp	.-6      	; 0x2c02 <main+0x6>

00002c08 <__vector_1>:
}


/* INIT0 Function */
ISR(INT0_vect)
{
    2c08:	1f 92       	push	r1
    2c0a:	0f 92       	push	r0
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	0f 92       	push	r0
    2c10:	11 24       	eor	r1, r1
    2c12:	2f 93       	push	r18
    2c14:	3f 93       	push	r19
    2c16:	4f 93       	push	r20
    2c18:	5f 93       	push	r21
    2c1a:	6f 93       	push	r22
    2c1c:	7f 93       	push	r23
    2c1e:	8f 93       	push	r24
    2c20:	9f 93       	push	r25
    2c22:	af 93       	push	r26
    2c24:	bf 93       	push	r27
    2c26:	ef 93       	push	r30
    2c28:	ff 93       	push	r31
	ptr_INT0();
    2c2a:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <ptr_INT0>
    2c2e:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <ptr_INT0+0x1>
    2c32:	09 95       	icall
}
    2c34:	ff 91       	pop	r31
    2c36:	ef 91       	pop	r30
    2c38:	bf 91       	pop	r27
    2c3a:	af 91       	pop	r26
    2c3c:	9f 91       	pop	r25
    2c3e:	8f 91       	pop	r24
    2c40:	7f 91       	pop	r23
    2c42:	6f 91       	pop	r22
    2c44:	5f 91       	pop	r21
    2c46:	4f 91       	pop	r20
    2c48:	3f 91       	pop	r19
    2c4a:	2f 91       	pop	r18
    2c4c:	0f 90       	pop	r0
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	0f 90       	pop	r0
    2c52:	1f 90       	pop	r1
    2c54:	18 95       	reti

00002c56 <__vector_2>:
/* INIT0 Function */
ISR(INT1_vect)
{
    2c56:	1f 92       	push	r1
    2c58:	0f 92       	push	r0
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	0f 92       	push	r0
    2c5e:	11 24       	eor	r1, r1
    2c60:	2f 93       	push	r18
    2c62:	3f 93       	push	r19
    2c64:	4f 93       	push	r20
    2c66:	5f 93       	push	r21
    2c68:	6f 93       	push	r22
    2c6a:	7f 93       	push	r23
    2c6c:	8f 93       	push	r24
    2c6e:	9f 93       	push	r25
    2c70:	af 93       	push	r26
    2c72:	bf 93       	push	r27
    2c74:	ef 93       	push	r30
    2c76:	ff 93       	push	r31
	ptr_INT1();
    2c78:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <ptr_INT1>
    2c7c:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <ptr_INT1+0x1>
    2c80:	09 95       	icall
}
    2c82:	ff 91       	pop	r31
    2c84:	ef 91       	pop	r30
    2c86:	bf 91       	pop	r27
    2c88:	af 91       	pop	r26
    2c8a:	9f 91       	pop	r25
    2c8c:	8f 91       	pop	r24
    2c8e:	7f 91       	pop	r23
    2c90:	6f 91       	pop	r22
    2c92:	5f 91       	pop	r21
    2c94:	4f 91       	pop	r20
    2c96:	3f 91       	pop	r19
    2c98:	2f 91       	pop	r18
    2c9a:	0f 90       	pop	r0
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	0f 90       	pop	r0
    2ca0:	1f 90       	pop	r1
    2ca2:	18 95       	reti

00002ca4 <__vector_3>:
/* INIT0 Function */
ISR(INT2_vect)
{
    2ca4:	1f 92       	push	r1
    2ca6:	0f 92       	push	r0
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	0f 92       	push	r0
    2cac:	11 24       	eor	r1, r1
    2cae:	2f 93       	push	r18
    2cb0:	3f 93       	push	r19
    2cb2:	4f 93       	push	r20
    2cb4:	5f 93       	push	r21
    2cb6:	6f 93       	push	r22
    2cb8:	7f 93       	push	r23
    2cba:	8f 93       	push	r24
    2cbc:	9f 93       	push	r25
    2cbe:	af 93       	push	r26
    2cc0:	bf 93       	push	r27
    2cc2:	ef 93       	push	r30
    2cc4:	ff 93       	push	r31
	ptr_INT2();
    2cc6:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <ptr_INT2>
    2cca:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <ptr_INT2+0x1>
    2cce:	09 95       	icall
    2cd0:	ff 91       	pop	r31
    2cd2:	ef 91       	pop	r30
    2cd4:	bf 91       	pop	r27
    2cd6:	af 91       	pop	r26
    2cd8:	9f 91       	pop	r25
    2cda:	8f 91       	pop	r24
    2cdc:	7f 91       	pop	r23
    2cde:	6f 91       	pop	r22
    2ce0:	5f 91       	pop	r21
    2ce2:	4f 91       	pop	r20
    2ce4:	3f 91       	pop	r19
    2ce6:	2f 91       	pop	r18
    2ce8:	0f 90       	pop	r0
    2cea:	0f be       	out	0x3f, r0	; 63
    2cec:	0f 90       	pop	r0
    2cee:	1f 90       	pop	r1
    2cf0:	18 95       	reti

00002cf2 <ADC_START>:
	
}


 void CallBackFun(void (*fun)(void))
 {
    2cf2:	86 b1       	in	r24, 0x06	; 6
    2cf4:	80 64       	ori	r24, 0x40	; 64
    2cf6:	86 b9       	out	0x06, r24	; 6
    2cf8:	08 95       	ret

00002cfa <ADC_Init>:
    2cfa:	fc 01       	movw	r30, r24
    2cfc:	80 b7       	in	r24, 0x30	; 48
    2cfe:	8f 71       	andi	r24, 0x1F	; 31
    2d00:	80 bf       	out	0x30, r24	; 48
    2d02:	20 b7       	in	r18, 0x30	; 48
    2d04:	90 81       	ld	r25, Z
    2d06:	30 e2       	ldi	r19, 0x20	; 32
    2d08:	93 9f       	mul	r25, r19
    2d0a:	c0 01       	movw	r24, r0
    2d0c:	11 24       	eor	r1, r1
    2d0e:	82 2b       	or	r24, r18
    2d10:	80 bf       	out	0x30, r24	; 48
    2d12:	16 b8       	out	0x06, r1	; 6
    2d14:	93 81       	ldd	r25, Z+3	; 0x03
    2d16:	81 81       	ldd	r24, Z+1	; 0x01
    2d18:	89 2b       	or	r24, r25
    2d1a:	80 6a       	ori	r24, 0xA0	; 160
    2d1c:	86 b9       	out	0x06, r24	; 6
    2d1e:	17 b8       	out	0x07, r1	; 7
    2d20:	94 81       	ldd	r25, Z+4	; 0x04
    2d22:	82 81       	ldd	r24, Z+2	; 0x02
    2d24:	89 2b       	or	r24, r25
    2d26:	87 b9       	out	0x07, r24	; 7
    2d28:	83 81       	ldd	r24, Z+3	; 0x03
    2d2a:	88 23       	and	r24, r24
    2d2c:	09 f0       	breq	.+2      	; 0x2d30 <ADC_Init+0x36>
    2d2e:	78 94       	sei
    2d30:	08 95       	ret

00002d32 <ADC_Get_Value_IT>:
 
 
 
 
 PUBLIC void ADC_Get_Value_IT(ADC_CH_t AdcChannel)
 {
    2d32:	cf 93       	push	r28
    2d34:	c8 2f       	mov	r28, r24
	 // first we initialize GPIO port to be ready to receive analog signal
	 ADC_GPIO.mode = GPIO_MODE_INPUT ;
    2d36:	e2 ef       	ldi	r30, 0xF2	; 242
    2d38:	f1 e0       	ldi	r31, 0x01	; 1
    2d3a:	11 82       	std	Z+1, r1	; 0x01
	 ADC_GPIO.pin = (1<<AdcChannel) ;
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	0c 2e       	mov	r0, r28
    2d40:	01 c0       	rjmp	.+2      	; 0x2d44 <ADC_Get_Value_IT+0x12>
    2d42:	88 0f       	add	r24, r24
    2d44:	0a 94       	dec	r0
    2d46:	ea f7       	brpl	.-6      	; 0x2d42 <ADC_Get_Value_IT+0x10>
    2d48:	80 83       	st	Z, r24
	 ADC_GPIO.pull = GPIO_NOPULL ;
    2d4a:	12 82       	std	Z+2, r1	; 0x02
	 HAL_GPIO_Pin_Init(GPIOA , &ADC_GPIO);  /* set selected pin as GPIO analog pin */
    2d4c:	bf 01       	movw	r22, r30
    2d4e:	89 e3       	ldi	r24, 0x39	; 57
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <HAL_GPIO_Pin_Init>
	 
	 ADMUX &=~(0x1f);		  /* clear first before reconfiguration */
    2d56:	87 b1       	in	r24, 0x07	; 7
    2d58:	80 7e       	andi	r24, 0xE0	; 224
    2d5a:	87 b9       	out	0x07, r24	; 7
	 ADMUX |= (AdcChannel);	 /* select channel */
    2d5c:	87 b1       	in	r24, 0x07	; 7
    2d5e:	8c 2b       	or	r24, r28
    2d60:	87 b9       	out	0x07, r24	; 7
	 ADC_START();
    2d62:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <ADC_START>
	 
	 
 }
    2d66:	cf 91       	pop	r28
    2d68:	08 95       	ret

00002d6a <__vector_16>:


 ISR(ADC_vect)
 {	
    2d6a:	1f 92       	push	r1
    2d6c:	0f 92       	push	r0
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	0f 92       	push	r0
    2d72:	11 24       	eor	r1, r1
    2d74:	2f 93       	push	r18
    2d76:	3f 93       	push	r19
    2d78:	4f 93       	push	r20
    2d7a:	5f 93       	push	r21
    2d7c:	6f 93       	push	r22
    2d7e:	7f 93       	push	r23
    2d80:	8f 93       	push	r24
    2d82:	9f 93       	push	r25
    2d84:	af 93       	push	r26
    2d86:	bf 93       	push	r27
    2d88:	ef 93       	push	r30
    2d8a:	ff 93       	push	r31

		if(ADC_Adjust_Left & ADMUX ) /* if left adjust is selected */ 
    2d8c:	3d 9b       	sbis	0x07, 5	; 7
    2d8e:	15 c0       	rjmp	.+42     	; 0x2dba <__vector_16+0x50>
		{
			value =  (ADCL>>6)|(ADCH);	/* ADCL must read first then ADCH to Re_enable access to ADCL & ADCH */
    2d90:	64 b1       	in	r22, 0x04	; 4
    2d92:	85 b1       	in	r24, 0x05	; 5
    2d94:	62 95       	swap	r22
    2d96:	66 95       	lsr	r22
    2d98:	66 95       	lsr	r22
    2d9a:	63 70       	andi	r22, 0x03	; 3
    2d9c:	68 2b       	or	r22, r24
    2d9e:	70 e0       	ldi	r23, 0x00	; 0
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__floatsisf>
    2da8:	60 93 f5 01 	sts	0x01F5, r22	; 0x8001f5 <value>
    2dac:	70 93 f6 01 	sts	0x01F6, r23	; 0x8001f6 <value+0x1>
    2db0:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <value+0x2>
    2db4:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <value+0x3>
    2db8:	14 c0       	rjmp	.+40     	; 0x2de2 <__vector_16+0x78>
		}else{							   /* if right adjust is selected */ 
			value = (ADCL)|(ADCH<<8);
    2dba:	84 b1       	in	r24, 0x04	; 4
    2dbc:	65 b1       	in	r22, 0x05	; 5
    2dbe:	70 e0       	ldi	r23, 0x00	; 0
    2dc0:	76 2f       	mov	r23, r22
    2dc2:	66 27       	eor	r22, r22
    2dc4:	68 2b       	or	r22, r24
    2dc6:	07 2e       	mov	r0, r23
    2dc8:	00 0c       	add	r0, r0
    2dca:	88 0b       	sbc	r24, r24
    2dcc:	99 0b       	sbc	r25, r25
    2dce:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__floatsisf>
    2dd2:	60 93 f5 01 	sts	0x01F5, r22	; 0x8001f5 <value>
    2dd6:	70 93 f6 01 	sts	0x01F6, r23	; 0x8001f6 <value+0x1>
    2dda:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <value+0x2>
    2dde:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <value+0x3>
		}
		
		value = ((( value )*0.0048828 )/0.01) ;
    2de2:	25 ee       	ldi	r18, 0xE5	; 229
    2de4:	3f ef       	ldi	r19, 0xFF	; 255
    2de6:	4f e9       	ldi	r20, 0x9F	; 159
    2de8:	5b e3       	ldi	r21, 0x3B	; 59
    2dea:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <value>
    2dee:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <value+0x1>
    2df2:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <value+0x2>
    2df6:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <value+0x3>
    2dfa:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <__mulsf3>
    2dfe:	2a e0       	ldi	r18, 0x0A	; 10
    2e00:	37 ed       	ldi	r19, 0xD7	; 215
    2e02:	43 e2       	ldi	r20, 0x23	; 35
    2e04:	5c e3       	ldi	r21, 0x3C	; 60
    2e06:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__divsf3>
    2e0a:	60 93 f5 01 	sts	0x01F5, r22	; 0x8001f5 <value>
    2e0e:	70 93 f6 01 	sts	0x01F6, r23	; 0x8001f6 <value+0x1>
    2e12:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <value+0x2>
    2e16:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <value+0x3>
		if ((uint16_t)value >  Max_Temp )
    2e1a:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <__fixunssfsi>
    2e1e:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <__data_end>
    2e22:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <__data_end+0x1>
    2e26:	26 17       	cp	r18, r22
    2e28:	37 07       	cpc	r19, r23
    2e2a:	28 f4       	brcc	.+10     	; 0x2e36 <__vector_16+0xcc>
		{
			SERVER_ADMIN_Error(ADMIN_ERROR_SET);
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	0e 94 c3 10 	call	0x2186	; 0x2186 <SERVER_ADMIN_Error>
			ATM_Lock_Fun();
    2e32:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <ATM_Lock_Fun>
		}

    2e36:	ff 91       	pop	r31
    2e38:	ef 91       	pop	r30
    2e3a:	bf 91       	pop	r27
    2e3c:	af 91       	pop	r26
    2e3e:	9f 91       	pop	r25
    2e40:	8f 91       	pop	r24
    2e42:	7f 91       	pop	r23
    2e44:	6f 91       	pop	r22
    2e46:	5f 91       	pop	r21
    2e48:	4f 91       	pop	r20
    2e4a:	3f 91       	pop	r19
    2e4c:	2f 91       	pop	r18
    2e4e:	0f 90       	pop	r0
    2e50:	0f be       	out	0x3f, r0	; 63
    2e52:	0f 90       	pop	r0
    2e54:	1f 90       	pop	r1
    2e56:	18 95       	reti

00002e58 <HAL_GPIO_Pin_Init>:
 * param. : PORT pointer to GPIO port
 * param. : PIN_CONFIG pointer to struct hold all configuration
 * return : void 
 */
void HAL_GPIO_Pin_Init(StrGPIO_t PORT, GPIO_InitTypeDef *  PIN_CONFIG)
{
    2e58:	fc 01       	movw	r30, r24

		if(PIN_CONFIG->mode == GPIO_MODE_OUTPUT)
    2e5a:	db 01       	movw	r26, r22
    2e5c:	11 96       	adiw	r26, 0x01	; 1
    2e5e:	8c 91       	ld	r24, X
    2e60:	11 97       	sbiw	r26, 0x01	; 1
    2e62:	81 30       	cpi	r24, 0x01	; 1
    2e64:	29 f4       	brne	.+10     	; 0x2e70 <HAL_GPIO_Pin_Init+0x18>
		{
			PORT->DDR_REG  |= PIN_CONFIG->pin ;      //SET ALL PINS AS OUTPUT
    2e66:	8c 91       	ld	r24, X
    2e68:	91 81       	ldd	r25, Z+1	; 0x01
    2e6a:	89 2b       	or	r24, r25
    2e6c:	81 83       	std	Z+1, r24	; 0x01
    2e6e:	08 95       	ret
		}else{  // PINS MODE CONFIGURED AS INPUT
			if(PIN_CONFIG->pull == GPIO_PULLUP)
			{
			//	PORT->PIN_REG |= PIN_CONFIG->pin ;     // SET PULL UP RES.
			}
			PORT->DDR_REG &= ~(PIN_CONFIG->pin);
    2e70:	db 01       	movw	r26, r22
    2e72:	9c 91       	ld	r25, X
    2e74:	90 95       	com	r25
    2e76:	81 81       	ldd	r24, Z+1	; 0x01
    2e78:	98 23       	and	r25, r24
    2e7a:	91 83       	std	Z+1, r25	; 0x01
    2e7c:	08 95       	ret

00002e7e <HAL_GPIO_READPIN>:
 * param. : PIN_NUM the pin number must be one of GPIO_PIN_ 
 * return : return on of  GPIO_PIN_RESET or GPIO_PIN_SET 
 */
GPIO_PinState HAL_GPIO_READPIN(StrGPIO_t PORT,uint8_t PIN_NUM)
{
	if(PORT->PIN_REG & PIN_NUM)  /* check if specific pin is set */
    2e7e:	fc 01       	movw	r30, r24
    2e80:	80 81       	ld	r24, Z
    2e82:	68 23       	and	r22, r24
    2e84:	11 f0       	breq	.+4      	; 0x2e8a <HAL_GPIO_READPIN+0xc>
	{
		return GPIO_PIN_SET ;
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	08 95       	ret
	}
	else              /* if read pin is zero */
	{
		return GPIO_PIN_RESET ;
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
	}
}/* END_FUN HAL_GPIO_READPIN()*/
    2e8c:	08 95       	ret

00002e8e <HAL_GPIO_WRITEPIN>:
 * param. : PIN_NUM the pin number must be one of GPIO_PIN_RESET or GPIO_PIN_SET
 * return : void  
 */
void HAL_GPIO_WRITEPIN(StrGPIO_t PORT,uint8_t PIN_NUM,GPIO_PinState PIN_STATE)
{
	if(PIN_STATE != GPIO_PIN_RESET)
    2e8e:	44 23       	and	r20, r20
    2e90:	29 f0       	breq	.+10     	; 0x2e9c <HAL_GPIO_WRITEPIN+0xe>
	{
		PORT->PORT_REG |= PIN_NUM ;
    2e92:	fc 01       	movw	r30, r24
    2e94:	22 81       	ldd	r18, Z+2	; 0x02
    2e96:	62 2b       	or	r22, r18
    2e98:	62 83       	std	Z+2, r22	; 0x02
    2e9a:	08 95       	ret
	}
	else
	{
		PORT->PORT_REG &= ~(PIN_NUM);
    2e9c:	60 95       	com	r22
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	22 81       	ldd	r18, Z+2	; 0x02
    2ea2:	62 23       	and	r22, r18
    2ea4:	62 83       	std	Z+2, r22	; 0x02
    2ea6:	08 95       	ret

00002ea8 <I2C_Init>:
		I2C_EN_NACK() ;
	
	
		return I2C_NORMAL ;
	
}/* END_FUN I2C_SLAVE_TRANSMIT() */
    2ea8:	8f 92       	push	r8
    2eaa:	9f 92       	push	r9
    2eac:	af 92       	push	r10
    2eae:	bf 92       	push	r11
    2eb0:	cf 92       	push	r12
    2eb2:	df 92       	push	r13
    2eb4:	ef 92       	push	r14
    2eb6:	ff 92       	push	r15
    2eb8:	0f 93       	push	r16
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	ec 01       	movw	r28, r24
    2ec0:	28 81       	ld	r18, Y
    2ec2:	39 81       	ldd	r19, Y+1	; 0x01
    2ec4:	4a 81       	ldd	r20, Y+2	; 0x02
    2ec6:	5b 81       	ldd	r21, Y+3	; 0x03
    2ec8:	60 e0       	ldi	r22, 0x00	; 0
    2eca:	74 e2       	ldi	r23, 0x24	; 36
    2ecc:	84 ef       	ldi	r24, 0xF4	; 244
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <__udivmodsi4>
    2ed4:	49 01       	movw	r8, r18
    2ed6:	5a 01       	movw	r10, r20
    2ed8:	39 2d       	mov	r19, r9
    2eda:	4a 2d       	mov	r20, r10
    2edc:	5b 2d       	mov	r21, r11
    2ede:	60 e0       	ldi	r22, 0x00	; 0
    2ee0:	70 e0       	ldi	r23, 0x00	; 0
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	a0 ef       	ldi	r26, 0xF0	; 240
    2ee8:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <__adddi3_s8>
    2eec:	01 e0       	ldi	r16, 0x01	; 1
    2eee:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__lshrdi3>
    2ef2:	20 b9       	out	0x00, r18	; 0
    2ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef6:	82 b9       	out	0x02, r24	; 2
    2ef8:	16 be       	out	0x36, r1	; 54
    2efa:	11 b8       	out	0x01, r1	; 1
    2efc:	8d 81       	ldd	r24, Y+5	; 0x05
    2efe:	81 30       	cpi	r24, 0x01	; 1
    2f00:	29 f4       	brne	.+10     	; 0x2f0c <I2C_Init+0x64>
    2f02:	78 94       	sei
    2f04:	86 b7       	in	r24, 0x36	; 54
    2f06:	81 60       	ori	r24, 0x01	; 1
    2f08:	86 bf       	out	0x36, r24	; 54
    2f0a:	03 c0       	rjmp	.+6      	; 0x2f12 <I2C_Init+0x6a>
    2f0c:	86 b7       	in	r24, 0x36	; 54
    2f0e:	8e 7f       	andi	r24, 0xFE	; 254
    2f10:	86 bf       	out	0x36, r24	; 54
    2f12:	df 91       	pop	r29
    2f14:	cf 91       	pop	r28
    2f16:	0f 91       	pop	r16
    2f18:	ff 90       	pop	r15
    2f1a:	ef 90       	pop	r14
    2f1c:	df 90       	pop	r13
    2f1e:	cf 90       	pop	r12
    2f20:	bf 90       	pop	r11
    2f22:	af 90       	pop	r10
    2f24:	9f 90       	pop	r9
    2f26:	8f 90       	pop	r8
    2f28:	08 95       	ret

00002f2a <HAL_I2C_Mem_Write>:
 * param.  : memAdd this is the internal memory address that you need to write data to 
 * param.  : pRxData this is pointer to the buffer that hold the writing data 
 * param.  : DataSize number of bytes that you need to write 
*/ 
I2C_STATUS HAL_I2C_Mem_Write(I2C_Handler_t * Handler ,uint8_t DevAdd,uint16_t MemAdd ,uint8_t MemAddSize ,uint8_t * pTxData ,uint8_t DataSize )
{
    2f2a:	ef 92       	push	r14
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	dc 01       	movw	r26, r24
	Handler->buffer = pTxData ;
    2f32:	17 96       	adiw	r26, 0x07	; 7
    2f34:	1c 93       	st	X, r17
    2f36:	0e 93       	st	-X, r16
    2f38:	16 97       	sbiw	r26, 0x06	; 6
	Handler->BufferSize   = DataSize;
    2f3a:	18 96       	adiw	r26, 0x08	; 8
    2f3c:	ec 92       	st	X, r14
    2f3e:	18 97       	sbiw	r26, 0x08	; 8
	
	I2C_EN_START();WAIT_FLAG();
    2f40:	84 ea       	ldi	r24, 0xA4	; 164
    2f42:	86 bf       	out	0x36, r24	; 54
    2f44:	06 b6       	in	r0, 0x36	; 54
    2f46:	07 fe       	sbrs	r0, 7
    2f48:	fd cf       	rjmp	.-6      	; 0x2f44 <HAL_I2C_Mem_Write+0x1a>
	I2C->I2C_TWDR = DevAdd ;
    2f4a:	63 b9       	out	0x03, r22	; 3
	I2C_EN();WAIT_FLAG();
    2f4c:	84 e8       	ldi	r24, 0x84	; 132
    2f4e:	86 bf       	out	0x36, r24	; 54
    2f50:	06 b6       	in	r0, 0x36	; 54
    2f52:	07 fe       	sbrs	r0, 7
    2f54:	fd cf       	rjmp	.-6      	; 0x2f50 <HAL_I2C_Mem_Write+0x26>

	if (MemAddSize == 2)
    2f56:	22 30       	cpi	r18, 0x02	; 2
    2f58:	31 f4       	brne	.+12     	; 0x2f66 <HAL_I2C_Mem_Write+0x3c>
	{
		I2C->I2C_TWDR =( MemAdd>>8 & 0xff );
    2f5a:	53 b9       	out	0x03, r21	; 3
		I2C_EN();WAIT_FLAG();
    2f5c:	84 e8       	ldi	r24, 0x84	; 132
    2f5e:	86 bf       	out	0x36, r24	; 54
    2f60:	06 b6       	in	r0, 0x36	; 54
    2f62:	07 fe       	sbrs	r0, 7
    2f64:	fd cf       	rjmp	.-6      	; 0x2f60 <HAL_I2C_Mem_Write+0x36>
	}
	I2C->I2C_TWDR =( MemAdd & 0xff );
    2f66:	43 b9       	out	0x03, r20	; 3
	I2C_EN();WAIT_FLAG();
    2f68:	84 e8       	ldi	r24, 0x84	; 132
    2f6a:	86 bf       	out	0x36, r24	; 54
    2f6c:	06 b6       	in	r0, 0x36	; 54
    2f6e:	07 fe       	sbrs	r0, 7
    2f70:	fd cf       	rjmp	.-6      	; 0x2f6c <HAL_I2C_Mem_Write+0x42>
    2f72:	13 c0       	rjmp	.+38     	; 0x2f9a <HAL_I2C_Mem_Write+0x70>

	while(DataSize-- > 0)
	{
		I2C->I2C_TWDR = *(Handler->buffer++) ;
    2f74:	16 96       	adiw	r26, 0x06	; 6
    2f76:	ed 91       	ld	r30, X+
    2f78:	fc 91       	ld	r31, X
    2f7a:	17 97       	sbiw	r26, 0x07	; 7
    2f7c:	9f 01       	movw	r18, r30
    2f7e:	2f 5f       	subi	r18, 0xFF	; 255
    2f80:	3f 4f       	sbci	r19, 0xFF	; 255
    2f82:	17 96       	adiw	r26, 0x07	; 7
    2f84:	3c 93       	st	X, r19
    2f86:	2e 93       	st	-X, r18
    2f88:	16 97       	sbiw	r26, 0x06	; 6
    2f8a:	90 81       	ld	r25, Z
    2f8c:	93 b9       	out	0x03, r25	; 3
		I2C_EN();WAIT_FLAG();
    2f8e:	94 e8       	ldi	r25, 0x84	; 132
    2f90:	96 bf       	out	0x36, r25	; 54
    2f92:	06 b6       	in	r0, 0x36	; 54
    2f94:	07 fe       	sbrs	r0, 7
    2f96:	fd cf       	rjmp	.-6      	; 0x2f92 <HAL_I2C_Mem_Write+0x68>
		I2C_EN();WAIT_FLAG();
	}
	I2C->I2C_TWDR =( MemAdd & 0xff );
	I2C_EN();WAIT_FLAG();

	while(DataSize-- > 0)
    2f98:	e8 2e       	mov	r14, r24
    2f9a:	8f ef       	ldi	r24, 0xFF	; 255
    2f9c:	8e 0d       	add	r24, r14
    2f9e:	e1 10       	cpse	r14, r1
    2fa0:	e9 cf       	rjmp	.-46     	; 0x2f74 <HAL_I2C_Mem_Write+0x4a>
	{
		I2C->I2C_TWDR = *(Handler->buffer++) ;
		I2C_EN();WAIT_FLAG();

	}
	I2C_EN_STOP();
    2fa2:	84 e9       	ldi	r24, 0x94	; 148
    2fa4:	86 bf       	out	0x36, r24	; 54

	return I2C_NORMAL ;
	
}/* END_FUN I2C_MEM_WRITE() */
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	1f 91       	pop	r17
    2faa:	0f 91       	pop	r16
    2fac:	ef 90       	pop	r14
    2fae:	08 95       	ret

00002fb0 <HAL_I2C_Mem_Read>:
 * param.  : memAdd this is the internal memory address that you need to read data from it 
 * param.  : pRxData this is pointer to the buffer that will hold the reading data 
 * param.  : DataSize number of bytes that you need to read 
*/ 
I2C_STATUS HAL_I2C_Mem_Read(I2C_Handler_t * Handler ,uint8_t DevAdd,uint16_t MemAdd ,uint8_t MemAddSize ,uint8_t * pRxData ,uint8_t DataSize )
{
    2fb0:	ef 92       	push	r14
    2fb2:	0f 93       	push	r16
    2fb4:	1f 93       	push	r17
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	9e 2d       	mov	r25, r14
	Handler->buffer = pRxData ;
    2fba:	17 96       	adiw	r26, 0x07	; 7
    2fbc:	1c 93       	st	X, r17
    2fbe:	0e 93       	st	-X, r16
    2fc0:	16 97       	sbiw	r26, 0x06	; 6
	Handler->BufferSize = DataSize;
    2fc2:	18 96       	adiw	r26, 0x08	; 8
    2fc4:	ec 92       	st	X, r14
    2fc6:	18 97       	sbiw	r26, 0x08	; 8
	
	I2C_EN_START();WAIT_FLAG();
    2fc8:	84 ea       	ldi	r24, 0xA4	; 164
    2fca:	86 bf       	out	0x36, r24	; 54
    2fcc:	06 b6       	in	r0, 0x36	; 54
    2fce:	07 fe       	sbrs	r0, 7
    2fd0:	fd cf       	rjmp	.-6      	; 0x2fcc <HAL_I2C_Mem_Read+0x1c>
	I2C->I2C_TWDR = DevAdd ;
    2fd2:	63 b9       	out	0x03, r22	; 3
	I2C_EN();WAIT_FLAG();
    2fd4:	84 e8       	ldi	r24, 0x84	; 132
    2fd6:	86 bf       	out	0x36, r24	; 54
    2fd8:	06 b6       	in	r0, 0x36	; 54
    2fda:	07 fe       	sbrs	r0, 7
    2fdc:	fd cf       	rjmp	.-6      	; 0x2fd8 <HAL_I2C_Mem_Read+0x28>
	if (MemAddSize == 2)
    2fde:	22 30       	cpi	r18, 0x02	; 2
    2fe0:	31 f4       	brne	.+12     	; 0x2fee <HAL_I2C_Mem_Read+0x3e>
	{
		I2C->I2C_TWDR =( MemAdd>>8 & 0xff );
    2fe2:	53 b9       	out	0x03, r21	; 3
		I2C_EN();WAIT_FLAG();
    2fe4:	84 e8       	ldi	r24, 0x84	; 132
    2fe6:	86 bf       	out	0x36, r24	; 54
    2fe8:	06 b6       	in	r0, 0x36	; 54
    2fea:	07 fe       	sbrs	r0, 7
    2fec:	fd cf       	rjmp	.-6      	; 0x2fe8 <HAL_I2C_Mem_Read+0x38>
	}
	I2C->I2C_TWDR =( MemAdd & 0xff );
    2fee:	43 b9       	out	0x03, r20	; 3
	I2C_EN();WAIT_FLAG();
    2ff0:	84 e8       	ldi	r24, 0x84	; 132
    2ff2:	86 bf       	out	0x36, r24	; 54
    2ff4:	06 b6       	in	r0, 0x36	; 54
    2ff6:	07 fe       	sbrs	r0, 7
    2ff8:	fd cf       	rjmp	.-6      	; 0x2ff4 <HAL_I2C_Mem_Read+0x44>
	I2C_EN_START();WAIT_FLAG();
    2ffa:	84 ea       	ldi	r24, 0xA4	; 164
    2ffc:	86 bf       	out	0x36, r24	; 54
    2ffe:	06 b6       	in	r0, 0x36	; 54
    3000:	07 fe       	sbrs	r0, 7
    3002:	fd cf       	rjmp	.-6      	; 0x2ffe <HAL_I2C_Mem_Read+0x4e>
	I2C->I2C_TWDR = DevAdd | 1 ;
    3004:	61 60       	ori	r22, 0x01	; 1
    3006:	63 b9       	out	0x03, r22	; 3
	I2C_EN();WAIT_FLAG();
    3008:	84 e8       	ldi	r24, 0x84	; 132
    300a:	86 bf       	out	0x36, r24	; 54
    300c:	06 b6       	in	r0, 0x36	; 54
    300e:	07 fe       	sbrs	r0, 7
    3010:	fd cf       	rjmp	.-6      	; 0x300c <HAL_I2C_Mem_Read+0x5c>
    3012:	13 c0       	rjmp	.+38     	; 0x303a <HAL_I2C_Mem_Read+0x8a>
	while(DataSize-- > 1)	
	{
		I2C_EN_ACK();WAIT_FLAG();
    3014:	94 ec       	ldi	r25, 0xC4	; 196
    3016:	96 bf       	out	0x36, r25	; 54
    3018:	06 b6       	in	r0, 0x36	; 54
    301a:	07 fe       	sbrs	r0, 7
    301c:	fd cf       	rjmp	.-6      	; 0x3018 <HAL_I2C_Mem_Read+0x68>
		*(Handler->buffer++) = I2C->I2C_TWDR ;
    301e:	16 96       	adiw	r26, 0x06	; 6
    3020:	ed 91       	ld	r30, X+
    3022:	fc 91       	ld	r31, X
    3024:	17 97       	sbiw	r26, 0x07	; 7
    3026:	9f 01       	movw	r18, r30
    3028:	2f 5f       	subi	r18, 0xFF	; 255
    302a:	3f 4f       	sbci	r19, 0xFF	; 255
    302c:	17 96       	adiw	r26, 0x07	; 7
    302e:	3c 93       	st	X, r19
    3030:	2e 93       	st	-X, r18
    3032:	16 97       	sbiw	r26, 0x06	; 6
    3034:	93 b1       	in	r25, 0x03	; 3
    3036:	90 83       	st	Z, r25
	I2C->I2C_TWDR =( MemAdd & 0xff );
	I2C_EN();WAIT_FLAG();
	I2C_EN_START();WAIT_FLAG();
	I2C->I2C_TWDR = DevAdd | 1 ;
	I2C_EN();WAIT_FLAG();
	while(DataSize-- > 1)	
    3038:	98 2f       	mov	r25, r24
    303a:	8f ef       	ldi	r24, 0xFF	; 255
    303c:	89 0f       	add	r24, r25
    303e:	92 30       	cpi	r25, 0x02	; 2
    3040:	48 f7       	brcc	.-46     	; 0x3014 <HAL_I2C_Mem_Read+0x64>
		*(Handler->buffer++) = I2C->I2C_TWDR ;
	}
	
	
	/* Last Byte Will received with NACK */
	I2C_EN();WAIT_FLAG();
    3042:	84 e8       	ldi	r24, 0x84	; 132
    3044:	86 bf       	out	0x36, r24	; 54
    3046:	06 b6       	in	r0, 0x36	; 54
    3048:	07 fe       	sbrs	r0, 7
    304a:	fd cf       	rjmp	.-6      	; 0x3046 <HAL_I2C_Mem_Read+0x96>
	*(Handler->buffer++) = I2C->I2C_TWDR ;
    304c:	16 96       	adiw	r26, 0x06	; 6
    304e:	ed 91       	ld	r30, X+
    3050:	fc 91       	ld	r31, X
    3052:	17 97       	sbiw	r26, 0x07	; 7
    3054:	cf 01       	movw	r24, r30
    3056:	01 96       	adiw	r24, 0x01	; 1
    3058:	17 96       	adiw	r26, 0x07	; 7
    305a:	9c 93       	st	X, r25
    305c:	8e 93       	st	-X, r24
    305e:	16 97       	sbiw	r26, 0x06	; 6
    3060:	83 b1       	in	r24, 0x03	; 3
    3062:	80 83       	st	Z, r24

	
	/* Send Stop Bit allow another Master to acquire the bus */
	I2C_EN_STOP();
    3064:	84 e9       	ldi	r24, 0x94	; 148
    3066:	86 bf       	out	0x36, r24	; 54
	
	
	return I2C_NORMAL ;
} /* END_FUN I2C_MEM_READ() */
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	1f 91       	pop	r17
    306c:	0f 91       	pop	r16
    306e:	ef 90       	pop	r14
    3070:	08 95       	ret

00003072 <HAL_SPI_Init>:
		++(Handler->TxBuffer);
	}
	HAL_GPIO_WRITEPIN(GPIOB,SPI_PIN_SS,GPIO_PIN_SET);
	 
	
}/* END_FUN HAL_SPI_Transmit()*/
    3072:	0f 93       	push	r16
    3074:	1f 93       	push	r17
    3076:	cf 93       	push	r28
    3078:	df 93       	push	r29
    307a:	00 d0       	rcall	.+0      	; 0x307c <HAL_SPI_Init+0xa>
    307c:	1f 92       	push	r1
    307e:	cd b7       	in	r28, 0x3d	; 61
    3080:	de b7       	in	r29, 0x3e	; 62
    3082:	8c 01       	movw	r16, r24
    3084:	fc 01       	movw	r30, r24
    3086:	83 81       	ldd	r24, Z+3	; 0x03
    3088:	88 23       	and	r24, r24
    308a:	44 f4       	brge	.+16     	; 0x309c <HAL_SPI_Init+0x2a>
    308c:	9d b1       	in	r25, 0x0d	; 13
    308e:	83 70       	andi	r24, 0x03	; 3
    3090:	89 2b       	or	r24, r25
    3092:	8d b9       	out	0x0d, r24	; 13
    3094:	8e b1       	in	r24, 0x0e	; 14
    3096:	81 60       	ori	r24, 0x01	; 1
    3098:	8e b9       	out	0x0e, r24	; 14
    309a:	04 c0       	rjmp	.+8      	; 0x30a4 <HAL_SPI_Init+0x32>
    309c:	9d b1       	in	r25, 0x0d	; 13
    309e:	83 70       	andi	r24, 0x03	; 3
    30a0:	89 2b       	or	r24, r25
    30a2:	8d b9       	out	0x0d, r24	; 13
    30a4:	f8 01       	movw	r30, r16
    30a6:	80 81       	ld	r24, Z
    30a8:	84 ff       	sbrs	r24, 4
    30aa:	16 c0       	rjmp	.+44     	; 0x30d8 <HAL_SPI_Init+0x66>
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	8a 83       	std	Y+2, r24	; 0x02
    30b0:	80 eb       	ldi	r24, 0xB0	; 176
    30b2:	89 83       	std	Y+1, r24	; 0x01
    30b4:	be 01       	movw	r22, r28
    30b6:	6f 5f       	subi	r22, 0xFF	; 255
    30b8:	7f 4f       	sbci	r23, 0xFF	; 255
    30ba:	86 e3       	ldi	r24, 0x36	; 54
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <HAL_GPIO_Pin_Init>
    30c2:	1a 82       	std	Y+2, r1	; 0x02
    30c4:	80 e4       	ldi	r24, 0x40	; 64
    30c6:	89 83       	std	Y+1, r24	; 0x01
    30c8:	be 01       	movw	r22, r28
    30ca:	6f 5f       	subi	r22, 0xFF	; 255
    30cc:	7f 4f       	sbci	r23, 0xFF	; 255
    30ce:	86 e3       	ldi	r24, 0x36	; 54
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <HAL_GPIO_Pin_Init>
    30d6:	15 c0       	rjmp	.+42     	; 0x3102 <HAL_SPI_Init+0x90>
    30d8:	1a 82       	std	Y+2, r1	; 0x02
    30da:	80 eb       	ldi	r24, 0xB0	; 176
    30dc:	89 83       	std	Y+1, r24	; 0x01
    30de:	be 01       	movw	r22, r28
    30e0:	6f 5f       	subi	r22, 0xFF	; 255
    30e2:	7f 4f       	sbci	r23, 0xFF	; 255
    30e4:	86 e3       	ldi	r24, 0x36	; 54
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <HAL_GPIO_Pin_Init>
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	8a 83       	std	Y+2, r24	; 0x02
    30f0:	80 e4       	ldi	r24, 0x40	; 64
    30f2:	89 83       	std	Y+1, r24	; 0x01
    30f4:	be 01       	movw	r22, r28
    30f6:	6f 5f       	subi	r22, 0xFF	; 255
    30f8:	7f 4f       	sbci	r23, 0xFF	; 255
    30fa:	86 e3       	ldi	r24, 0x36	; 54
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <HAL_GPIO_Pin_Init>
    3102:	f8 01       	movw	r30, r16
    3104:	42 81       	ldd	r20, Z+2	; 0x02
    3106:	81 81       	ldd	r24, Z+1	; 0x01
    3108:	34 81       	ldd	r19, Z+4	; 0x04
    310a:	25 81       	ldd	r18, Z+5	; 0x05
    310c:	90 81       	ld	r25, Z
    310e:	84 2b       	or	r24, r20
    3110:	83 2b       	or	r24, r19
    3112:	82 2b       	or	r24, r18
    3114:	89 2b       	or	r24, r25
    3116:	8d b9       	out	0x0d, r24	; 13
    3118:	8d b1       	in	r24, 0x0d	; 13
    311a:	80 64       	ori	r24, 0x40	; 64
    311c:	8d b9       	out	0x0d, r24	; 13
    311e:	85 81       	ldd	r24, Z+5	; 0x05
    3120:	80 38       	cpi	r24, 0x80	; 128
    3122:	09 f4       	brne	.+2      	; 0x3126 <HAL_SPI_Init+0xb4>
    3124:	78 94       	sei
    3126:	0f 90       	pop	r0
    3128:	0f 90       	pop	r0
    312a:	0f 90       	pop	r0
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	1f 91       	pop	r17
    3132:	0f 91       	pop	r16
    3134:	08 95       	ret

00003136 <HAL_SPI_Recieve>:
 * param. :Handler --> this handler of SPI peripheral 
 * param. :pRxData --> pointer to the rx buffer  
 * param. :size    -->the required number of bytes to received 
*/
 void HAL_SPI_Recieve(SPI_Handler_t * Handler,uint8_t * pRxData,uint16_t size )
{
    3136:	fc 01       	movw	r30, r24
	Handler->RxBuffer = pRxData ;
    3138:	71 87       	std	Z+9, r23	; 0x09
    313a:	60 87       	std	Z+8, r22	; 0x08
	Handler->TxBuffer = NULL  ;
    313c:	17 82       	std	Z+7, r1	; 0x07
    313e:	16 82       	std	Z+6, r1	; 0x06
	Handler->RxBufferSize = size ;
    3140:	55 87       	std	Z+13, r21	; 0x0d
    3142:	44 87       	std	Z+12, r20	; 0x0c
	Handler->TxBufferSize = 0;
    3144:	13 86       	std	Z+11, r1	; 0x0b
    3146:	12 86       	std	Z+10, r1	; 0x0a

	while(Handler->RxBufferSize >0)  /* block until end */
    3148:	10 c0       	rjmp	.+32     	; 0x316a <HAL_SPI_Recieve+0x34>
	{ 
		while(!(SPI_PREPH->SPI_SPSR & SPI_SPSR_SPIF));  /* wait till the SPI send byte and set SPIIF bit */
    314a:	77 9b       	sbis	0x0e, 7	; 14
    314c:	fe cf       	rjmp	.-4      	; 0x314a <HAL_SPI_Recieve+0x14>
		 *(Handler->RxBuffer) = SPI_PREPH->SPI_SPDR ;
    314e:	a0 85       	ldd	r26, Z+8	; 0x08
    3150:	b1 85       	ldd	r27, Z+9	; 0x09
    3152:	8f b1       	in	r24, 0x0f	; 15
    3154:	8c 93       	st	X, r24
		++(Handler->RxBuffer);
    3156:	80 85       	ldd	r24, Z+8	; 0x08
    3158:	91 85       	ldd	r25, Z+9	; 0x09
    315a:	01 96       	adiw	r24, 0x01	; 1
    315c:	91 87       	std	Z+9, r25	; 0x09
    315e:	80 87       	std	Z+8, r24	; 0x08
		--(Handler->RxBufferSize);
    3160:	84 85       	ldd	r24, Z+12	; 0x0c
    3162:	95 85       	ldd	r25, Z+13	; 0x0d
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	95 87       	std	Z+13, r25	; 0x0d
    3168:	84 87       	std	Z+12, r24	; 0x0c
	Handler->RxBuffer = pRxData ;
	Handler->TxBuffer = NULL  ;
	Handler->RxBufferSize = size ;
	Handler->TxBufferSize = 0;

	while(Handler->RxBufferSize >0)  /* block until end */
    316a:	84 85       	ldd	r24, Z+12	; 0x0c
    316c:	95 85       	ldd	r25, Z+13	; 0x0d
    316e:	89 2b       	or	r24, r25
    3170:	61 f7       	brne	.-40     	; 0x314a <HAL_SPI_Recieve+0x14>
		--(Handler->RxBufferSize);
	}
	 

	
}/* END_FUN HAL_SPI_Recieve()*/
    3172:	08 95       	ret

00003174 <TIM_NormalModeInit>:
	
	SET_REGISTER_VAL(TCCR1B , TIM16Bit_InputCapture_CAPTURE_EDGE_MASK , Edge ) ;
	
	return TIM_OK ;
	
}
    3174:	00 97       	sbiw	r24, 0x00	; 0
    3176:	89 f0       	breq	.+34     	; 0x319a <TIM_NormalModeInit+0x26>
    3178:	fc 01       	movw	r30, r24
    317a:	80 85       	ldd	r24, Z+8	; 0x08
    317c:	81 11       	cpse	r24, r1
    317e:	02 c0       	rjmp	.+4      	; 0x3184 <TIM_NormalModeInit+0x10>
    3180:	13 be       	out	0x33, r1	; 51
    3182:	08 95       	ret
    3184:	82 30       	cpi	r24, 0x02	; 2
    3186:	19 f4       	brne	.+6      	; 0x318e <TIM_NormalModeInit+0x1a>
    3188:	15 bc       	out	0x25, r1	; 37
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	08 95       	ret
    318e:	81 30       	cpi	r24, 0x01	; 1
    3190:	31 f4       	brne	.+12     	; 0x319e <TIM_NormalModeInit+0x2a>
    3192:	1f bc       	out	0x2f, r1	; 47
    3194:	1e bc       	out	0x2e, r1	; 46
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	08 95       	ret
    319a:	81 e0       	ldi	r24, 0x01	; 1
    319c:	08 95       	ret
    319e:	82 e0       	ldi	r24, 0x02	; 2
    31a0:	08 95       	ret

000031a2 <TIM_PWMMode_SetDuty>:
    31a2:	cf 92       	push	r12
    31a4:	df 92       	push	r13
    31a6:	ef 92       	push	r14
    31a8:	ff 92       	push	r15
    31aa:	0f 93       	push	r16
    31ac:	1f 93       	push	r17
    31ae:	cf 93       	push	r28
    31b0:	df 93       	push	r29
    31b2:	8c 01       	movw	r16, r24
    31b4:	c6 2f       	mov	r28, r22
    31b6:	00 97       	sbiw	r24, 0x00	; 0
    31b8:	09 f4       	brne	.+2      	; 0x31bc <TIM_PWMMode_SetDuty+0x1a>
    31ba:	8b c0       	rjmp	.+278    	; 0x32d2 <TIM_PWMMode_SetDuty+0x130>
    31bc:	fc 01       	movw	r30, r24
    31be:	80 85       	ldd	r24, Z+8	; 0x08
    31c0:	81 11       	cpse	r24, r1
    31c2:	08 c0       	rjmp	.+16     	; 0x31d4 <TIM_PWMMode_SetDuty+0x32>
    31c4:	96 2f       	mov	r25, r22
    31c6:	64 e6       	ldi	r22, 0x64	; 100
    31c8:	70 e0       	ldi	r23, 0x00	; 0
    31ca:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <__divmodhi4>
    31ce:	6c bf       	out	0x3c, r22	; 60
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	82 c0       	rjmp	.+260    	; 0x32d8 <TIM_PWMMode_SetDuty+0x136>
    31d4:	82 30       	cpi	r24, 0x02	; 2
    31d6:	49 f4       	brne	.+18     	; 0x31ea <TIM_PWMMode_SetDuty+0x48>
    31d8:	96 2f       	mov	r25, r22
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	64 e6       	ldi	r22, 0x64	; 100
    31de:	70 e0       	ldi	r23, 0x00	; 0
    31e0:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <__divmodhi4>
    31e4:	63 bd       	out	0x23, r22	; 35
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	77 c0       	rjmp	.+238    	; 0x32d8 <TIM_PWMMode_SetDuty+0x136>
    31ea:	81 30       	cpi	r24, 0x01	; 1
    31ec:	09 f0       	breq	.+2      	; 0x31f0 <TIM_PWMMode_SetDuty+0x4e>
    31ee:	73 c0       	rjmp	.+230    	; 0x32d6 <TIM_PWMMode_SetDuty+0x134>
    31f0:	8f ef       	ldi	r24, 0xFF	; 255
    31f2:	9f e0       	ldi	r25, 0x0F	; 15
    31f4:	97 bd       	out	0x27, r25	; 39
    31f6:	86 bd       	out	0x26, r24	; 38
    31f8:	f8 01       	movw	r30, r16
    31fa:	86 81       	ldd	r24, Z+6	; 0x06
    31fc:	8f 3f       	cpi	r24, 0xFF	; 255
    31fe:	b9 f5       	brne	.+110    	; 0x326e <TIM_PWMMode_SetDuty+0xcc>
    3200:	80 81       	ld	r24, Z
    3202:	91 81       	ldd	r25, Z+1	; 0x01
    3204:	a2 81       	ldd	r26, Z+2	; 0x02
    3206:	b3 81       	ldd	r27, Z+3	; 0x03
    3208:	bc 01       	movw	r22, r24
    320a:	cd 01       	movw	r24, r26
    320c:	7f 70       	andi	r23, 0x0F	; 15
    320e:	88 27       	eor	r24, r24
    3210:	99 27       	eor	r25, r25
    3212:	0f 2e       	mov	r0, r31
    3214:	f4 e6       	ldi	r31, 0x64	; 100
    3216:	cf 2e       	mov	r12, r31
    3218:	d1 2c       	mov	r13, r1
    321a:	e1 2c       	mov	r14, r1
    321c:	f1 2c       	mov	r15, r1
    321e:	f0 2d       	mov	r31, r0
    3220:	a7 01       	movw	r20, r14
    3222:	96 01       	movw	r18, r12
    3224:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <__udivmodsi4>
    3228:	d0 e0       	ldi	r29, 0x00	; 0
    322a:	c2 9f       	mul	r28, r18
    322c:	c0 01       	movw	r24, r0
    322e:	c3 9f       	mul	r28, r19
    3230:	90 0d       	add	r25, r0
    3232:	d2 9f       	mul	r29, r18
    3234:	90 0d       	add	r25, r0
    3236:	11 24       	eor	r1, r1
    3238:	9b bd       	out	0x2b, r25	; 43
    323a:	8a bd       	out	0x2a, r24	; 42
    323c:	f8 01       	movw	r30, r16
    323e:	80 81       	ld	r24, Z
    3240:	91 81       	ldd	r25, Z+1	; 0x01
    3242:	a2 81       	ldd	r26, Z+2	; 0x02
    3244:	b3 81       	ldd	r27, Z+3	; 0x03
    3246:	bc 01       	movw	r22, r24
    3248:	cd 01       	movw	r24, r26
    324a:	7f 70       	andi	r23, 0x0F	; 15
    324c:	88 27       	eor	r24, r24
    324e:	99 27       	eor	r25, r25
    3250:	a7 01       	movw	r20, r14
    3252:	96 01       	movw	r18, r12
    3254:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <__udivmodsi4>
    3258:	c2 9f       	mul	r28, r18
    325a:	c0 01       	movw	r24, r0
    325c:	c3 9f       	mul	r28, r19
    325e:	90 0d       	add	r25, r0
    3260:	d2 9f       	mul	r29, r18
    3262:	90 0d       	add	r25, r0
    3264:	11 24       	eor	r1, r1
    3266:	99 bd       	out	0x29, r25	; 41
    3268:	88 bd       	out	0x28, r24	; 40
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	35 c0       	rjmp	.+106    	; 0x32d8 <TIM_PWMMode_SetDuty+0x136>
    326e:	84 30       	cpi	r24, 0x04	; 4
    3270:	c1 f4       	brne	.+48     	; 0x32a2 <TIM_PWMMode_SetDuty+0x100>
    3272:	f8 01       	movw	r30, r16
    3274:	80 81       	ld	r24, Z
    3276:	91 81       	ldd	r25, Z+1	; 0x01
    3278:	a2 81       	ldd	r26, Z+2	; 0x02
    327a:	b3 81       	ldd	r27, Z+3	; 0x03
    327c:	9c 01       	movw	r18, r24
    327e:	ad 01       	movw	r20, r26
    3280:	3f 70       	andi	r19, 0x0F	; 15
    3282:	44 27       	eor	r20, r20
    3284:	55 27       	eor	r21, r21
    3286:	a6 2f       	mov	r26, r22
    3288:	b0 e0       	ldi	r27, 0x00	; 0
    328a:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <__muluhisi3>
    328e:	24 e6       	ldi	r18, 0x64	; 100
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	40 e0       	ldi	r20, 0x00	; 0
    3294:	50 e0       	ldi	r21, 0x00	; 0
    3296:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <__udivmodsi4>
    329a:	39 bd       	out	0x29, r19	; 41
    329c:	28 bd       	out	0x28, r18	; 40
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	1b c0       	rjmp	.+54     	; 0x32d8 <TIM_PWMMode_SetDuty+0x136>
    32a2:	f8 01       	movw	r30, r16
    32a4:	80 81       	ld	r24, Z
    32a6:	91 81       	ldd	r25, Z+1	; 0x01
    32a8:	a2 81       	ldd	r26, Z+2	; 0x02
    32aa:	b3 81       	ldd	r27, Z+3	; 0x03
    32ac:	9c 01       	movw	r18, r24
    32ae:	ad 01       	movw	r20, r26
    32b0:	3f 70       	andi	r19, 0x0F	; 15
    32b2:	44 27       	eor	r20, r20
    32b4:	55 27       	eor	r21, r21
    32b6:	a6 2f       	mov	r26, r22
    32b8:	b0 e0       	ldi	r27, 0x00	; 0
    32ba:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <__muluhisi3>
    32be:	24 e6       	ldi	r18, 0x64	; 100
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	40 e0       	ldi	r20, 0x00	; 0
    32c4:	50 e0       	ldi	r21, 0x00	; 0
    32c6:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <__udivmodsi4>
    32ca:	3b bd       	out	0x2b, r19	; 43
    32cc:	2a bd       	out	0x2a, r18	; 42
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	03 c0       	rjmp	.+6      	; 0x32d8 <TIM_PWMMode_SetDuty+0x136>
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	01 c0       	rjmp	.+2      	; 0x32d8 <TIM_PWMMode_SetDuty+0x136>
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	df 91       	pop	r29
    32da:	cf 91       	pop	r28
    32dc:	1f 91       	pop	r17
    32de:	0f 91       	pop	r16
    32e0:	ff 90       	pop	r15
    32e2:	ef 90       	pop	r14
    32e4:	df 90       	pop	r13
    32e6:	cf 90       	pop	r12
    32e8:	08 95       	ret

000032ea <TIM_Start>:
    32ea:	00 97       	sbiw	r24, 0x00	; 0
    32ec:	29 f1       	breq	.+74     	; 0x3338 <TIM_Start+0x4e>
    32ee:	fc 01       	movw	r30, r24
    32f0:	20 85       	ldd	r18, Z+8	; 0x08
    32f2:	21 11       	cpse	r18, r1
    32f4:	09 c0       	rjmp	.+18     	; 0x3308 <TIM_Start+0x1e>
    32f6:	23 b7       	in	r18, 0x33	; 51
    32f8:	28 7f       	andi	r18, 0xF8	; 248
    32fa:	23 bf       	out	0x33, r18	; 51
    32fc:	23 b7       	in	r18, 0x33	; 51
    32fe:	87 81       	ldd	r24, Z+7	; 0x07
    3300:	82 2b       	or	r24, r18
    3302:	83 bf       	out	0x33, r24	; 51
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	08 95       	ret
    3308:	22 30       	cpi	r18, 0x02	; 2
    330a:	51 f4       	brne	.+20     	; 0x3320 <TIM_Start+0x36>
    330c:	25 b5       	in	r18, 0x25	; 37
    330e:	28 7f       	andi	r18, 0xF8	; 248
    3310:	25 bd       	out	0x25, r18	; 37
    3312:	25 b5       	in	r18, 0x25	; 37
    3314:	fc 01       	movw	r30, r24
    3316:	87 81       	ldd	r24, Z+7	; 0x07
    3318:	82 2b       	or	r24, r18
    331a:	85 bd       	out	0x25, r24	; 37
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	08 95       	ret
    3320:	21 30       	cpi	r18, 0x01	; 1
    3322:	61 f4       	brne	.+24     	; 0x333c <TIM_Start+0x52>
    3324:	2e b5       	in	r18, 0x2e	; 46
    3326:	28 7f       	andi	r18, 0xF8	; 248
    3328:	2e bd       	out	0x2e, r18	; 46
    332a:	2e b5       	in	r18, 0x2e	; 46
    332c:	fc 01       	movw	r30, r24
    332e:	87 81       	ldd	r24, Z+7	; 0x07
    3330:	82 2b       	or	r24, r18
    3332:	8e bd       	out	0x2e, r24	; 46
    3334:	80 e0       	ldi	r24, 0x00	; 0
    3336:	08 95       	ret
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	08 95       	ret
    333c:	82 e0       	ldi	r24, 0x02	; 2
    333e:	08 95       	ret

00003340 <TIM_Stop>:
    3340:	81 11       	cpse	r24, r1
    3342:	07 c0       	rjmp	.+14     	; 0x3352 <TIM_Stop+0x12>
    3344:	83 b7       	in	r24, 0x33	; 51
    3346:	88 7f       	andi	r24, 0xF8	; 248
    3348:	83 bf       	out	0x33, r24	; 51
    334a:	83 b7       	in	r24, 0x33	; 51
    334c:	83 bf       	out	0x33, r24	; 51
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	08 95       	ret
    3352:	82 30       	cpi	r24, 0x02	; 2
    3354:	39 f4       	brne	.+14     	; 0x3364 <TIM_Stop+0x24>
    3356:	85 b5       	in	r24, 0x25	; 37
    3358:	88 7f       	andi	r24, 0xF8	; 248
    335a:	85 bd       	out	0x25, r24	; 37
    335c:	85 b5       	in	r24, 0x25	; 37
    335e:	85 bd       	out	0x25, r24	; 37
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	08 95       	ret
    3364:	81 30       	cpi	r24, 0x01	; 1
    3366:	39 f4       	brne	.+14     	; 0x3376 <TIM_Stop+0x36>
    3368:	8e b5       	in	r24, 0x2e	; 46
    336a:	88 7f       	andi	r24, 0xF8	; 248
    336c:	8e bd       	out	0x2e, r24	; 46
    336e:	8e b5       	in	r24, 0x2e	; 46
    3370:	8e bd       	out	0x2e, r24	; 46
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	08 95       	ret
    3376:	82 e0       	ldi	r24, 0x02	; 2
    3378:	08 95       	ret

0000337a <TIM_PWMModeInit>:
    337a:	fc 01       	movw	r30, r24
    337c:	89 2b       	or	r24, r25
    337e:	09 f4       	brne	.+2      	; 0x3382 <TIM_PWMModeInit+0x8>
    3380:	98 c0       	rjmp	.+304    	; 0x34b2 <TIM_PWMModeInit+0x138>
    3382:	80 85       	ldd	r24, Z+8	; 0x08
    3384:	81 30       	cpi	r24, 0x01	; 1
    3386:	09 f0       	breq	.+2      	; 0x338a <TIM_PWMModeInit+0x10>
    3388:	6d c0       	rjmp	.+218    	; 0x3464 <TIM_PWMModeInit+0xea>
    338a:	80 81       	ld	r24, Z
    338c:	91 81       	ldd	r25, Z+1	; 0x01
    338e:	a2 81       	ldd	r26, Z+2	; 0x02
    3390:	b3 81       	ldd	r27, Z+3	; 0x03
    3392:	94 ff       	sbrs	r25, 4
    3394:	33 c0       	rjmp	.+102    	; 0x33fc <TIM_PWMModeInit+0x82>
    3396:	aa 27       	eor	r26, r26
    3398:	bb 27       	eor	r27, r27
    339a:	8f 3f       	cpi	r24, 0xFF	; 255
    339c:	20 e1       	ldi	r18, 0x10	; 16
    339e:	92 07       	cpc	r25, r18
    33a0:	a1 05       	cpc	r26, r1
    33a2:	b1 05       	cpc	r27, r1
    33a4:	29 f4       	brne	.+10     	; 0x33b0 <TIM_PWMModeInit+0x36>
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	8f bd       	out	0x2f, r24	; 47
    33aa:	88 e0       	ldi	r24, 0x08	; 8
    33ac:	8e bd       	out	0x2e, r24	; 46
    33ae:	1f c0       	rjmp	.+62     	; 0x33ee <TIM_PWMModeInit+0x74>
    33b0:	8f 3f       	cpi	r24, 0xFF	; 255
    33b2:	21 e1       	ldi	r18, 0x11	; 17
    33b4:	92 07       	cpc	r25, r18
    33b6:	a1 05       	cpc	r26, r1
    33b8:	b1 05       	cpc	r27, r1
    33ba:	29 f4       	brne	.+10     	; 0x33c6 <TIM_PWMModeInit+0x4c>
    33bc:	82 e0       	ldi	r24, 0x02	; 2
    33be:	8f bd       	out	0x2f, r24	; 47
    33c0:	88 e0       	ldi	r24, 0x08	; 8
    33c2:	8e bd       	out	0x2e, r24	; 46
    33c4:	14 c0       	rjmp	.+40     	; 0x33ee <TIM_PWMModeInit+0x74>
    33c6:	8f 3f       	cpi	r24, 0xFF	; 255
    33c8:	23 e1       	ldi	r18, 0x13	; 19
    33ca:	92 07       	cpc	r25, r18
    33cc:	a1 05       	cpc	r26, r1
    33ce:	b1 05       	cpc	r27, r1
    33d0:	29 f4       	brne	.+10     	; 0x33dc <TIM_PWMModeInit+0x62>
    33d2:	83 e0       	ldi	r24, 0x03	; 3
    33d4:	8f bd       	out	0x2f, r24	; 47
    33d6:	88 e0       	ldi	r24, 0x08	; 8
    33d8:	8e bd       	out	0x2e, r24	; 46
    33da:	09 c0       	rjmp	.+18     	; 0x33ee <TIM_PWMModeInit+0x74>
    33dc:	8f 3f       	cpi	r24, 0xFF	; 255
    33de:	9f 41       	sbci	r25, 0x1F	; 31
    33e0:	a1 05       	cpc	r26, r1
    33e2:	b1 05       	cpc	r27, r1
    33e4:	21 f4       	brne	.+8      	; 0x33ee <TIM_PWMModeInit+0x74>
    33e6:	82 e0       	ldi	r24, 0x02	; 2
    33e8:	8f bd       	out	0x2f, r24	; 47
    33ea:	88 e1       	ldi	r24, 0x18	; 24
    33ec:	8e bd       	out	0x2e, r24	; 46
    33ee:	81 85       	ldd	r24, Z+9	; 0x09
    33f0:	88 23       	and	r24, r24
    33f2:	89 f0       	breq	.+34     	; 0x3416 <TIM_PWMModeInit+0x9c>
    33f4:	99 b7       	in	r25, 0x39	; 57
    33f6:	89 2b       	or	r24, r25
    33f8:	89 bf       	out	0x39, r24	; 57
    33fa:	0d c0       	rjmp	.+26     	; 0x3416 <TIM_PWMModeInit+0x9c>
    33fc:	95 ff       	sbrs	r25, 5
    33fe:	05 c0       	rjmp	.+10     	; 0x340a <TIM_PWMModeInit+0x90>
    3400:	82 e0       	ldi	r24, 0x02	; 2
    3402:	8f bd       	out	0x2f, r24	; 47
    3404:	80 e1       	ldi	r24, 0x10	; 16
    3406:	8e bd       	out	0x2e, r24	; 46
    3408:	06 c0       	rjmp	.+12     	; 0x3416 <TIM_PWMModeInit+0x9c>
    340a:	96 ff       	sbrs	r25, 6
    340c:	04 c0       	rjmp	.+8      	; 0x3416 <TIM_PWMModeInit+0x9c>
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	8f bd       	out	0x2f, r24	; 47
    3412:	80 e1       	ldi	r24, 0x10	; 16
    3414:	8e bd       	out	0x2e, r24	; 46
    3416:	26 81       	ldd	r18, Z+6	; 0x06
    3418:	2f 3f       	cpi	r18, 0xFF	; 255
    341a:	c1 f4       	brne	.+48     	; 0x344c <TIM_PWMModeInit+0xd2>
    341c:	2f b5       	in	r18, 0x2f	; 47
    341e:	94 81       	ldd	r25, Z+4	; 0x04
    3420:	89 2f       	mov	r24, r25
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	ac 01       	movw	r20, r24
    3426:	00 24       	eor	r0, r0
    3428:	56 95       	lsr	r21
    342a:	47 95       	ror	r20
    342c:	07 94       	ror	r0
    342e:	56 95       	lsr	r21
    3430:	47 95       	ror	r20
    3432:	07 94       	ror	r0
    3434:	54 2f       	mov	r21, r20
    3436:	40 2d       	mov	r20, r0
    3438:	82 95       	swap	r24
    343a:	92 95       	swap	r25
    343c:	90 7f       	andi	r25, 0xF0	; 240
    343e:	98 27       	eor	r25, r24
    3440:	80 7f       	andi	r24, 0xF0	; 240
    3442:	98 27       	eor	r25, r24
    3444:	84 2b       	or	r24, r20
    3446:	82 2b       	or	r24, r18
    3448:	8f bd       	out	0x2f, r24	; 47
    344a:	2b c0       	rjmp	.+86     	; 0x34a2 <TIM_PWMModeInit+0x128>
    344c:	3f b5       	in	r19, 0x2f	; 47
    344e:	94 81       	ldd	r25, Z+4	; 0x04
    3450:	89 2f       	mov	r24, r25
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	02 c0       	rjmp	.+4      	; 0x345a <TIM_PWMModeInit+0xe0>
    3456:	88 0f       	add	r24, r24
    3458:	99 1f       	adc	r25, r25
    345a:	2a 95       	dec	r18
    345c:	e2 f7       	brpl	.-8      	; 0x3456 <TIM_PWMModeInit+0xdc>
    345e:	83 2b       	or	r24, r19
    3460:	8f bd       	out	0x2f, r24	; 47
    3462:	1f c0       	rjmp	.+62     	; 0x34a2 <TIM_PWMModeInit+0x128>
    3464:	88 23       	and	r24, r24
    3466:	11 f0       	breq	.+4      	; 0x346c <TIM_PWMModeInit+0xf2>
    3468:	82 30       	cpi	r24, 0x02	; 2
    346a:	29 f5       	brne	.+74     	; 0x34b6 <TIM_PWMModeInit+0x13c>
    346c:	81 11       	cpse	r24, r1
    346e:	0c c0       	rjmp	.+24     	; 0x3488 <TIM_PWMModeInit+0x10e>
    3470:	83 b7       	in	r24, 0x33	; 51
    3472:	87 78       	andi	r24, 0x87	; 135
    3474:	83 bf       	out	0x33, r24	; 51
    3476:	93 b7       	in	r25, 0x33	; 51
    3478:	24 81       	ldd	r18, Z+4	; 0x04
    347a:	82 81       	ldd	r24, Z+2	; 0x02
    347c:	82 2b       	or	r24, r18
    347e:	89 2b       	or	r24, r25
    3480:	83 bf       	out	0x33, r24	; 51
    3482:	85 81       	ldd	r24, Z+5	; 0x05
    3484:	8c bf       	out	0x3c, r24	; 60
    3486:	0d c0       	rjmp	.+26     	; 0x34a2 <TIM_PWMModeInit+0x128>
    3488:	82 30       	cpi	r24, 0x02	; 2
    348a:	59 f4       	brne	.+22     	; 0x34a2 <TIM_PWMModeInit+0x128>
    348c:	85 b5       	in	r24, 0x25	; 37
    348e:	87 78       	andi	r24, 0x87	; 135
    3490:	85 bd       	out	0x25, r24	; 37
    3492:	95 b5       	in	r25, 0x25	; 37
    3494:	24 81       	ldd	r18, Z+4	; 0x04
    3496:	82 81       	ldd	r24, Z+2	; 0x02
    3498:	82 2b       	or	r24, r18
    349a:	89 2b       	or	r24, r25
    349c:	85 bd       	out	0x25, r24	; 37
    349e:	85 81       	ldd	r24, Z+5	; 0x05
    34a0:	83 bd       	out	0x23, r24	; 35
    34a2:	81 85       	ldd	r24, Z+9	; 0x09
    34a4:	88 23       	and	r24, r24
    34a6:	49 f0       	breq	.+18     	; 0x34ba <TIM_PWMModeInit+0x140>
    34a8:	99 b7       	in	r25, 0x39	; 57
    34aa:	89 2b       	or	r24, r25
    34ac:	89 bf       	out	0x39, r24	; 57
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	08 95       	ret
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	08 95       	ret
    34b6:	82 e0       	ldi	r24, 0x02	; 2
    34b8:	08 95       	ret
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	08 95       	ret

000034be <TIM_CallBack_FuctionSet>:


  TIM_Status_t TIM_CallBack_FuctionSet(IT_SelBIT_t Interrupt_Num ,  TIMCaLL_BackFun  callbackfunction)
{
	
	if (callbackfunction == NULL)
    34be:	61 15       	cp	r22, r1
    34c0:	71 05       	cpc	r23, r1
    34c2:	e1 f0       	breq	.+56     	; 0x34fc <TIM_CallBack_FuctionSet+0x3e>
	{
		return TIM_PARAM_ERROR ;
	}
	
	switch(Interrupt_Num)
    34c4:	88 30       	cpi	r24, 0x08	; 8
    34c6:	e1 f0       	breq	.+56     	; 0x3500 <TIM_CallBack_FuctionSet+0x42>
    34c8:	38 f4       	brcc	.+14     	; 0x34d8 <TIM_CallBack_FuctionSet+0x1a>
    34ca:	82 30       	cpi	r24, 0x02	; 2
    34cc:	89 f0       	breq	.+34     	; 0x34f0 <TIM_CallBack_FuctionSet+0x32>
    34ce:	84 30       	cpi	r24, 0x04	; 4
    34d0:	b9 f0       	breq	.+46     	; 0x3500 <TIM_CallBack_FuctionSet+0x42>
    34d2:	81 30       	cpi	r24, 0x01	; 1
    34d4:	59 f4       	brne	.+22     	; 0x34ec <TIM_CallBack_FuctionSet+0x2e>
    34d6:	14 c0       	rjmp	.+40     	; 0x3500 <TIM_CallBack_FuctionSet+0x42>
    34d8:	80 32       	cpi	r24, 0x20	; 32
    34da:	91 f0       	breq	.+36     	; 0x3500 <TIM_CallBack_FuctionSet+0x42>
    34dc:	18 f4       	brcc	.+6      	; 0x34e4 <TIM_CallBack_FuctionSet+0x26>
    34de:	80 31       	cpi	r24, 0x10	; 16
    34e0:	79 f0       	breq	.+30     	; 0x3500 <TIM_CallBack_FuctionSet+0x42>
    34e2:	04 c0       	rjmp	.+8      	; 0x34ec <TIM_CallBack_FuctionSet+0x2e>
    34e4:	80 34       	cpi	r24, 0x40	; 64
    34e6:	61 f0       	breq	.+24     	; 0x3500 <TIM_CallBack_FuctionSet+0x42>
    34e8:	80 38       	cpi	r24, 0x80	; 128
    34ea:	51 f0       	breq	.+20     	; 0x3500 <TIM_CallBack_FuctionSet+0x42>
		case  TIM_1_IT_COMPB :
						CompareB_callbackfunction = callbackfunction ;
		break; 
		default:
		
			return TIM_CONFIG_ERROR ;
    34ec:	82 e0       	ldi	r24, 0x02	; 2
    34ee:	08 95       	ret
	}
	
	switch(Interrupt_Num)
	{
		case TIM_0_IT_COMP :
				COMPMatch0_Fun = callbackfunction ;
    34f0:	70 93 fa 01 	sts	0x01FA, r23	; 0x8001fa <COMPMatch0_Fun+0x1>
    34f4:	60 93 f9 01 	sts	0x01F9, r22	; 0x8001f9 <COMPMatch0_Fun>
	}
	
	


	return TIM_OK ; 
    34f8:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(Interrupt_Num)
	{
		case TIM_0_IT_COMP :
				COMPMatch0_Fun = callbackfunction ;
		break ;
    34fa:	08 95       	ret
  TIM_Status_t TIM_CallBack_FuctionSet(IT_SelBIT_t Interrupt_Num ,  TIMCaLL_BackFun  callbackfunction)
{
	
	if (callbackfunction == NULL)
	{
		return TIM_PARAM_ERROR ;
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	08 95       	ret
	}
	
	


	return TIM_OK ; 
    3500:	80 e0       	ldi	r24, 0x00	; 0
	
}
    3502:	08 95       	ret

00003504 <__vector_10>:




ISR(TIMER0_COMP_vect)
{
    3504:	1f 92       	push	r1
    3506:	0f 92       	push	r0
    3508:	0f b6       	in	r0, 0x3f	; 63
    350a:	0f 92       	push	r0
    350c:	11 24       	eor	r1, r1
    350e:	2f 93       	push	r18
    3510:	3f 93       	push	r19
    3512:	4f 93       	push	r20
    3514:	5f 93       	push	r21
    3516:	6f 93       	push	r22
    3518:	7f 93       	push	r23
    351a:	8f 93       	push	r24
    351c:	9f 93       	push	r25
    351e:	af 93       	push	r26
    3520:	bf 93       	push	r27
    3522:	ef 93       	push	r30
    3524:	ff 93       	push	r31
	
	COMPMatch0_Fun();
    3526:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <COMPMatch0_Fun>
    352a:	f0 91 fa 01 	lds	r31, 0x01FA	; 0x8001fa <COMPMatch0_Fun+0x1>
    352e:	09 95       	icall
	
	
    3530:	ff 91       	pop	r31
    3532:	ef 91       	pop	r30
    3534:	bf 91       	pop	r27
    3536:	af 91       	pop	r26
    3538:	9f 91       	pop	r25
    353a:	8f 91       	pop	r24
    353c:	7f 91       	pop	r23
    353e:	6f 91       	pop	r22
    3540:	5f 91       	pop	r21
    3542:	4f 91       	pop	r20
    3544:	3f 91       	pop	r19
    3546:	2f 91       	pop	r18
    3548:	0f 90       	pop	r0
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	0f 90       	pop	r0
    354e:	1f 90       	pop	r1
    3550:	18 95       	reti

00003552 <HAL_UART_Init>:
 * brief : this function used to initialization  UART peripheral 
 * param : Handler pointer to the struct hold UART configuration 
 * return : void 
 */
void HAL_UART_Init(UART_Handler_t * Handler )
{
    3552:	fc 01       	movw	r30, r24
	uint16_t BaudRateCal =0 ;
	
	UCSRB = 0x00 ;
    3554:	1a b8       	out	0x0a, r1	; 10
	UCSRC = (1 << URSEL) | 0x00 ;    /* clear UCSRC register to set a new configurations */
    3556:	80 e8       	ldi	r24, 0x80	; 128
    3558:	80 bd       	out	0x20, r24	; 32
	UCSRB |= Handler->Init.Mode ;   /* enable uart in tx or rx or both */
    355a:	9a b1       	in	r25, 0x0a	; 10
    355c:	87 81       	ldd	r24, Z+7	; 0x07
    355e:	89 2b       	or	r24, r25
    3560:	8a b9       	out	0x0a, r24	; 10

	/* set the word size and parity and stop bits */
	UCSRC  |= (1 << URSEL) |((Handler->Init.wordLen) & (0x06)) | (Handler->Init.StopBits);
    3562:	20 b5       	in	r18, 0x20	; 32
    3564:	94 81       	ldd	r25, Z+4	; 0x04
    3566:	85 81       	ldd	r24, Z+5	; 0x05
    3568:	96 70       	andi	r25, 0x06	; 6
    356a:	98 2b       	or	r25, r24
    356c:	92 2b       	or	r25, r18
    356e:	90 68       	ori	r25, 0x80	; 128
    3570:	90 bd       	out	0x20, r25	; 32

	

	/* now set the baud rate */
	BaudRateCal = (F_CPU/(16ul *Handler->Init.BaudRate))-1;
    3572:	80 81       	ld	r24, Z
    3574:	91 81       	ldd	r25, Z+1	; 0x01
    3576:	a2 81       	ldd	r26, Z+2	; 0x02
    3578:	b3 81       	ldd	r27, Z+3	; 0x03
    357a:	88 0f       	add	r24, r24
    357c:	99 1f       	adc	r25, r25
    357e:	aa 1f       	adc	r26, r26
    3580:	bb 1f       	adc	r27, r27
    3582:	88 0f       	add	r24, r24
    3584:	99 1f       	adc	r25, r25
    3586:	aa 1f       	adc	r26, r26
    3588:	bb 1f       	adc	r27, r27
    358a:	9c 01       	movw	r18, r24
    358c:	ad 01       	movw	r20, r26
    358e:	22 0f       	add	r18, r18
    3590:	33 1f       	adc	r19, r19
    3592:	44 1f       	adc	r20, r20
    3594:	55 1f       	adc	r21, r21
    3596:	22 0f       	add	r18, r18
    3598:	33 1f       	adc	r19, r19
    359a:	44 1f       	adc	r20, r20
    359c:	55 1f       	adc	r21, r21
    359e:	60 e0       	ldi	r22, 0x00	; 0
    35a0:	74 e2       	ldi	r23, 0x24	; 36
    35a2:	84 ef       	ldi	r24, 0xF4	; 244
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <__udivmodsi4>
    35aa:	21 50       	subi	r18, 0x01	; 1
    35ac:	31 09       	sbc	r19, r1
	UBRRL = BaudRateCal ;
    35ae:	29 b9       	out	0x09, r18	; 9
	UBRRH =(BaudRateCal>>8)&(0x0f);
    35b0:	83 2f       	mov	r24, r19
    35b2:	8f 70       	andi	r24, 0x0F	; 15
    35b4:	80 bd       	out	0x20, r24	; 32

	
	DDRD  |= 0x02 ;
    35b6:	81 b3       	in	r24, 0x11	; 17
    35b8:	82 60       	ori	r24, 0x02	; 2
    35ba:	81 bb       	out	0x11, r24	; 17
	DDRD  &= ~(1<<0);
    35bc:	81 b3       	in	r24, 0x11	; 17
    35be:	8e 7f       	andi	r24, 0xFE	; 254
    35c0:	81 bb       	out	0x11, r24	; 17
    35c2:	08 95       	ret

000035c4 <HAL_UART_TRANSMIT>:
 * param : TxBuffer pointer to the transmitted buffer 
 * param : Size hold the size of transmitted data 
 * return : void 
 */
void HAL_UART_TRANSMIT(UART_Handler_t * Handler ,uint8_t * TxBuffer ,uint16_t Size )
{
    35c4:	fc 01       	movw	r30, r24
	Handler->TxBuffer = TxBuffer ;
    35c6:	71 87       	std	Z+9, r23	; 0x09
    35c8:	60 87       	std	Z+8, r22	; 0x08
	Handler->TxSize = Size ;
    35ca:	55 87       	std	Z+13, r21	; 0x0d
    35cc:	44 87       	std	Z+12, r20	; 0x0c
	
	for (uint16_t iterator =0 ;iterator<Handler->TxSize;iterator++)
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	0f c0       	rjmp	.+30     	; 0x35f2 <HAL_UART_TRANSMIT+0x2e>
	{
	   while(!(UCSRA &(1<<UDRE)));
    35d4:	5d 9b       	sbis	0x0b, 5	; 11
    35d6:	fe cf       	rjmp	.-4      	; 0x35d4 <HAL_UART_TRANSMIT+0x10>
	   	if(Handler->Init.wordLen == UART_WordLen_9)
    35d8:	84 81       	ldd	r24, Z+4	; 0x04
    35da:	86 31       	cpi	r24, 0x16	; 22
    35dc:	19 f4       	brne	.+6      	; 0x35e4 <HAL_UART_TRANSMIT+0x20>
		   {
			  UCSRB |=((0x100)&(Handler->TxBuffer[iterator]))>>8|0x01; 
    35de:	8a b1       	in	r24, 0x0a	; 10
    35e0:	81 60       	ori	r24, 0x01	; 1
    35e2:	8a b9       	out	0x0a, r24	; 10
		   }
			UDR =(TxBuffer[iterator]);
    35e4:	db 01       	movw	r26, r22
    35e6:	a2 0f       	add	r26, r18
    35e8:	b3 1f       	adc	r27, r19
    35ea:	8c 91       	ld	r24, X
    35ec:	8c b9       	out	0x0c, r24	; 12
void HAL_UART_TRANSMIT(UART_Handler_t * Handler ,uint8_t * TxBuffer ,uint16_t Size )
{
	Handler->TxBuffer = TxBuffer ;
	Handler->TxSize = Size ;
	
	for (uint16_t iterator =0 ;iterator<Handler->TxSize;iterator++)
    35ee:	2f 5f       	subi	r18, 0xFF	; 255
    35f0:	3f 4f       	sbci	r19, 0xFF	; 255
    35f2:	84 85       	ldd	r24, Z+12	; 0x0c
    35f4:	95 85       	ldd	r25, Z+13	; 0x0d
    35f6:	28 17       	cp	r18, r24
    35f8:	39 07       	cpc	r19, r25
    35fa:	60 f3       	brcs	.-40     	; 0x35d4 <HAL_UART_TRANSMIT+0x10>

	}
	
	
	
}/* END_FUN HAL_UART_TRANSMIT() */
    35fc:	08 95       	ret

000035fe <HAL_UART_RECEIVE>:
 * param : Size hold the size of transmitted data 
 * return : void 
 */

void HAL_UART_RECEIVE(UART_Handler_t * Handler ,uint8_t * RxBuffer ,uint16_t Size )
{
    35fe:	cf 93       	push	r28
    3600:	df 93       	push	r29
    3602:	fc 01       	movw	r30, r24
	
	Handler->TxBuffer = NULL;
    3604:	11 86       	std	Z+9, r1	; 0x09
    3606:	10 86       	std	Z+8, r1	; 0x08
	Handler->TxSize =0 ;
    3608:	15 86       	std	Z+13, r1	; 0x0d
    360a:	14 86       	std	Z+12, r1	; 0x0c
	Handler->RxBuffer = RxBuffer ;
    360c:	73 87       	std	Z+11, r23	; 0x0b
    360e:	62 87       	std	Z+10, r22	; 0x0a
	Handler->RxSize = Size ;
    3610:	57 87       	std	Z+15, r21	; 0x0f
    3612:	46 87       	std	Z+14, r20	; 0x0e
	uint8_t TempData = 0 ;
	
	for (uint16_t iterator =0 ; ;iterator++)
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
	{
		while(!(UCSRA & (1<<RXC)));
    3618:	5f 9b       	sbis	0x0b, 7	; 11
    361a:	fe cf       	rjmp	.-4      	; 0x3618 <HAL_UART_RECEIVE+0x1a>
		TempData = UDR ;
    361c:	9c b1       	in	r25, 0x0c	; 12

			if (iterator <= Handler->RxSize)
    361e:	66 85       	ldd	r22, Z+14	; 0x0e
    3620:	77 85       	ldd	r23, Z+15	; 0x0f
    3622:	62 17       	cp	r22, r18
    3624:	73 07       	cpc	r23, r19
    3626:	08 f4       	brcc	.+2      	; 0x362a <HAL_UART_RECEIVE+0x2c>
    3628:	5c c0       	rjmp	.+184    	; 0x36e2 <HAL_UART_RECEIVE+0xe4>
			{
				if(Handler->Init.wordLen == UART_WordLen_9)
    362a:	84 81       	ldd	r24, Z+4	; 0x04
    362c:	86 31       	cpi	r24, 0x16	; 22
    362e:	d1 f5       	brne	.+116    	; 0x36a4 <HAL_UART_RECEIVE+0xa6>
				{
					*(((uint16_t *)Handler->RxBuffer)+iterator)  = (((uint16_t)UCSRB & 0x02)<<7) ;     // the ninth bit must be read first 
    3630:	a2 85       	ldd	r26, Z+10	; 0x0a
    3632:	b3 85       	ldd	r27, Z+11	; 0x0b
    3634:	e9 01       	movw	r28, r18
    3636:	cc 0f       	add	r28, r28
    3638:	dd 1f       	adc	r29, r29
    363a:	ac 0f       	add	r26, r28
    363c:	bd 1f       	adc	r27, r29
    363e:	6a b1       	in	r22, 0x0a	; 10
    3640:	62 70       	andi	r22, 0x02	; 2
    3642:	70 e0       	ldi	r23, 0x00	; 0
    3644:	76 95       	lsr	r23
    3646:	76 2f       	mov	r23, r22
    3648:	66 27       	eor	r22, r22
    364a:	77 95       	ror	r23
    364c:	67 95       	ror	r22
    364e:	6d 93       	st	X+, r22
    3650:	7c 93       	st	X, r23
					*(((uint16_t *)Handler->RxBuffer)+iterator) |= TempData ;
    3652:	a2 85       	ldd	r26, Z+10	; 0x0a
    3654:	b3 85       	ldd	r27, Z+11	; 0x0b
    3656:	ac 0f       	add	r26, r28
    3658:	bd 1f       	adc	r27, r29
    365a:	6d 91       	ld	r22, X+
    365c:	7c 91       	ld	r23, X
    365e:	11 97       	sbiw	r26, 0x01	; 1
    3660:	69 2b       	or	r22, r25
    3662:	6d 93       	st	X+, r22
    3664:	7c 93       	st	X, r23
					if((TempData == '\r')||(TempData == '\n'))
    3666:	9d 30       	cpi	r25, 0x0D	; 13
    3668:	19 f0       	breq	.+6      	; 0x3670 <HAL_UART_RECEIVE+0x72>
    366a:	9a 30       	cpi	r25, 0x0A	; 10
    366c:	09 f0       	breq	.+2      	; 0x3670 <HAL_UART_RECEIVE+0x72>
    366e:	4e c0       	rjmp	.+156    	; 0x370c <HAL_UART_RECEIVE+0x10e>
					{
						if(iterator < Handler->RxSize )
    3670:	86 85       	ldd	r24, Z+14	; 0x0e
    3672:	97 85       	ldd	r25, Z+15	; 0x0f
    3674:	28 17       	cp	r18, r24
    3676:	39 07       	cpc	r19, r25
    3678:	38 f4       	brcc	.+14     	; 0x3688 <HAL_UART_RECEIVE+0x8a>
						*(((uint16_t *)Handler->RxBuffer)+iterator) = '\0' ;
    367a:	82 85       	ldd	r24, Z+10	; 0x0a
    367c:	93 85       	ldd	r25, Z+11	; 0x0b
    367e:	c8 0f       	add	r28, r24
    3680:	d9 1f       	adc	r29, r25
    3682:	19 82       	std	Y+1, r1	; 0x01
    3684:	18 82       	st	Y, r1
    3686:	45 c0       	rjmp	.+138    	; 0x3712 <HAL_UART_RECEIVE+0x114>
						else if (Size == 1)
    3688:	41 30       	cpi	r20, 0x01	; 1
    368a:	51 05       	cpc	r21, r1
    368c:	09 f4       	brne	.+2      	; 0x3690 <HAL_UART_RECEIVE+0x92>
    368e:	41 c0       	rjmp	.+130    	; 0x3712 <HAL_UART_RECEIVE+0x114>
						{
							break;
						}else
						{
							*(((uint16_t *)Handler->RxBuffer)+Size) = '\0' ;
    3690:	02 84       	ldd	r0, Z+10	; 0x0a
    3692:	f3 85       	ldd	r31, Z+11	; 0x0b
    3694:	e0 2d       	mov	r30, r0
    3696:	44 0f       	add	r20, r20
    3698:	55 1f       	adc	r21, r21
    369a:	e4 0f       	add	r30, r20
    369c:	f5 1f       	adc	r31, r21
    369e:	11 82       	std	Z+1, r1	; 0x01
    36a0:	10 82       	st	Z, r1
    36a2:	37 c0       	rjmp	.+110    	; 0x3712 <HAL_UART_RECEIVE+0x114>
						}
						break ;
					}
				}else{
					Handler->RxBuffer[iterator] = TempData ;
    36a4:	a2 85       	ldd	r26, Z+10	; 0x0a
    36a6:	b3 85       	ldd	r27, Z+11	; 0x0b
    36a8:	a2 0f       	add	r26, r18
    36aa:	b3 1f       	adc	r27, r19
    36ac:	9c 93       	st	X, r25
					if((TempData == '\r')||(TempData == '\n'))
    36ae:	9d 30       	cpi	r25, 0x0D	; 13
    36b0:	11 f0       	breq	.+4      	; 0x36b6 <HAL_UART_RECEIVE+0xb8>
    36b2:	9a 30       	cpi	r25, 0x0A	; 10
    36b4:	59 f5       	brne	.+86     	; 0x370c <HAL_UART_RECEIVE+0x10e>
					{
						if(iterator < Handler->RxSize )
    36b6:	86 85       	ldd	r24, Z+14	; 0x0e
    36b8:	97 85       	ldd	r25, Z+15	; 0x0f
    36ba:	28 17       	cp	r18, r24
    36bc:	39 07       	cpc	r19, r25
    36be:	38 f4       	brcc	.+14     	; 0x36ce <HAL_UART_RECEIVE+0xd0>
						Handler->RxBuffer[iterator] = '\0' ;
    36c0:	82 85       	ldd	r24, Z+10	; 0x0a
    36c2:	93 85       	ldd	r25, Z+11	; 0x0b
    36c4:	fc 01       	movw	r30, r24
    36c6:	e2 0f       	add	r30, r18
    36c8:	f3 1f       	adc	r31, r19
    36ca:	10 82       	st	Z, r1
    36cc:	22 c0       	rjmp	.+68     	; 0x3712 <HAL_UART_RECEIVE+0x114>
						else if (Size == 1)
    36ce:	41 30       	cpi	r20, 0x01	; 1
    36d0:	51 05       	cpc	r21, r1
    36d2:	f9 f0       	breq	.+62     	; 0x3712 <HAL_UART_RECEIVE+0x114>
						{
							break;
						}else
						Handler->RxBuffer[Size] = '\0' ;
    36d4:	82 85       	ldd	r24, Z+10	; 0x0a
    36d6:	93 85       	ldd	r25, Z+11	; 0x0b
    36d8:	fc 01       	movw	r30, r24
    36da:	e4 0f       	add	r30, r20
    36dc:	f5 1f       	adc	r31, r21
    36de:	10 82       	st	Z, r1
    36e0:	18 c0       	rjmp	.+48     	; 0x3712 <HAL_UART_RECEIVE+0x114>
						break;
					}
				}
			}else{
				
					if((TempData == '\r')||(TempData == '\n'))
    36e2:	9d 30       	cpi	r25, 0x0D	; 13
    36e4:	11 f0       	breq	.+4      	; 0x36ea <HAL_UART_RECEIVE+0xec>
    36e6:	9a 30       	cpi	r25, 0x0A	; 10
    36e8:	89 f4       	brne	.+34     	; 0x370c <HAL_UART_RECEIVE+0x10e>
					{
						if(iterator < Handler->RxSize )
    36ea:	26 17       	cp	r18, r22
    36ec:	37 07       	cpc	r19, r23
    36ee:	38 f4       	brcc	.+14     	; 0x36fe <HAL_UART_RECEIVE+0x100>
						Handler->RxBuffer[iterator] = '\0' ;
    36f0:	82 85       	ldd	r24, Z+10	; 0x0a
    36f2:	93 85       	ldd	r25, Z+11	; 0x0b
    36f4:	fc 01       	movw	r30, r24
    36f6:	e2 0f       	add	r30, r18
    36f8:	f3 1f       	adc	r31, r19
    36fa:	10 82       	st	Z, r1
    36fc:	0a c0       	rjmp	.+20     	; 0x3712 <HAL_UART_RECEIVE+0x114>
						else
						Handler->RxBuffer[Size] = '\0' ;
    36fe:	82 85       	ldd	r24, Z+10	; 0x0a
    3700:	93 85       	ldd	r25, Z+11	; 0x0b
    3702:	fc 01       	movw	r30, r24
    3704:	e4 0f       	add	r30, r20
    3706:	f5 1f       	adc	r31, r21
    3708:	10 82       	st	Z, r1
    370a:	03 c0       	rjmp	.+6      	; 0x3712 <HAL_UART_RECEIVE+0x114>
	Handler->TxSize =0 ;
	Handler->RxBuffer = RxBuffer ;
	Handler->RxSize = Size ;
	uint8_t TempData = 0 ;
	
	for (uint16_t iterator =0 ; ;iterator++)
    370c:	2f 5f       	subi	r18, 0xFF	; 255
    370e:	3f 4f       	sbci	r19, 0xFF	; 255
						Handler->RxBuffer[Size] = '\0' ;
										
						break;
					}
				}
		}
    3710:	83 cf       	rjmp	.-250    	; 0x3618 <HAL_UART_RECEIVE+0x1a>
	
	
}/* END_FUN HAL_UART_RECEIVE() */
    3712:	df 91       	pop	r29
    3714:	cf 91       	pop	r28
    3716:	08 95       	ret

00003718 <PWM_Toggle_Timer2>:
	


return UTIL_OK ;

}
    3718:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <Duty_TIM2>
    371c:	81 11       	cpse	r24, r1
    371e:	0a c0       	rjmp	.+20     	; 0x3734 <PWM_Toggle_Timer2+0x1c>
    3720:	40 e0       	ldi	r20, 0x00	; 0
    3722:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <PWMTim2_PIN>
    3726:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <PWMTim2_PORT>
    372a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <PWMTim2_PORT+0x1>
    372e:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
    3732:	08 95       	ret
    3734:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ON.2006>
    3738:	81 11       	cpse	r24, r1
    373a:	10 c0       	rjmp	.+32     	; 0x375c <PWM_Toggle_Timer2+0x44>
    373c:	40 e0       	ldi	r20, 0x00	; 0
    373e:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <PWMTim2_PIN>
    3742:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <PWMTim2_PORT>
    3746:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <PWMTim2_PORT+0x1>
    374a:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
    374e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <Duty_TIM2>
    3752:	83 bd       	out	0x23, r24	; 35
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <ON.2006>
    375a:	08 95       	ret
    375c:	41 e0       	ldi	r20, 0x01	; 1
    375e:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <PWMTim2_PIN>
    3762:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <PWMTim2_PORT>
    3766:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <PWMTim2_PORT+0x1>
    376a:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
    376e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <Duty_TIM2>
    3772:	81 95       	neg	r24
    3774:	83 bd       	out	0x23, r24	; 35
    3776:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <ON.2006>
    377a:	08 95       	ret

0000377c <PWM_Toggle_Timer1>:
    377c:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <Duty_TIM1>
    3780:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <Duty_TIM1+0x1>
    3784:	89 2b       	or	r24, r25
    3786:	61 f1       	breq	.+88     	; 0x37e0 <PWM_Toggle_Timer1+0x64>
    3788:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <ON.2010>
    378c:	81 11       	cpse	r24, r1
    378e:	13 c0       	rjmp	.+38     	; 0x37b6 <PWM_Toggle_Timer1+0x3a>
    3790:	40 e0       	ldi	r20, 0x00	; 0
    3792:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <PWMTim1_PIN>
    3796:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <PWMTim1_PORT>
    379a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <PWMTim1_PORT+0x1>
    379e:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
    37a2:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <Duty_TIM1>
    37a6:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <Duty_TIM1+0x1>
    37aa:	9b bd       	out	0x2b, r25	; 43
    37ac:	8a bd       	out	0x2a, r24	; 42
    37ae:	81 e0       	ldi	r24, 0x01	; 1
    37b0:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <ON.2010>
    37b4:	08 95       	ret
    37b6:	41 e0       	ldi	r20, 0x01	; 1
    37b8:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <PWMTim1_PIN>
    37bc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <PWMTim1_PORT>
    37c0:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <PWMTim1_PORT+0x1>
    37c4:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
    37c8:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <Duty_TIM1>
    37cc:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <Duty_TIM1+0x1>
    37d0:	8f ef       	ldi	r24, 0xFF	; 255
    37d2:	9f e0       	ldi	r25, 0x0F	; 15
    37d4:	82 1b       	sub	r24, r18
    37d6:	93 0b       	sbc	r25, r19
    37d8:	9b bd       	out	0x2b, r25	; 43
    37da:	8a bd       	out	0x2a, r24	; 42
    37dc:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <ON.2010>
    37e0:	08 95       	ret

000037e2 <PWM_Toggle_Timer0>:
    37e2:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <Duty_TIM0>
    37e6:	81 11       	cpse	r24, r1
    37e8:	0a c0       	rjmp	.+20     	; 0x37fe <PWM_Toggle_Timer0+0x1c>
    37ea:	40 e0       	ldi	r20, 0x00	; 0
    37ec:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <PWMTim0_PIN>
    37f0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <PWMTim0_PORT>
    37f4:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <PWMTim0_PORT+0x1>
    37f8:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
    37fc:	08 95       	ret
    37fe:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <ON.2002>
    3802:	81 11       	cpse	r24, r1
    3804:	10 c0       	rjmp	.+32     	; 0x3826 <PWM_Toggle_Timer0+0x44>
    3806:	40 e0       	ldi	r20, 0x00	; 0
    3808:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <PWMTim0_PIN>
    380c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <PWMTim0_PORT>
    3810:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <PWMTim0_PORT+0x1>
    3814:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
    3818:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <Duty_TIM0>
    381c:	8c bf       	out	0x3c, r24	; 60
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <ON.2002>
    3824:	08 95       	ret
    3826:	41 e0       	ldi	r20, 0x01	; 1
    3828:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <PWMTim0_PIN>
    382c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <PWMTim0_PORT>
    3830:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <PWMTim0_PORT+0x1>
    3834:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <HAL_GPIO_WRITEPIN>
    3838:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <Duty_TIM0>
    383c:	81 95       	neg	r24
    383e:	8c bf       	out	0x3c, r24	; 60
    3840:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <ON.2002>
    3844:	08 95       	ret

00003846 <Software_PWM_Init>:
 * Param (input) : PIN_Num Pin number in selected port 
 * Param (input) : Tim_PWM_Handler {Pointer to timer configuration register 
 * Return : Utilies_Status_t typedef to Status 
 */
Utilies_Status_t Software_PWM_Init( StrGPIO_t PORT , uint8_t PIN_Num ,TIMInit_t * Tim_PWM_Handler )
{
    3846:	ff 92       	push	r15
    3848:	0f 93       	push	r16
    384a:	1f 93       	push	r17
    384c:	cf 93       	push	r28
    384e:	df 93       	push	r29
	
	if(Tim_PWM_Handler == NULL)
    3850:	41 15       	cp	r20, r1
    3852:	51 05       	cpc	r21, r1
    3854:	09 f4       	brne	.+2      	; 0x3858 <Software_PWM_Init+0x12>
    3856:	5e c0       	rjmp	.+188    	; 0x3914 <Software_PWM_Init+0xce>
    3858:	ea 01       	movw	r28, r20
    385a:	f6 2e       	mov	r15, r22
    385c:	8c 01       	movw	r16, r24

	
	
	
	#if SOFTWARE_PWM_CTC_MODE
	Tim_PWM_Handler->TIMMode = TIM_MODE_CTC ;
    385e:	8f ef       	ldi	r24, 0xFF	; 255
    3860:	9f e0       	ldi	r25, 0x0F	; 15
    3862:	a8 e0       	ldi	r26, 0x08	; 8
    3864:	b0 e0       	ldi	r27, 0x00	; 0
    3866:	88 83       	st	Y, r24
    3868:	99 83       	std	Y+1, r25	; 0x01
    386a:	aa 83       	std	Y+2, r26	; 0x02
    386c:	bb 83       	std	Y+3, r27	; 0x03
		Tim_PWM_Handler->TIMMode = TIM_MODE_CTC ;
	}else
	{
		;
	}
	TIM_PWMModeInit(Tim_PWM_Handler) ;
    386e:	ca 01       	movw	r24, r20
    3870:	0e 94 bd 19 	call	0x337a	; 0x337a <TIM_PWMModeInit>
	
	if (Tim_PWM_Handler->Instance  == TIM0)
    3874:	98 85       	ldd	r25, Y+8	; 0x08
    3876:	91 11       	cpse	r25, r1
    3878:	1a c0       	rjmp	.+52     	; 0x38ae <Software_PWM_Init+0x68>
	{
		PWMTim0_PIN.mode = GPIO_MODE_OUTPUT ;
    387a:	ee e0       	ldi	r30, 0x0E	; 14
    387c:	f2 e0       	ldi	r31, 0x02	; 2
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	81 83       	std	Z+1, r24	; 0x01
		PWMTim0_PIN.pin = PIN_Num ;
    3882:	f0 82       	st	Z, r15
		PWMTim0_PIN.pull = GPIO_NOPULL ;
    3884:	12 82       	std	Z+2, r1	; 0x02
		HAL_GPIO_Pin_Init( PORT , &PWMTim0_PIN );
    3886:	bf 01       	movw	r22, r30
    3888:	c8 01       	movw	r24, r16
    388a:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <HAL_GPIO_Pin_Init>
		
		PWMTim0_PORT = PORT ;
    388e:	10 93 07 02 	sts	0x0207, r17	; 0x800207 <PWMTim0_PORT+0x1>
    3892:	00 93 06 02 	sts	0x0206, r16	; 0x800206 <PWMTim0_PORT>
		#if !SOFTWARE_PWM_CTC_MODE
		_TIM_IT_EN(TIM_0_IT_OVER);
		#endif
		TIM_CallBack_FuctionSet(TIM_0_IT_OVER , PWM_Toggle_Timer0); 
    3896:	61 ef       	ldi	r22, 0xF1	; 241
    3898:	7b e1       	ldi	r23, 0x1B	; 27
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	0e 94 5f 1a 	call	0x34be	; 0x34be <TIM_CallBack_FuctionSet>
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer0);
    38a0:	61 ef       	ldi	r22, 0xF1	; 241
    38a2:	7b e1       	ldi	r23, 0x1B	; 27
    38a4:	89 85       	ldd	r24, Y+9	; 0x09
    38a6:	0e 94 5f 1a 	call	0x34be	; 0x34be <TIM_CallBack_FuctionSet>
	}
	
		
	
	
	return  UTIL_OK ; 
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	36 c0       	rjmp	.+108    	; 0x391a <Software_PWM_Init+0xd4>
		_TIM_IT_EN(TIM_0_IT_OVER);
		#endif
		TIM_CallBack_FuctionSet(TIM_0_IT_OVER , PWM_Toggle_Timer0); 
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer0);

	}else if (Tim_PWM_Handler->Instance == TIM1)
    38ae:	91 30       	cpi	r25, 0x01	; 1
    38b0:	a9 f4       	brne	.+42     	; 0x38dc <Software_PWM_Init+0x96>
	{	
		PWMTim1_PIN.mode = GPIO_MODE_OUTPUT ;
    38b2:	eb e0       	ldi	r30, 0x0B	; 11
    38b4:	f2 e0       	ldi	r31, 0x02	; 2
    38b6:	81 e0       	ldi	r24, 0x01	; 1
    38b8:	81 83       	std	Z+1, r24	; 0x01
		PWMTim1_PIN.pin = PIN_Num ;
    38ba:	f0 82       	st	Z, r15
		PWMTim1_PIN.pull = GPIO_NOPULL ;
    38bc:	12 82       	std	Z+2, r1	; 0x02
		HAL_GPIO_Pin_Init( PORT , &PWMTim1_PIN );
    38be:	bf 01       	movw	r22, r30
    38c0:	c8 01       	movw	r24, r16
    38c2:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <HAL_GPIO_Pin_Init>
		PWMTim1_PORT = PORT ;
    38c6:	10 93 05 02 	sts	0x0205, r17	; 0x800205 <PWMTim1_PORT+0x1>
    38ca:	00 93 04 02 	sts	0x0204, r16	; 0x800204 <PWMTim1_PORT>
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer1);
    38ce:	6e eb       	ldi	r22, 0xBE	; 190
    38d0:	7b e1       	ldi	r23, 0x1B	; 27
    38d2:	89 85       	ldd	r24, Y+9	; 0x09
    38d4:	0e 94 5f 1a 	call	0x34be	; 0x34be <TIM_CallBack_FuctionSet>
	}
	
		
	
	
	return  UTIL_OK ; 
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	1f c0       	rjmp	.+62     	; 0x391a <Software_PWM_Init+0xd4>
		PWMTim1_PIN.pin = PIN_Num ;
		PWMTim1_PIN.pull = GPIO_NOPULL ;
		HAL_GPIO_Pin_Init( PORT , &PWMTim1_PIN );
		PWMTim1_PORT = PORT ;
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer1);
	}else if(Tim_PWM_Handler->Instance == TIM2)
    38dc:	92 30       	cpi	r25, 0x02	; 2
    38de:	e1 f4       	brne	.+56     	; 0x3918 <Software_PWM_Init+0xd2>
	{	
		PWMTim2_PIN.mode = GPIO_MODE_OUTPUT ;
    38e0:	e8 e0       	ldi	r30, 0x08	; 8
    38e2:	f2 e0       	ldi	r31, 0x02	; 2
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	81 83       	std	Z+1, r24	; 0x01
		PWMTim2_PIN.pin = PIN_Num ;
    38e8:	f0 82       	st	Z, r15
		PWMTim2_PIN.pull = GPIO_NOPULL ;
    38ea:	12 82       	std	Z+2, r1	; 0x02
		HAL_GPIO_Pin_Init( PORT , &PWMTim2_PIN );	
    38ec:	bf 01       	movw	r22, r30
    38ee:	c8 01       	movw	r24, r16
    38f0:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <HAL_GPIO_Pin_Init>
		PWMTim2_PORT = PORT ;
    38f4:	10 93 03 02 	sts	0x0203, r17	; 0x800203 <PWMTim2_PORT+0x1>
    38f8:	00 93 02 02 	sts	0x0202, r16	; 0x800202 <PWMTim2_PORT>
		#if !SOFTWARE_PWM_CTC_MODE
		_TIM_IT_EN(TIM_2_IT_OVER);
		#endif
		TIM_CallBack_FuctionSet(TIM_2_IT_OVER , PWM_Toggle_Timer2);
    38fc:	6c e8       	ldi	r22, 0x8C	; 140
    38fe:	7b e1       	ldi	r23, 0x1B	; 27
    3900:	80 e4       	ldi	r24, 0x40	; 64
    3902:	0e 94 5f 1a 	call	0x34be	; 0x34be <TIM_CallBack_FuctionSet>
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer2);
    3906:	6c e8       	ldi	r22, 0x8C	; 140
    3908:	7b e1       	ldi	r23, 0x1B	; 27
    390a:	89 85       	ldd	r24, Y+9	; 0x09
    390c:	0e 94 5f 1a 	call	0x34be	; 0x34be <TIM_CallBack_FuctionSet>
	}
	
		
	
	
	return  UTIL_OK ; 
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	03 c0       	rjmp	.+6      	; 0x391a <Software_PWM_Init+0xd4>
Utilies_Status_t Software_PWM_Init( StrGPIO_t PORT , uint8_t PIN_Num ,TIMInit_t * Tim_PWM_Handler )
{
	
	if(Tim_PWM_Handler == NULL)
	{
		return UTIL_PARAM_ERROR ;
    3914:	81 e0       	ldi	r24, 0x01	; 1
    3916:	01 c0       	rjmp	.+2      	; 0x391a <Software_PWM_Init+0xd4>
		TIM_CallBack_FuctionSet(TIM_2_IT_OVER , PWM_Toggle_Timer2);
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer2);
		
	}else
	{
		return UTIL_TIM_ERROR ;
    3918:	82 e0       	ldi	r24, 0x02	; 2
		
	
	
	return  UTIL_OK ; 
	
}
    391a:	df 91       	pop	r29
    391c:	cf 91       	pop	r28
    391e:	1f 91       	pop	r17
    3920:	0f 91       	pop	r16
    3922:	ff 90       	pop	r15
    3924:	08 95       	ret

00003926 <Software_PWM_Start>:


Utilies_Status_t Software_PWM_Start (TIMInit_t * TIMConfig )
{
	
	if(TIMConfig == NULL)
    3926:	00 97       	sbiw	r24, 0x00	; 0
    3928:	21 f0       	breq	.+8      	; 0x3932 <Software_PWM_Start+0xc>
	}else
	{
		;
	}
	
	TIM_Start(TIMConfig) ;
    392a:	0e 94 75 19 	call	0x32ea	; 0x32ea <TIM_Start>
	return UTIL_OK ;
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	08 95       	ret
Utilies_Status_t Software_PWM_Start (TIMInit_t * TIMConfig )
{
	
	if(TIMConfig == NULL)
	{
		return UTIL_PARAM_ERROR ;
    3932:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	TIM_Start(TIMConfig) ;
	return UTIL_OK ;

}
    3934:	08 95       	ret

00003936 <Software_PWM_UpdateDuty>:
 * param (input): Tim_PWM_Handler pointer to selected timer configuration that contain Prescaller 
 * param (input): SetDuty desired Duty cycle From (0 t0 100 )
 * return : Utilies_Status_t status 
*/
Utilies_Status_t Software_PWM_UpdateDuty( uint8_t SetDuty  ,TIMInit_t * Tim_PWM_Handler )
{
    3936:	8f 92       	push	r8
    3938:	9f 92       	push	r9
    393a:	af 92       	push	r10
    393c:	bf 92       	push	r11
    393e:	cf 92       	push	r12
    3940:	df 92       	push	r13
    3942:	ef 92       	push	r14
    3944:	ff 92       	push	r15
    3946:	1f 93       	push	r17
    3948:	cf 93       	push	r28
    394a:	df 93       	push	r29
		if (Tim_PWM_Handler == NULL)
    394c:	61 15       	cp	r22, r1
    394e:	71 05       	cpc	r23, r1
    3950:	09 f4       	brne	.+2      	; 0x3954 <Software_PWM_UpdateDuty+0x1e>
    3952:	71 c0       	rjmp	.+226    	; 0x3a36 <Software_PWM_UpdateDuty+0x100>
    3954:	eb 01       	movw	r28, r22
    3956:	18 2f       	mov	r17, r24
		{
			return UTIL_PARAM_ERROR ;
			}else
			{
				 if(TIM_Stop(Tim_PWM_Handler->Instance) == TIM_OK)
    3958:	88 85       	ldd	r24, Y+8	; 0x08
    395a:	0e 94 a0 19 	call	0x3340	; 0x3340 <TIM_Stop>
    395e:	81 11       	cpse	r24, r1
    3960:	6c c0       	rjmp	.+216    	; 0x3a3a <Software_PWM_UpdateDuty+0x104>
				 {
	
						if(TIM_PWMMode_SetDuty(Tim_PWM_Handler , SetDuty) == TIM_OK)
    3962:	61 2f       	mov	r22, r17
    3964:	ce 01       	movw	r24, r28
    3966:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <TIM_PWMMode_SetDuty>
    396a:	81 11       	cpse	r24, r1
    396c:	68 c0       	rjmp	.+208    	; 0x3a3e <Software_PWM_UpdateDuty+0x108>
						{
							if(TIM_Start(Tim_PWM_Handler) == TIM_OK)
    396e:	ce 01       	movw	r24, r28
    3970:	0e 94 75 19 	call	0x32ea	; 0x32ea <TIM_Start>
    3974:	81 11       	cpse	r24, r1
    3976:	65 c0       	rjmp	.+202    	; 0x3a42 <Software_PWM_UpdateDuty+0x10c>
			}
			
		
			
			
			if (Tim_PWM_Handler->Instance == TIM1)
    3978:	88 85       	ldd	r24, Y+8	; 0x08
    397a:	81 30       	cpi	r24, 0x01	; 1
    397c:	41 f5       	brne	.+80     	; 0x39ce <Software_PWM_UpdateDuty+0x98>
			{
					Duty_TIM1 =((Tim_PWM_Handler->TIMMode & 0xfff)/(100.0 * SetDuty ));
    397e:	88 81       	ld	r24, Y
    3980:	99 81       	ldd	r25, Y+1	; 0x01
    3982:	aa 81       	ldd	r26, Y+2	; 0x02
    3984:	bb 81       	ldd	r27, Y+3	; 0x03
    3986:	4c 01       	movw	r8, r24
    3988:	5d 01       	movw	r10, r26
    398a:	2f e0       	ldi	r18, 0x0F	; 15
    398c:	92 22       	and	r9, r18
    398e:	aa 24       	eor	r10, r10
    3990:	bb 24       	eor	r11, r11
    3992:	61 2f       	mov	r22, r17
    3994:	70 e0       	ldi	r23, 0x00	; 0
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__floatsisf>
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	48 ec       	ldi	r20, 0xC8	; 200
    39a4:	52 e4       	ldi	r21, 0x42	; 66
    39a6:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <__mulsf3>
    39aa:	6b 01       	movw	r12, r22
    39ac:	7c 01       	movw	r14, r24
    39ae:	c5 01       	movw	r24, r10
    39b0:	b4 01       	movw	r22, r8
    39b2:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <__floatunsisf>
    39b6:	a7 01       	movw	r20, r14
    39b8:	96 01       	movw	r18, r12
    39ba:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__divsf3>
    39be:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <__fixunssfsi>
    39c2:	70 93 ff 01 	sts	0x01FF, r23	; 0x8001ff <Duty_TIM1+0x1>
    39c6:	60 93 fe 01 	sts	0x01FE, r22	; 0x8001fe <Duty_TIM1>
				return UTIL_TIM_ERROR ;
			}
			#endif 
			
		
		return UTIL_OK ; 
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	3d c0       	rjmp	.+122    	; 0x3a48 <Software_PWM_UpdateDuty+0x112>
			if (Tim_PWM_Handler->Instance == TIM1)
			{
					Duty_TIM1 =((Tim_PWM_Handler->TIMMode & 0xfff)/(100.0 * SetDuty ));
			}
			#if SOFTWARE_PWM_CTC_MODE
			else if (Tim_PWM_Handler->Instance == TIM0)
    39ce:	81 11       	cpse	r24, r1
    39d0:	18 c0       	rjmp	.+48     	; 0x3a02 <Software_PWM_UpdateDuty+0xcc>
			{
				  Duty_TIM0 = (256*(SetDuty/100.0));
    39d2:	61 2f       	mov	r22, r17
    39d4:	70 e0       	ldi	r23, 0x00	; 0
    39d6:	80 e0       	ldi	r24, 0x00	; 0
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__floatsisf>
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	48 ec       	ldi	r20, 0xC8	; 200
    39e4:	52 e4       	ldi	r21, 0x42	; 66
    39e6:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__divsf3>
    39ea:	20 e0       	ldi	r18, 0x00	; 0
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	40 e8       	ldi	r20, 0x80	; 128
    39f0:	53 e4       	ldi	r21, 0x43	; 67
    39f2:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <__mulsf3>
    39f6:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <__fixunssfsi>
    39fa:	60 93 01 02 	sts	0x0201, r22	; 0x800201 <Duty_TIM0>
				return UTIL_TIM_ERROR ;
			}
			#endif 
			
		
		return UTIL_OK ; 
    39fe:	80 e0       	ldi	r24, 0x00	; 0
    3a00:	23 c0       	rjmp	.+70     	; 0x3a48 <Software_PWM_UpdateDuty+0x112>
			}
			#if SOFTWARE_PWM_CTC_MODE
			else if (Tim_PWM_Handler->Instance == TIM0)
			{
				  Duty_TIM0 = (256*(SetDuty/100.0));
			}else if (Tim_PWM_Handler->Instance == TIM2)
    3a02:	82 30       	cpi	r24, 0x02	; 2
    3a04:	01 f5       	brne	.+64     	; 0x3a46 <Software_PWM_UpdateDuty+0x110>
			{
				 Duty_TIM2 = (uint8_t)(256 * (SetDuty/100.0) );
    3a06:	61 2f       	mov	r22, r17
    3a08:	70 e0       	ldi	r23, 0x00	; 0
    3a0a:	80 e0       	ldi	r24, 0x00	; 0
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__floatsisf>
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	48 ec       	ldi	r20, 0xC8	; 200
    3a18:	52 e4       	ldi	r21, 0x42	; 66
    3a1a:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__divsf3>
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	40 e8       	ldi	r20, 0x80	; 128
    3a24:	53 e4       	ldi	r21, 0x43	; 67
    3a26:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <__mulsf3>
    3a2a:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <__fixunssfsi>
    3a2e:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <Duty_TIM2>
				return UTIL_TIM_ERROR ;
			}
			#endif 
			
		
		return UTIL_OK ; 
    3a32:	80 e0       	ldi	r24, 0x00	; 0
    3a34:	09 c0       	rjmp	.+18     	; 0x3a48 <Software_PWM_UpdateDuty+0x112>
*/
Utilies_Status_t Software_PWM_UpdateDuty( uint8_t SetDuty  ,TIMInit_t * Tim_PWM_Handler )
{
		if (Tim_PWM_Handler == NULL)
		{
			return UTIL_PARAM_ERROR ;
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	07 c0       	rjmp	.+14     	; 0x3a48 <Software_PWM_UpdateDuty+0x112>
							return UTIL_TIM_ERROR ;
						}
					}
					else
					{
						return UTIL_TIM_ERROR ; 
    3a3a:	82 e0       	ldi	r24, 0x02	; 2
    3a3c:	05 c0       	rjmp	.+10     	; 0x3a48 <Software_PWM_UpdateDuty+0x112>
								return UTIL_TIM_ERROR ;
							}
						}
						else
						{
							return UTIL_TIM_ERROR ;
    3a3e:	82 e0       	ldi	r24, 0x02	; 2
    3a40:	03 c0       	rjmp	.+6      	; 0x3a48 <Software_PWM_UpdateDuty+0x112>
							{
								;
							}
							else
							{
								return UTIL_TIM_ERROR ;
    3a42:	82 e0       	ldi	r24, 0x02	; 2
    3a44:	01 c0       	rjmp	.+2      	; 0x3a48 <Software_PWM_UpdateDuty+0x112>
			}else if (Tim_PWM_Handler->Instance == TIM2)
			{
				 Duty_TIM2 = (uint8_t)(256 * (SetDuty/100.0) );
			}else
			{
				return UTIL_TIM_ERROR ;
    3a46:	82 e0       	ldi	r24, 0x02	; 2
			}
			#endif 
			
		
		return UTIL_OK ; 
}
    3a48:	df 91       	pop	r29
    3a4a:	cf 91       	pop	r28
    3a4c:	1f 91       	pop	r17
    3a4e:	ff 90       	pop	r15
    3a50:	ef 90       	pop	r14
    3a52:	df 90       	pop	r13
    3a54:	cf 90       	pop	r12
    3a56:	bf 90       	pop	r11
    3a58:	af 90       	pop	r10
    3a5a:	9f 90       	pop	r9
    3a5c:	8f 90       	pop	r8
    3a5e:	08 95       	ret

00003a60 <__divsf3>:
    3a60:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <__divsf3x>
    3a64:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <__fp_round>
    3a68:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <__fp_pscB>
    3a6c:	58 f0       	brcs	.+22     	; 0x3a84 <__divsf3+0x24>
    3a6e:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <__fp_pscA>
    3a72:	40 f0       	brcs	.+16     	; 0x3a84 <__divsf3+0x24>
    3a74:	29 f4       	brne	.+10     	; 0x3a80 <__divsf3+0x20>
    3a76:	5f 3f       	cpi	r21, 0xFF	; 255
    3a78:	29 f0       	breq	.+10     	; 0x3a84 <__divsf3+0x24>
    3a7a:	0c 94 0e 1e 	jmp	0x3c1c	; 0x3c1c <__fp_inf>
    3a7e:	51 11       	cpse	r21, r1
    3a80:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__fp_szero>
    3a84:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__fp_nan>

00003a88 <__divsf3x>:
    3a88:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fp_split3>
    3a8c:	68 f3       	brcs	.-38     	; 0x3a68 <__divsf3+0x8>

00003a8e <__divsf3_pse>:
    3a8e:	99 23       	and	r25, r25
    3a90:	b1 f3       	breq	.-20     	; 0x3a7e <__divsf3+0x1e>
    3a92:	55 23       	and	r21, r21
    3a94:	91 f3       	breq	.-28     	; 0x3a7a <__divsf3+0x1a>
    3a96:	95 1b       	sub	r25, r21
    3a98:	55 0b       	sbc	r21, r21
    3a9a:	bb 27       	eor	r27, r27
    3a9c:	aa 27       	eor	r26, r26
    3a9e:	62 17       	cp	r22, r18
    3aa0:	73 07       	cpc	r23, r19
    3aa2:	84 07       	cpc	r24, r20
    3aa4:	38 f0       	brcs	.+14     	; 0x3ab4 <__divsf3_pse+0x26>
    3aa6:	9f 5f       	subi	r25, 0xFF	; 255
    3aa8:	5f 4f       	sbci	r21, 0xFF	; 255
    3aaa:	22 0f       	add	r18, r18
    3aac:	33 1f       	adc	r19, r19
    3aae:	44 1f       	adc	r20, r20
    3ab0:	aa 1f       	adc	r26, r26
    3ab2:	a9 f3       	breq	.-22     	; 0x3a9e <__divsf3_pse+0x10>
    3ab4:	35 d0       	rcall	.+106    	; 0x3b20 <__divsf3_pse+0x92>
    3ab6:	0e 2e       	mov	r0, r30
    3ab8:	3a f0       	brmi	.+14     	; 0x3ac8 <__divsf3_pse+0x3a>
    3aba:	e0 e8       	ldi	r30, 0x80	; 128
    3abc:	32 d0       	rcall	.+100    	; 0x3b22 <__divsf3_pse+0x94>
    3abe:	91 50       	subi	r25, 0x01	; 1
    3ac0:	50 40       	sbci	r21, 0x00	; 0
    3ac2:	e6 95       	lsr	r30
    3ac4:	00 1c       	adc	r0, r0
    3ac6:	ca f7       	brpl	.-14     	; 0x3aba <__divsf3_pse+0x2c>
    3ac8:	2b d0       	rcall	.+86     	; 0x3b20 <__divsf3_pse+0x92>
    3aca:	fe 2f       	mov	r31, r30
    3acc:	29 d0       	rcall	.+82     	; 0x3b20 <__divsf3_pse+0x92>
    3ace:	66 0f       	add	r22, r22
    3ad0:	77 1f       	adc	r23, r23
    3ad2:	88 1f       	adc	r24, r24
    3ad4:	bb 1f       	adc	r27, r27
    3ad6:	26 17       	cp	r18, r22
    3ad8:	37 07       	cpc	r19, r23
    3ada:	48 07       	cpc	r20, r24
    3adc:	ab 07       	cpc	r26, r27
    3ade:	b0 e8       	ldi	r27, 0x80	; 128
    3ae0:	09 f0       	breq	.+2      	; 0x3ae4 <__divsf3_pse+0x56>
    3ae2:	bb 0b       	sbc	r27, r27
    3ae4:	80 2d       	mov	r24, r0
    3ae6:	bf 01       	movw	r22, r30
    3ae8:	ff 27       	eor	r31, r31
    3aea:	93 58       	subi	r25, 0x83	; 131
    3aec:	5f 4f       	sbci	r21, 0xFF	; 255
    3aee:	3a f0       	brmi	.+14     	; 0x3afe <__divsf3_pse+0x70>
    3af0:	9e 3f       	cpi	r25, 0xFE	; 254
    3af2:	51 05       	cpc	r21, r1
    3af4:	78 f0       	brcs	.+30     	; 0x3b14 <__divsf3_pse+0x86>
    3af6:	0c 94 0e 1e 	jmp	0x3c1c	; 0x3c1c <__fp_inf>
    3afa:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__fp_szero>
    3afe:	5f 3f       	cpi	r21, 0xFF	; 255
    3b00:	e4 f3       	brlt	.-8      	; 0x3afa <__divsf3_pse+0x6c>
    3b02:	98 3e       	cpi	r25, 0xE8	; 232
    3b04:	d4 f3       	brlt	.-12     	; 0x3afa <__divsf3_pse+0x6c>
    3b06:	86 95       	lsr	r24
    3b08:	77 95       	ror	r23
    3b0a:	67 95       	ror	r22
    3b0c:	b7 95       	ror	r27
    3b0e:	f7 95       	ror	r31
    3b10:	9f 5f       	subi	r25, 0xFF	; 255
    3b12:	c9 f7       	brne	.-14     	; 0x3b06 <__divsf3_pse+0x78>
    3b14:	88 0f       	add	r24, r24
    3b16:	91 1d       	adc	r25, r1
    3b18:	96 95       	lsr	r25
    3b1a:	87 95       	ror	r24
    3b1c:	97 f9       	bld	r25, 7
    3b1e:	08 95       	ret
    3b20:	e1 e0       	ldi	r30, 0x01	; 1
    3b22:	66 0f       	add	r22, r22
    3b24:	77 1f       	adc	r23, r23
    3b26:	88 1f       	adc	r24, r24
    3b28:	bb 1f       	adc	r27, r27
    3b2a:	62 17       	cp	r22, r18
    3b2c:	73 07       	cpc	r23, r19
    3b2e:	84 07       	cpc	r24, r20
    3b30:	ba 07       	cpc	r27, r26
    3b32:	20 f0       	brcs	.+8      	; 0x3b3c <__divsf3_pse+0xae>
    3b34:	62 1b       	sub	r22, r18
    3b36:	73 0b       	sbc	r23, r19
    3b38:	84 0b       	sbc	r24, r20
    3b3a:	ba 0b       	sbc	r27, r26
    3b3c:	ee 1f       	adc	r30, r30
    3b3e:	88 f7       	brcc	.-30     	; 0x3b22 <__divsf3_pse+0x94>
    3b40:	e0 95       	com	r30
    3b42:	08 95       	ret

00003b44 <__fixunssfsi>:
    3b44:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__fp_splitA>
    3b48:	88 f0       	brcs	.+34     	; 0x3b6c <__fixunssfsi+0x28>
    3b4a:	9f 57       	subi	r25, 0x7F	; 127
    3b4c:	98 f0       	brcs	.+38     	; 0x3b74 <__fixunssfsi+0x30>
    3b4e:	b9 2f       	mov	r27, r25
    3b50:	99 27       	eor	r25, r25
    3b52:	b7 51       	subi	r27, 0x17	; 23
    3b54:	b0 f0       	brcs	.+44     	; 0x3b82 <__fixunssfsi+0x3e>
    3b56:	e1 f0       	breq	.+56     	; 0x3b90 <__fixunssfsi+0x4c>
    3b58:	66 0f       	add	r22, r22
    3b5a:	77 1f       	adc	r23, r23
    3b5c:	88 1f       	adc	r24, r24
    3b5e:	99 1f       	adc	r25, r25
    3b60:	1a f0       	brmi	.+6      	; 0x3b68 <__fixunssfsi+0x24>
    3b62:	ba 95       	dec	r27
    3b64:	c9 f7       	brne	.-14     	; 0x3b58 <__fixunssfsi+0x14>
    3b66:	14 c0       	rjmp	.+40     	; 0x3b90 <__fixunssfsi+0x4c>
    3b68:	b1 30       	cpi	r27, 0x01	; 1
    3b6a:	91 f0       	breq	.+36     	; 0x3b90 <__fixunssfsi+0x4c>
    3b6c:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <__fp_zero>
    3b70:	b1 e0       	ldi	r27, 0x01	; 1
    3b72:	08 95       	ret
    3b74:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__fp_zero>
    3b78:	67 2f       	mov	r22, r23
    3b7a:	78 2f       	mov	r23, r24
    3b7c:	88 27       	eor	r24, r24
    3b7e:	b8 5f       	subi	r27, 0xF8	; 248
    3b80:	39 f0       	breq	.+14     	; 0x3b90 <__fixunssfsi+0x4c>
    3b82:	b9 3f       	cpi	r27, 0xF9	; 249
    3b84:	cc f3       	brlt	.-14     	; 0x3b78 <__fixunssfsi+0x34>
    3b86:	86 95       	lsr	r24
    3b88:	77 95       	ror	r23
    3b8a:	67 95       	ror	r22
    3b8c:	b3 95       	inc	r27
    3b8e:	d9 f7       	brne	.-10     	; 0x3b86 <__fixunssfsi+0x42>
    3b90:	3e f4       	brtc	.+14     	; 0x3ba0 <__fixunssfsi+0x5c>
    3b92:	90 95       	com	r25
    3b94:	80 95       	com	r24
    3b96:	70 95       	com	r23
    3b98:	61 95       	neg	r22
    3b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b9c:	8f 4f       	sbci	r24, 0xFF	; 255
    3b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba0:	08 95       	ret

00003ba2 <__floatunsisf>:
    3ba2:	e8 94       	clt
    3ba4:	09 c0       	rjmp	.+18     	; 0x3bb8 <__floatsisf+0x12>

00003ba6 <__floatsisf>:
    3ba6:	97 fb       	bst	r25, 7
    3ba8:	3e f4       	brtc	.+14     	; 0x3bb8 <__floatsisf+0x12>
    3baa:	90 95       	com	r25
    3bac:	80 95       	com	r24
    3bae:	70 95       	com	r23
    3bb0:	61 95       	neg	r22
    3bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    3bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb8:	99 23       	and	r25, r25
    3bba:	a9 f0       	breq	.+42     	; 0x3be6 <__floatsisf+0x40>
    3bbc:	f9 2f       	mov	r31, r25
    3bbe:	96 e9       	ldi	r25, 0x96	; 150
    3bc0:	bb 27       	eor	r27, r27
    3bc2:	93 95       	inc	r25
    3bc4:	f6 95       	lsr	r31
    3bc6:	87 95       	ror	r24
    3bc8:	77 95       	ror	r23
    3bca:	67 95       	ror	r22
    3bcc:	b7 95       	ror	r27
    3bce:	f1 11       	cpse	r31, r1
    3bd0:	f8 cf       	rjmp	.-16     	; 0x3bc2 <__floatsisf+0x1c>
    3bd2:	fa f4       	brpl	.+62     	; 0x3c12 <__floatsisf+0x6c>
    3bd4:	bb 0f       	add	r27, r27
    3bd6:	11 f4       	brne	.+4      	; 0x3bdc <__floatsisf+0x36>
    3bd8:	60 ff       	sbrs	r22, 0
    3bda:	1b c0       	rjmp	.+54     	; 0x3c12 <__floatsisf+0x6c>
    3bdc:	6f 5f       	subi	r22, 0xFF	; 255
    3bde:	7f 4f       	sbci	r23, 0xFF	; 255
    3be0:	8f 4f       	sbci	r24, 0xFF	; 255
    3be2:	9f 4f       	sbci	r25, 0xFF	; 255
    3be4:	16 c0       	rjmp	.+44     	; 0x3c12 <__floatsisf+0x6c>
    3be6:	88 23       	and	r24, r24
    3be8:	11 f0       	breq	.+4      	; 0x3bee <__floatsisf+0x48>
    3bea:	96 e9       	ldi	r25, 0x96	; 150
    3bec:	11 c0       	rjmp	.+34     	; 0x3c10 <__floatsisf+0x6a>
    3bee:	77 23       	and	r23, r23
    3bf0:	21 f0       	breq	.+8      	; 0x3bfa <__floatsisf+0x54>
    3bf2:	9e e8       	ldi	r25, 0x8E	; 142
    3bf4:	87 2f       	mov	r24, r23
    3bf6:	76 2f       	mov	r23, r22
    3bf8:	05 c0       	rjmp	.+10     	; 0x3c04 <__floatsisf+0x5e>
    3bfa:	66 23       	and	r22, r22
    3bfc:	71 f0       	breq	.+28     	; 0x3c1a <__floatsisf+0x74>
    3bfe:	96 e8       	ldi	r25, 0x86	; 134
    3c00:	86 2f       	mov	r24, r22
    3c02:	70 e0       	ldi	r23, 0x00	; 0
    3c04:	60 e0       	ldi	r22, 0x00	; 0
    3c06:	2a f0       	brmi	.+10     	; 0x3c12 <__floatsisf+0x6c>
    3c08:	9a 95       	dec	r25
    3c0a:	66 0f       	add	r22, r22
    3c0c:	77 1f       	adc	r23, r23
    3c0e:	88 1f       	adc	r24, r24
    3c10:	da f7       	brpl	.-10     	; 0x3c08 <__floatsisf+0x62>
    3c12:	88 0f       	add	r24, r24
    3c14:	96 95       	lsr	r25
    3c16:	87 95       	ror	r24
    3c18:	97 f9       	bld	r25, 7
    3c1a:	08 95       	ret

00003c1c <__fp_inf>:
    3c1c:	97 f9       	bld	r25, 7
    3c1e:	9f 67       	ori	r25, 0x7F	; 127
    3c20:	80 e8       	ldi	r24, 0x80	; 128
    3c22:	70 e0       	ldi	r23, 0x00	; 0
    3c24:	60 e0       	ldi	r22, 0x00	; 0
    3c26:	08 95       	ret

00003c28 <__fp_nan>:
    3c28:	9f ef       	ldi	r25, 0xFF	; 255
    3c2a:	80 ec       	ldi	r24, 0xC0	; 192
    3c2c:	08 95       	ret

00003c2e <__fp_pscA>:
    3c2e:	00 24       	eor	r0, r0
    3c30:	0a 94       	dec	r0
    3c32:	16 16       	cp	r1, r22
    3c34:	17 06       	cpc	r1, r23
    3c36:	18 06       	cpc	r1, r24
    3c38:	09 06       	cpc	r0, r25
    3c3a:	08 95       	ret

00003c3c <__fp_pscB>:
    3c3c:	00 24       	eor	r0, r0
    3c3e:	0a 94       	dec	r0
    3c40:	12 16       	cp	r1, r18
    3c42:	13 06       	cpc	r1, r19
    3c44:	14 06       	cpc	r1, r20
    3c46:	05 06       	cpc	r0, r21
    3c48:	08 95       	ret

00003c4a <__fp_round>:
    3c4a:	09 2e       	mov	r0, r25
    3c4c:	03 94       	inc	r0
    3c4e:	00 0c       	add	r0, r0
    3c50:	11 f4       	brne	.+4      	; 0x3c56 <__fp_round+0xc>
    3c52:	88 23       	and	r24, r24
    3c54:	52 f0       	brmi	.+20     	; 0x3c6a <__fp_round+0x20>
    3c56:	bb 0f       	add	r27, r27
    3c58:	40 f4       	brcc	.+16     	; 0x3c6a <__fp_round+0x20>
    3c5a:	bf 2b       	or	r27, r31
    3c5c:	11 f4       	brne	.+4      	; 0x3c62 <__fp_round+0x18>
    3c5e:	60 ff       	sbrs	r22, 0
    3c60:	04 c0       	rjmp	.+8      	; 0x3c6a <__fp_round+0x20>
    3c62:	6f 5f       	subi	r22, 0xFF	; 255
    3c64:	7f 4f       	sbci	r23, 0xFF	; 255
    3c66:	8f 4f       	sbci	r24, 0xFF	; 255
    3c68:	9f 4f       	sbci	r25, 0xFF	; 255
    3c6a:	08 95       	ret

00003c6c <__fp_split3>:
    3c6c:	57 fd       	sbrc	r21, 7
    3c6e:	90 58       	subi	r25, 0x80	; 128
    3c70:	44 0f       	add	r20, r20
    3c72:	55 1f       	adc	r21, r21
    3c74:	59 f0       	breq	.+22     	; 0x3c8c <__fp_splitA+0x10>
    3c76:	5f 3f       	cpi	r21, 0xFF	; 255
    3c78:	71 f0       	breq	.+28     	; 0x3c96 <__fp_splitA+0x1a>
    3c7a:	47 95       	ror	r20

00003c7c <__fp_splitA>:
    3c7c:	88 0f       	add	r24, r24
    3c7e:	97 fb       	bst	r25, 7
    3c80:	99 1f       	adc	r25, r25
    3c82:	61 f0       	breq	.+24     	; 0x3c9c <__fp_splitA+0x20>
    3c84:	9f 3f       	cpi	r25, 0xFF	; 255
    3c86:	79 f0       	breq	.+30     	; 0x3ca6 <__fp_splitA+0x2a>
    3c88:	87 95       	ror	r24
    3c8a:	08 95       	ret
    3c8c:	12 16       	cp	r1, r18
    3c8e:	13 06       	cpc	r1, r19
    3c90:	14 06       	cpc	r1, r20
    3c92:	55 1f       	adc	r21, r21
    3c94:	f2 cf       	rjmp	.-28     	; 0x3c7a <__fp_split3+0xe>
    3c96:	46 95       	lsr	r20
    3c98:	f1 df       	rcall	.-30     	; 0x3c7c <__fp_splitA>
    3c9a:	08 c0       	rjmp	.+16     	; 0x3cac <__fp_splitA+0x30>
    3c9c:	16 16       	cp	r1, r22
    3c9e:	17 06       	cpc	r1, r23
    3ca0:	18 06       	cpc	r1, r24
    3ca2:	99 1f       	adc	r25, r25
    3ca4:	f1 cf       	rjmp	.-30     	; 0x3c88 <__fp_splitA+0xc>
    3ca6:	86 95       	lsr	r24
    3ca8:	71 05       	cpc	r23, r1
    3caa:	61 05       	cpc	r22, r1
    3cac:	08 94       	sec
    3cae:	08 95       	ret

00003cb0 <__fp_zero>:
    3cb0:	e8 94       	clt

00003cb2 <__fp_szero>:
    3cb2:	bb 27       	eor	r27, r27
    3cb4:	66 27       	eor	r22, r22
    3cb6:	77 27       	eor	r23, r23
    3cb8:	cb 01       	movw	r24, r22
    3cba:	97 f9       	bld	r25, 7
    3cbc:	08 95       	ret

00003cbe <__mulsf3>:
    3cbe:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__mulsf3x>
    3cc2:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <__fp_round>
    3cc6:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <__fp_pscA>
    3cca:	38 f0       	brcs	.+14     	; 0x3cda <__mulsf3+0x1c>
    3ccc:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <__fp_pscB>
    3cd0:	20 f0       	brcs	.+8      	; 0x3cda <__mulsf3+0x1c>
    3cd2:	95 23       	and	r25, r21
    3cd4:	11 f0       	breq	.+4      	; 0x3cda <__mulsf3+0x1c>
    3cd6:	0c 94 0e 1e 	jmp	0x3c1c	; 0x3c1c <__fp_inf>
    3cda:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__fp_nan>
    3cde:	11 24       	eor	r1, r1
    3ce0:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__fp_szero>

00003ce4 <__mulsf3x>:
    3ce4:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fp_split3>
    3ce8:	70 f3       	brcs	.-36     	; 0x3cc6 <__mulsf3+0x8>

00003cea <__mulsf3_pse>:
    3cea:	95 9f       	mul	r25, r21
    3cec:	c1 f3       	breq	.-16     	; 0x3cde <__mulsf3+0x20>
    3cee:	95 0f       	add	r25, r21
    3cf0:	50 e0       	ldi	r21, 0x00	; 0
    3cf2:	55 1f       	adc	r21, r21
    3cf4:	62 9f       	mul	r22, r18
    3cf6:	f0 01       	movw	r30, r0
    3cf8:	72 9f       	mul	r23, r18
    3cfa:	bb 27       	eor	r27, r27
    3cfc:	f0 0d       	add	r31, r0
    3cfe:	b1 1d       	adc	r27, r1
    3d00:	63 9f       	mul	r22, r19
    3d02:	aa 27       	eor	r26, r26
    3d04:	f0 0d       	add	r31, r0
    3d06:	b1 1d       	adc	r27, r1
    3d08:	aa 1f       	adc	r26, r26
    3d0a:	64 9f       	mul	r22, r20
    3d0c:	66 27       	eor	r22, r22
    3d0e:	b0 0d       	add	r27, r0
    3d10:	a1 1d       	adc	r26, r1
    3d12:	66 1f       	adc	r22, r22
    3d14:	82 9f       	mul	r24, r18
    3d16:	22 27       	eor	r18, r18
    3d18:	b0 0d       	add	r27, r0
    3d1a:	a1 1d       	adc	r26, r1
    3d1c:	62 1f       	adc	r22, r18
    3d1e:	73 9f       	mul	r23, r19
    3d20:	b0 0d       	add	r27, r0
    3d22:	a1 1d       	adc	r26, r1
    3d24:	62 1f       	adc	r22, r18
    3d26:	83 9f       	mul	r24, r19
    3d28:	a0 0d       	add	r26, r0
    3d2a:	61 1d       	adc	r22, r1
    3d2c:	22 1f       	adc	r18, r18
    3d2e:	74 9f       	mul	r23, r20
    3d30:	33 27       	eor	r19, r19
    3d32:	a0 0d       	add	r26, r0
    3d34:	61 1d       	adc	r22, r1
    3d36:	23 1f       	adc	r18, r19
    3d38:	84 9f       	mul	r24, r20
    3d3a:	60 0d       	add	r22, r0
    3d3c:	21 1d       	adc	r18, r1
    3d3e:	82 2f       	mov	r24, r18
    3d40:	76 2f       	mov	r23, r22
    3d42:	6a 2f       	mov	r22, r26
    3d44:	11 24       	eor	r1, r1
    3d46:	9f 57       	subi	r25, 0x7F	; 127
    3d48:	50 40       	sbci	r21, 0x00	; 0
    3d4a:	9a f0       	brmi	.+38     	; 0x3d72 <__mulsf3_pse+0x88>
    3d4c:	f1 f0       	breq	.+60     	; 0x3d8a <__mulsf3_pse+0xa0>
    3d4e:	88 23       	and	r24, r24
    3d50:	4a f0       	brmi	.+18     	; 0x3d64 <__mulsf3_pse+0x7a>
    3d52:	ee 0f       	add	r30, r30
    3d54:	ff 1f       	adc	r31, r31
    3d56:	bb 1f       	adc	r27, r27
    3d58:	66 1f       	adc	r22, r22
    3d5a:	77 1f       	adc	r23, r23
    3d5c:	88 1f       	adc	r24, r24
    3d5e:	91 50       	subi	r25, 0x01	; 1
    3d60:	50 40       	sbci	r21, 0x00	; 0
    3d62:	a9 f7       	brne	.-22     	; 0x3d4e <__mulsf3_pse+0x64>
    3d64:	9e 3f       	cpi	r25, 0xFE	; 254
    3d66:	51 05       	cpc	r21, r1
    3d68:	80 f0       	brcs	.+32     	; 0x3d8a <__mulsf3_pse+0xa0>
    3d6a:	0c 94 0e 1e 	jmp	0x3c1c	; 0x3c1c <__fp_inf>
    3d6e:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__fp_szero>
    3d72:	5f 3f       	cpi	r21, 0xFF	; 255
    3d74:	e4 f3       	brlt	.-8      	; 0x3d6e <__mulsf3_pse+0x84>
    3d76:	98 3e       	cpi	r25, 0xE8	; 232
    3d78:	d4 f3       	brlt	.-12     	; 0x3d6e <__mulsf3_pse+0x84>
    3d7a:	86 95       	lsr	r24
    3d7c:	77 95       	ror	r23
    3d7e:	67 95       	ror	r22
    3d80:	b7 95       	ror	r27
    3d82:	f7 95       	ror	r31
    3d84:	e7 95       	ror	r30
    3d86:	9f 5f       	subi	r25, 0xFF	; 255
    3d88:	c1 f7       	brne	.-16     	; 0x3d7a <__mulsf3_pse+0x90>
    3d8a:	fe 2b       	or	r31, r30
    3d8c:	88 0f       	add	r24, r24
    3d8e:	91 1d       	adc	r25, r1
    3d90:	96 95       	lsr	r25
    3d92:	87 95       	ror	r24
    3d94:	97 f9       	bld	r25, 7
    3d96:	08 95       	ret

00003d98 <__divmodhi4>:
    3d98:	97 fb       	bst	r25, 7
    3d9a:	07 2e       	mov	r0, r23
    3d9c:	16 f4       	brtc	.+4      	; 0x3da2 <__divmodhi4+0xa>
    3d9e:	00 94       	com	r0
    3da0:	07 d0       	rcall	.+14     	; 0x3db0 <__divmodhi4_neg1>
    3da2:	77 fd       	sbrc	r23, 7
    3da4:	09 d0       	rcall	.+18     	; 0x3db8 <__divmodhi4_neg2>
    3da6:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <__udivmodhi4>
    3daa:	07 fc       	sbrc	r0, 7
    3dac:	05 d0       	rcall	.+10     	; 0x3db8 <__divmodhi4_neg2>
    3dae:	3e f4       	brtc	.+14     	; 0x3dbe <__divmodhi4_exit>

00003db0 <__divmodhi4_neg1>:
    3db0:	90 95       	com	r25
    3db2:	81 95       	neg	r24
    3db4:	9f 4f       	sbci	r25, 0xFF	; 255
    3db6:	08 95       	ret

00003db8 <__divmodhi4_neg2>:
    3db8:	70 95       	com	r23
    3dba:	61 95       	neg	r22
    3dbc:	7f 4f       	sbci	r23, 0xFF	; 255

00003dbe <__divmodhi4_exit>:
    3dbe:	08 95       	ret

00003dc0 <__udivmodsi4>:
    3dc0:	a1 e2       	ldi	r26, 0x21	; 33
    3dc2:	1a 2e       	mov	r1, r26
    3dc4:	aa 1b       	sub	r26, r26
    3dc6:	bb 1b       	sub	r27, r27
    3dc8:	fd 01       	movw	r30, r26
    3dca:	0d c0       	rjmp	.+26     	; 0x3de6 <__udivmodsi4_ep>

00003dcc <__udivmodsi4_loop>:
    3dcc:	aa 1f       	adc	r26, r26
    3dce:	bb 1f       	adc	r27, r27
    3dd0:	ee 1f       	adc	r30, r30
    3dd2:	ff 1f       	adc	r31, r31
    3dd4:	a2 17       	cp	r26, r18
    3dd6:	b3 07       	cpc	r27, r19
    3dd8:	e4 07       	cpc	r30, r20
    3dda:	f5 07       	cpc	r31, r21
    3ddc:	20 f0       	brcs	.+8      	; 0x3de6 <__udivmodsi4_ep>
    3dde:	a2 1b       	sub	r26, r18
    3de0:	b3 0b       	sbc	r27, r19
    3de2:	e4 0b       	sbc	r30, r20
    3de4:	f5 0b       	sbc	r31, r21

00003de6 <__udivmodsi4_ep>:
    3de6:	66 1f       	adc	r22, r22
    3de8:	77 1f       	adc	r23, r23
    3dea:	88 1f       	adc	r24, r24
    3dec:	99 1f       	adc	r25, r25
    3dee:	1a 94       	dec	r1
    3df0:	69 f7       	brne	.-38     	; 0x3dcc <__udivmodsi4_loop>
    3df2:	60 95       	com	r22
    3df4:	70 95       	com	r23
    3df6:	80 95       	com	r24
    3df8:	90 95       	com	r25
    3dfa:	9b 01       	movw	r18, r22
    3dfc:	ac 01       	movw	r20, r24
    3dfe:	bd 01       	movw	r22, r26
    3e00:	cf 01       	movw	r24, r30
    3e02:	08 95       	ret

00003e04 <__tablejump2__>:
    3e04:	ee 0f       	add	r30, r30
    3e06:	ff 1f       	adc	r31, r31
    3e08:	05 90       	lpm	r0, Z+
    3e0a:	f4 91       	lpm	r31, Z
    3e0c:	e0 2d       	mov	r30, r0
    3e0e:	09 94       	ijmp

00003e10 <__muluhisi3>:
    3e10:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <__umulhisi3>
    3e14:	a5 9f       	mul	r26, r21
    3e16:	90 0d       	add	r25, r0
    3e18:	b4 9f       	mul	r27, r20
    3e1a:	90 0d       	add	r25, r0
    3e1c:	a4 9f       	mul	r26, r20
    3e1e:	80 0d       	add	r24, r0
    3e20:	91 1d       	adc	r25, r1
    3e22:	11 24       	eor	r1, r1
    3e24:	08 95       	ret

00003e26 <__ashrdi3>:
    3e26:	97 fb       	bst	r25, 7
    3e28:	10 f8       	bld	r1, 0

00003e2a <__lshrdi3>:
    3e2a:	16 94       	lsr	r1
    3e2c:	00 08       	sbc	r0, r0
    3e2e:	0f 93       	push	r16
    3e30:	08 30       	cpi	r16, 0x08	; 8
    3e32:	98 f0       	brcs	.+38     	; 0x3e5a <__lshrdi3+0x30>
    3e34:	08 50       	subi	r16, 0x08	; 8
    3e36:	23 2f       	mov	r18, r19
    3e38:	34 2f       	mov	r19, r20
    3e3a:	45 2f       	mov	r20, r21
    3e3c:	56 2f       	mov	r21, r22
    3e3e:	67 2f       	mov	r22, r23
    3e40:	78 2f       	mov	r23, r24
    3e42:	89 2f       	mov	r24, r25
    3e44:	90 2d       	mov	r25, r0
    3e46:	f4 cf       	rjmp	.-24     	; 0x3e30 <__lshrdi3+0x6>
    3e48:	05 94       	asr	r0
    3e4a:	97 95       	ror	r25
    3e4c:	87 95       	ror	r24
    3e4e:	77 95       	ror	r23
    3e50:	67 95       	ror	r22
    3e52:	57 95       	ror	r21
    3e54:	47 95       	ror	r20
    3e56:	37 95       	ror	r19
    3e58:	27 95       	ror	r18
    3e5a:	0a 95       	dec	r16
    3e5c:	aa f7       	brpl	.-22     	; 0x3e48 <__lshrdi3+0x1e>
    3e5e:	0f 91       	pop	r16
    3e60:	08 95       	ret

00003e62 <__adddi3_s8>:
    3e62:	00 24       	eor	r0, r0
    3e64:	a7 fd       	sbrc	r26, 7
    3e66:	00 94       	com	r0
    3e68:	2a 0f       	add	r18, r26
    3e6a:	30 1d       	adc	r19, r0
    3e6c:	40 1d       	adc	r20, r0
    3e6e:	50 1d       	adc	r21, r0
    3e70:	60 1d       	adc	r22, r0
    3e72:	70 1d       	adc	r23, r0
    3e74:	80 1d       	adc	r24, r0
    3e76:	90 1d       	adc	r25, r0
    3e78:	08 95       	ret

00003e7a <__udivmodhi4>:
    3e7a:	aa 1b       	sub	r26, r26
    3e7c:	bb 1b       	sub	r27, r27
    3e7e:	51 e1       	ldi	r21, 0x11	; 17
    3e80:	07 c0       	rjmp	.+14     	; 0x3e90 <__udivmodhi4_ep>

00003e82 <__udivmodhi4_loop>:
    3e82:	aa 1f       	adc	r26, r26
    3e84:	bb 1f       	adc	r27, r27
    3e86:	a6 17       	cp	r26, r22
    3e88:	b7 07       	cpc	r27, r23
    3e8a:	10 f0       	brcs	.+4      	; 0x3e90 <__udivmodhi4_ep>
    3e8c:	a6 1b       	sub	r26, r22
    3e8e:	b7 0b       	sbc	r27, r23

00003e90 <__udivmodhi4_ep>:
    3e90:	88 1f       	adc	r24, r24
    3e92:	99 1f       	adc	r25, r25
    3e94:	5a 95       	dec	r21
    3e96:	a9 f7       	brne	.-22     	; 0x3e82 <__udivmodhi4_loop>
    3e98:	80 95       	com	r24
    3e9a:	90 95       	com	r25
    3e9c:	bc 01       	movw	r22, r24
    3e9e:	cd 01       	movw	r24, r26
    3ea0:	08 95       	ret

00003ea2 <__umulhisi3>:
    3ea2:	a2 9f       	mul	r26, r18
    3ea4:	b0 01       	movw	r22, r0
    3ea6:	b3 9f       	mul	r27, r19
    3ea8:	c0 01       	movw	r24, r0
    3eaa:	a3 9f       	mul	r26, r19
    3eac:	70 0d       	add	r23, r0
    3eae:	81 1d       	adc	r24, r1
    3eb0:	11 24       	eor	r1, r1
    3eb2:	91 1d       	adc	r25, r1
    3eb4:	b2 9f       	mul	r27, r18
    3eb6:	70 0d       	add	r23, r0
    3eb8:	81 1d       	adc	r24, r1
    3eba:	11 24       	eor	r1, r1
    3ebc:	91 1d       	adc	r25, r1
    3ebe:	08 95       	ret

00003ec0 <atoi>:
    3ec0:	fc 01       	movw	r30, r24
    3ec2:	88 27       	eor	r24, r24
    3ec4:	99 27       	eor	r25, r25
    3ec6:	e8 94       	clt
    3ec8:	21 91       	ld	r18, Z+
    3eca:	20 32       	cpi	r18, 0x20	; 32
    3ecc:	e9 f3       	breq	.-6      	; 0x3ec8 <atoi+0x8>
    3ece:	29 30       	cpi	r18, 0x09	; 9
    3ed0:	10 f0       	brcs	.+4      	; 0x3ed6 <atoi+0x16>
    3ed2:	2e 30       	cpi	r18, 0x0E	; 14
    3ed4:	c8 f3       	brcs	.-14     	; 0x3ec8 <atoi+0x8>
    3ed6:	2b 32       	cpi	r18, 0x2B	; 43
    3ed8:	41 f0       	breq	.+16     	; 0x3eea <atoi+0x2a>
    3eda:	2d 32       	cpi	r18, 0x2D	; 45
    3edc:	39 f4       	brne	.+14     	; 0x3eec <atoi+0x2c>
    3ede:	68 94       	set
    3ee0:	04 c0       	rjmp	.+8      	; 0x3eea <atoi+0x2a>
    3ee2:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <__mulhi_const_10>
    3ee6:	82 0f       	add	r24, r18
    3ee8:	91 1d       	adc	r25, r1
    3eea:	21 91       	ld	r18, Z+
    3eec:	20 53       	subi	r18, 0x30	; 48
    3eee:	2a 30       	cpi	r18, 0x0A	; 10
    3ef0:	c0 f3       	brcs	.-16     	; 0x3ee2 <atoi+0x22>
    3ef2:	1e f4       	brtc	.+6      	; 0x3efa <atoi+0x3a>
    3ef4:	90 95       	com	r25
    3ef6:	81 95       	neg	r24
    3ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    3efa:	08 95       	ret

00003efc <strcpy_P>:
    3efc:	fb 01       	movw	r30, r22
    3efe:	dc 01       	movw	r26, r24
    3f00:	05 90       	lpm	r0, Z+
    3f02:	0d 92       	st	X+, r0
    3f04:	00 20       	and	r0, r0
    3f06:	e1 f7       	brne	.-8      	; 0x3f00 <strcpy_P+0x4>
    3f08:	08 95       	ret

00003f0a <memset>:
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	01 c0       	rjmp	.+2      	; 0x3f10 <memset+0x6>
    3f0e:	6d 93       	st	X+, r22
    3f10:	41 50       	subi	r20, 0x01	; 1
    3f12:	50 40       	sbci	r21, 0x00	; 0
    3f14:	e0 f7       	brcc	.-8      	; 0x3f0e <memset+0x4>
    3f16:	08 95       	ret

00003f18 <strcmp>:
    3f18:	fb 01       	movw	r30, r22
    3f1a:	dc 01       	movw	r26, r24
    3f1c:	8d 91       	ld	r24, X+
    3f1e:	01 90       	ld	r0, Z+
    3f20:	80 19       	sub	r24, r0
    3f22:	01 10       	cpse	r0, r1
    3f24:	d9 f3       	breq	.-10     	; 0x3f1c <strcmp+0x4>
    3f26:	99 0b       	sbc	r25, r25
    3f28:	08 95       	ret

00003f2a <__itoa_ncheck>:
    3f2a:	bb 27       	eor	r27, r27
    3f2c:	4a 30       	cpi	r20, 0x0A	; 10
    3f2e:	31 f4       	brne	.+12     	; 0x3f3c <__itoa_ncheck+0x12>
    3f30:	99 23       	and	r25, r25
    3f32:	22 f4       	brpl	.+8      	; 0x3f3c <__itoa_ncheck+0x12>
    3f34:	bd e2       	ldi	r27, 0x2D	; 45
    3f36:	90 95       	com	r25
    3f38:	81 95       	neg	r24
    3f3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f3c:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <__utoa_common>

00003f40 <__mulhi_const_10>:
    3f40:	7a e0       	ldi	r23, 0x0A	; 10
    3f42:	97 9f       	mul	r25, r23
    3f44:	90 2d       	mov	r25, r0
    3f46:	87 9f       	mul	r24, r23
    3f48:	80 2d       	mov	r24, r0
    3f4a:	91 0d       	add	r25, r1
    3f4c:	11 24       	eor	r1, r1
    3f4e:	08 95       	ret

00003f50 <__utoa_ncheck>:
    3f50:	bb 27       	eor	r27, r27

00003f52 <__utoa_common>:
    3f52:	fb 01       	movw	r30, r22
    3f54:	55 27       	eor	r21, r21
    3f56:	aa 27       	eor	r26, r26
    3f58:	88 0f       	add	r24, r24
    3f5a:	99 1f       	adc	r25, r25
    3f5c:	aa 1f       	adc	r26, r26
    3f5e:	a4 17       	cp	r26, r20
    3f60:	10 f0       	brcs	.+4      	; 0x3f66 <__utoa_common+0x14>
    3f62:	a4 1b       	sub	r26, r20
    3f64:	83 95       	inc	r24
    3f66:	50 51       	subi	r21, 0x10	; 16
    3f68:	b9 f7       	brne	.-18     	; 0x3f58 <__utoa_common+0x6>
    3f6a:	a0 5d       	subi	r26, 0xD0	; 208
    3f6c:	aa 33       	cpi	r26, 0x3A	; 58
    3f6e:	08 f0       	brcs	.+2      	; 0x3f72 <__utoa_common+0x20>
    3f70:	a9 5d       	subi	r26, 0xD9	; 217
    3f72:	a1 93       	st	Z+, r26
    3f74:	00 97       	sbiw	r24, 0x00	; 0
    3f76:	79 f7       	brne	.-34     	; 0x3f56 <__utoa_common+0x4>
    3f78:	b1 11       	cpse	r27, r1
    3f7a:	b1 93       	st	Z+, r27
    3f7c:	11 92       	st	Z+, r1
    3f7e:	cb 01       	movw	r24, r22
    3f80:	0c 94 f5 21 	jmp	0x43ea	; 0x43ea <strrev>

00003f84 <printf>:
    3f84:	a0 e0       	ldi	r26, 0x00	; 0
    3f86:	b0 e0       	ldi	r27, 0x00	; 0
    3f88:	e8 ec       	ldi	r30, 0xC8	; 200
    3f8a:	ff e1       	ldi	r31, 0x1F	; 31
    3f8c:	0c 94 af 22 	jmp	0x455e	; 0x455e <__prologue_saves__+0x20>
    3f90:	ae 01       	movw	r20, r28
    3f92:	4b 5f       	subi	r20, 0xFB	; 251
    3f94:	5f 4f       	sbci	r21, 0xFF	; 255
    3f96:	fa 01       	movw	r30, r20
    3f98:	61 91       	ld	r22, Z+
    3f9a:	71 91       	ld	r23, Z+
    3f9c:	af 01       	movw	r20, r30
    3f9e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__iob+0x2>
    3fa2:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <__iob+0x3>
    3fa6:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <vfprintf>
    3faa:	e2 e0       	ldi	r30, 0x02	; 2
    3fac:	0c 94 cb 22 	jmp	0x4596	; 0x4596 <__epilogue_restores__+0x20>

00003fb0 <printf_P>:
    3fb0:	a0 e0       	ldi	r26, 0x00	; 0
    3fb2:	b0 e0       	ldi	r27, 0x00	; 0
    3fb4:	ee ed       	ldi	r30, 0xDE	; 222
    3fb6:	ff e1       	ldi	r31, 0x1F	; 31
    3fb8:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__prologue_saves__+0x1c>
    3fbc:	ae 01       	movw	r20, r28
    3fbe:	49 5f       	subi	r20, 0xF9	; 249
    3fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    3fc2:	da 01       	movw	r26, r20
    3fc4:	6d 91       	ld	r22, X+
    3fc6:	7d 91       	ld	r23, X+
    3fc8:	ad 01       	movw	r20, r26
    3fca:	0a e3       	ldi	r16, 0x3A	; 58
    3fcc:	12 e0       	ldi	r17, 0x02	; 2
    3fce:	f8 01       	movw	r30, r16
    3fd0:	82 81       	ldd	r24, Z+2	; 0x02
    3fd2:	93 81       	ldd	r25, Z+3	; 0x03
    3fd4:	dc 01       	movw	r26, r24
    3fd6:	13 96       	adiw	r26, 0x03	; 3
    3fd8:	2c 91       	ld	r18, X
    3fda:	13 97       	sbiw	r26, 0x03	; 3
    3fdc:	28 60       	ori	r18, 0x08	; 8
    3fde:	13 96       	adiw	r26, 0x03	; 3
    3fe0:	2c 93       	st	X, r18
    3fe2:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <vfprintf>
    3fe6:	d8 01       	movw	r26, r16
    3fe8:	12 96       	adiw	r26, 0x02	; 2
    3fea:	ed 91       	ld	r30, X+
    3fec:	fc 91       	ld	r31, X
    3fee:	13 97       	sbiw	r26, 0x03	; 3
    3ff0:	23 81       	ldd	r18, Z+3	; 0x03
    3ff2:	27 7f       	andi	r18, 0xF7	; 247
    3ff4:	23 83       	std	Z+3, r18	; 0x03
    3ff6:	e4 e0       	ldi	r30, 0x04	; 4
    3ff8:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__epilogue_restores__+0x1c>

00003ffc <vfprintf>:
    3ffc:	ab e0       	ldi	r26, 0x0B	; 11
    3ffe:	b0 e0       	ldi	r27, 0x00	; 0
    4000:	e4 e0       	ldi	r30, 0x04	; 4
    4002:	f0 e2       	ldi	r31, 0x20	; 32
    4004:	0c 94 9f 22 	jmp	0x453e	; 0x453e <__prologue_saves__>
    4008:	6c 01       	movw	r12, r24
    400a:	7b 01       	movw	r14, r22
    400c:	8a 01       	movw	r16, r20
    400e:	fc 01       	movw	r30, r24
    4010:	17 82       	std	Z+7, r1	; 0x07
    4012:	16 82       	std	Z+6, r1	; 0x06
    4014:	83 81       	ldd	r24, Z+3	; 0x03
    4016:	81 ff       	sbrs	r24, 1
    4018:	cc c1       	rjmp	.+920    	; 0x43b2 <vfprintf+0x3b6>
    401a:	ce 01       	movw	r24, r28
    401c:	01 96       	adiw	r24, 0x01	; 1
    401e:	3c 01       	movw	r6, r24
    4020:	f6 01       	movw	r30, r12
    4022:	93 81       	ldd	r25, Z+3	; 0x03
    4024:	f7 01       	movw	r30, r14
    4026:	93 fd       	sbrc	r25, 3
    4028:	85 91       	lpm	r24, Z+
    402a:	93 ff       	sbrs	r25, 3
    402c:	81 91       	ld	r24, Z+
    402e:	7f 01       	movw	r14, r30
    4030:	88 23       	and	r24, r24
    4032:	09 f4       	brne	.+2      	; 0x4036 <vfprintf+0x3a>
    4034:	ba c1       	rjmp	.+884    	; 0x43aa <vfprintf+0x3ae>
    4036:	85 32       	cpi	r24, 0x25	; 37
    4038:	39 f4       	brne	.+14     	; 0x4048 <vfprintf+0x4c>
    403a:	93 fd       	sbrc	r25, 3
    403c:	85 91       	lpm	r24, Z+
    403e:	93 ff       	sbrs	r25, 3
    4040:	81 91       	ld	r24, Z+
    4042:	7f 01       	movw	r14, r30
    4044:	85 32       	cpi	r24, 0x25	; 37
    4046:	29 f4       	brne	.+10     	; 0x4052 <vfprintf+0x56>
    4048:	b6 01       	movw	r22, r12
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	0e 94 05 22 	call	0x440a	; 0x440a <fputc>
    4050:	e7 cf       	rjmp	.-50     	; 0x4020 <vfprintf+0x24>
    4052:	91 2c       	mov	r9, r1
    4054:	21 2c       	mov	r2, r1
    4056:	31 2c       	mov	r3, r1
    4058:	ff e1       	ldi	r31, 0x1F	; 31
    405a:	f3 15       	cp	r31, r3
    405c:	d8 f0       	brcs	.+54     	; 0x4094 <vfprintf+0x98>
    405e:	8b 32       	cpi	r24, 0x2B	; 43
    4060:	79 f0       	breq	.+30     	; 0x4080 <vfprintf+0x84>
    4062:	38 f4       	brcc	.+14     	; 0x4072 <vfprintf+0x76>
    4064:	80 32       	cpi	r24, 0x20	; 32
    4066:	79 f0       	breq	.+30     	; 0x4086 <vfprintf+0x8a>
    4068:	83 32       	cpi	r24, 0x23	; 35
    406a:	a1 f4       	brne	.+40     	; 0x4094 <vfprintf+0x98>
    406c:	23 2d       	mov	r18, r3
    406e:	20 61       	ori	r18, 0x10	; 16
    4070:	1d c0       	rjmp	.+58     	; 0x40ac <vfprintf+0xb0>
    4072:	8d 32       	cpi	r24, 0x2D	; 45
    4074:	61 f0       	breq	.+24     	; 0x408e <vfprintf+0x92>
    4076:	80 33       	cpi	r24, 0x30	; 48
    4078:	69 f4       	brne	.+26     	; 0x4094 <vfprintf+0x98>
    407a:	23 2d       	mov	r18, r3
    407c:	21 60       	ori	r18, 0x01	; 1
    407e:	16 c0       	rjmp	.+44     	; 0x40ac <vfprintf+0xb0>
    4080:	83 2d       	mov	r24, r3
    4082:	82 60       	ori	r24, 0x02	; 2
    4084:	38 2e       	mov	r3, r24
    4086:	e3 2d       	mov	r30, r3
    4088:	e4 60       	ori	r30, 0x04	; 4
    408a:	3e 2e       	mov	r3, r30
    408c:	2a c0       	rjmp	.+84     	; 0x40e2 <vfprintf+0xe6>
    408e:	f3 2d       	mov	r31, r3
    4090:	f8 60       	ori	r31, 0x08	; 8
    4092:	1d c0       	rjmp	.+58     	; 0x40ce <vfprintf+0xd2>
    4094:	37 fc       	sbrc	r3, 7
    4096:	2d c0       	rjmp	.+90     	; 0x40f2 <vfprintf+0xf6>
    4098:	20 ed       	ldi	r18, 0xD0	; 208
    409a:	28 0f       	add	r18, r24
    409c:	2a 30       	cpi	r18, 0x0A	; 10
    409e:	40 f0       	brcs	.+16     	; 0x40b0 <vfprintf+0xb4>
    40a0:	8e 32       	cpi	r24, 0x2E	; 46
    40a2:	b9 f4       	brne	.+46     	; 0x40d2 <vfprintf+0xd6>
    40a4:	36 fc       	sbrc	r3, 6
    40a6:	81 c1       	rjmp	.+770    	; 0x43aa <vfprintf+0x3ae>
    40a8:	23 2d       	mov	r18, r3
    40aa:	20 64       	ori	r18, 0x40	; 64
    40ac:	32 2e       	mov	r3, r18
    40ae:	19 c0       	rjmp	.+50     	; 0x40e2 <vfprintf+0xe6>
    40b0:	36 fe       	sbrs	r3, 6
    40b2:	06 c0       	rjmp	.+12     	; 0x40c0 <vfprintf+0xc4>
    40b4:	8a e0       	ldi	r24, 0x0A	; 10
    40b6:	98 9e       	mul	r9, r24
    40b8:	20 0d       	add	r18, r0
    40ba:	11 24       	eor	r1, r1
    40bc:	92 2e       	mov	r9, r18
    40be:	11 c0       	rjmp	.+34     	; 0x40e2 <vfprintf+0xe6>
    40c0:	ea e0       	ldi	r30, 0x0A	; 10
    40c2:	2e 9e       	mul	r2, r30
    40c4:	20 0d       	add	r18, r0
    40c6:	11 24       	eor	r1, r1
    40c8:	22 2e       	mov	r2, r18
    40ca:	f3 2d       	mov	r31, r3
    40cc:	f0 62       	ori	r31, 0x20	; 32
    40ce:	3f 2e       	mov	r3, r31
    40d0:	08 c0       	rjmp	.+16     	; 0x40e2 <vfprintf+0xe6>
    40d2:	8c 36       	cpi	r24, 0x6C	; 108
    40d4:	21 f4       	brne	.+8      	; 0x40de <vfprintf+0xe2>
    40d6:	83 2d       	mov	r24, r3
    40d8:	80 68       	ori	r24, 0x80	; 128
    40da:	38 2e       	mov	r3, r24
    40dc:	02 c0       	rjmp	.+4      	; 0x40e2 <vfprintf+0xe6>
    40de:	88 36       	cpi	r24, 0x68	; 104
    40e0:	41 f4       	brne	.+16     	; 0x40f2 <vfprintf+0xf6>
    40e2:	f7 01       	movw	r30, r14
    40e4:	93 fd       	sbrc	r25, 3
    40e6:	85 91       	lpm	r24, Z+
    40e8:	93 ff       	sbrs	r25, 3
    40ea:	81 91       	ld	r24, Z+
    40ec:	7f 01       	movw	r14, r30
    40ee:	81 11       	cpse	r24, r1
    40f0:	b3 cf       	rjmp	.-154    	; 0x4058 <vfprintf+0x5c>
    40f2:	98 2f       	mov	r25, r24
    40f4:	9f 7d       	andi	r25, 0xDF	; 223
    40f6:	95 54       	subi	r25, 0x45	; 69
    40f8:	93 30       	cpi	r25, 0x03	; 3
    40fa:	28 f4       	brcc	.+10     	; 0x4106 <vfprintf+0x10a>
    40fc:	0c 5f       	subi	r16, 0xFC	; 252
    40fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4100:	9f e3       	ldi	r25, 0x3F	; 63
    4102:	99 83       	std	Y+1, r25	; 0x01
    4104:	0d c0       	rjmp	.+26     	; 0x4120 <vfprintf+0x124>
    4106:	83 36       	cpi	r24, 0x63	; 99
    4108:	31 f0       	breq	.+12     	; 0x4116 <vfprintf+0x11a>
    410a:	83 37       	cpi	r24, 0x73	; 115
    410c:	71 f0       	breq	.+28     	; 0x412a <vfprintf+0x12e>
    410e:	83 35       	cpi	r24, 0x53	; 83
    4110:	09 f0       	breq	.+2      	; 0x4114 <vfprintf+0x118>
    4112:	59 c0       	rjmp	.+178    	; 0x41c6 <vfprintf+0x1ca>
    4114:	21 c0       	rjmp	.+66     	; 0x4158 <vfprintf+0x15c>
    4116:	f8 01       	movw	r30, r16
    4118:	80 81       	ld	r24, Z
    411a:	89 83       	std	Y+1, r24	; 0x01
    411c:	0e 5f       	subi	r16, 0xFE	; 254
    411e:	1f 4f       	sbci	r17, 0xFF	; 255
    4120:	88 24       	eor	r8, r8
    4122:	83 94       	inc	r8
    4124:	91 2c       	mov	r9, r1
    4126:	53 01       	movw	r10, r6
    4128:	13 c0       	rjmp	.+38     	; 0x4150 <vfprintf+0x154>
    412a:	28 01       	movw	r4, r16
    412c:	f2 e0       	ldi	r31, 0x02	; 2
    412e:	4f 0e       	add	r4, r31
    4130:	51 1c       	adc	r5, r1
    4132:	f8 01       	movw	r30, r16
    4134:	a0 80       	ld	r10, Z
    4136:	b1 80       	ldd	r11, Z+1	; 0x01
    4138:	36 fe       	sbrs	r3, 6
    413a:	03 c0       	rjmp	.+6      	; 0x4142 <vfprintf+0x146>
    413c:	69 2d       	mov	r22, r9
    413e:	70 e0       	ldi	r23, 0x00	; 0
    4140:	02 c0       	rjmp	.+4      	; 0x4146 <vfprintf+0x14a>
    4142:	6f ef       	ldi	r22, 0xFF	; 255
    4144:	7f ef       	ldi	r23, 0xFF	; 255
    4146:	c5 01       	movw	r24, r10
    4148:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <strnlen>
    414c:	4c 01       	movw	r8, r24
    414e:	82 01       	movw	r16, r4
    4150:	f3 2d       	mov	r31, r3
    4152:	ff 77       	andi	r31, 0x7F	; 127
    4154:	3f 2e       	mov	r3, r31
    4156:	16 c0       	rjmp	.+44     	; 0x4184 <vfprintf+0x188>
    4158:	28 01       	movw	r4, r16
    415a:	22 e0       	ldi	r18, 0x02	; 2
    415c:	42 0e       	add	r4, r18
    415e:	51 1c       	adc	r5, r1
    4160:	f8 01       	movw	r30, r16
    4162:	a0 80       	ld	r10, Z
    4164:	b1 80       	ldd	r11, Z+1	; 0x01
    4166:	36 fe       	sbrs	r3, 6
    4168:	03 c0       	rjmp	.+6      	; 0x4170 <vfprintf+0x174>
    416a:	69 2d       	mov	r22, r9
    416c:	70 e0       	ldi	r23, 0x00	; 0
    416e:	02 c0       	rjmp	.+4      	; 0x4174 <vfprintf+0x178>
    4170:	6f ef       	ldi	r22, 0xFF	; 255
    4172:	7f ef       	ldi	r23, 0xFF	; 255
    4174:	c5 01       	movw	r24, r10
    4176:	0e 94 df 21 	call	0x43be	; 0x43be <strnlen_P>
    417a:	4c 01       	movw	r8, r24
    417c:	f3 2d       	mov	r31, r3
    417e:	f0 68       	ori	r31, 0x80	; 128
    4180:	3f 2e       	mov	r3, r31
    4182:	82 01       	movw	r16, r4
    4184:	33 fc       	sbrc	r3, 3
    4186:	1b c0       	rjmp	.+54     	; 0x41be <vfprintf+0x1c2>
    4188:	82 2d       	mov	r24, r2
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	88 16       	cp	r8, r24
    418e:	99 06       	cpc	r9, r25
    4190:	b0 f4       	brcc	.+44     	; 0x41be <vfprintf+0x1c2>
    4192:	b6 01       	movw	r22, r12
    4194:	80 e2       	ldi	r24, 0x20	; 32
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	0e 94 05 22 	call	0x440a	; 0x440a <fputc>
    419c:	2a 94       	dec	r2
    419e:	f4 cf       	rjmp	.-24     	; 0x4188 <vfprintf+0x18c>
    41a0:	f5 01       	movw	r30, r10
    41a2:	37 fc       	sbrc	r3, 7
    41a4:	85 91       	lpm	r24, Z+
    41a6:	37 fe       	sbrs	r3, 7
    41a8:	81 91       	ld	r24, Z+
    41aa:	5f 01       	movw	r10, r30
    41ac:	b6 01       	movw	r22, r12
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	0e 94 05 22 	call	0x440a	; 0x440a <fputc>
    41b4:	21 10       	cpse	r2, r1
    41b6:	2a 94       	dec	r2
    41b8:	21 e0       	ldi	r18, 0x01	; 1
    41ba:	82 1a       	sub	r8, r18
    41bc:	91 08       	sbc	r9, r1
    41be:	81 14       	cp	r8, r1
    41c0:	91 04       	cpc	r9, r1
    41c2:	71 f7       	brne	.-36     	; 0x41a0 <vfprintf+0x1a4>
    41c4:	e8 c0       	rjmp	.+464    	; 0x4396 <vfprintf+0x39a>
    41c6:	84 36       	cpi	r24, 0x64	; 100
    41c8:	11 f0       	breq	.+4      	; 0x41ce <vfprintf+0x1d2>
    41ca:	89 36       	cpi	r24, 0x69	; 105
    41cc:	41 f5       	brne	.+80     	; 0x421e <vfprintf+0x222>
    41ce:	f8 01       	movw	r30, r16
    41d0:	37 fe       	sbrs	r3, 7
    41d2:	07 c0       	rjmp	.+14     	; 0x41e2 <vfprintf+0x1e6>
    41d4:	60 81       	ld	r22, Z
    41d6:	71 81       	ldd	r23, Z+1	; 0x01
    41d8:	82 81       	ldd	r24, Z+2	; 0x02
    41da:	93 81       	ldd	r25, Z+3	; 0x03
    41dc:	0c 5f       	subi	r16, 0xFC	; 252
    41de:	1f 4f       	sbci	r17, 0xFF	; 255
    41e0:	08 c0       	rjmp	.+16     	; 0x41f2 <vfprintf+0x1f6>
    41e2:	60 81       	ld	r22, Z
    41e4:	71 81       	ldd	r23, Z+1	; 0x01
    41e6:	07 2e       	mov	r0, r23
    41e8:	00 0c       	add	r0, r0
    41ea:	88 0b       	sbc	r24, r24
    41ec:	99 0b       	sbc	r25, r25
    41ee:	0e 5f       	subi	r16, 0xFE	; 254
    41f0:	1f 4f       	sbci	r17, 0xFF	; 255
    41f2:	f3 2d       	mov	r31, r3
    41f4:	ff 76       	andi	r31, 0x6F	; 111
    41f6:	3f 2e       	mov	r3, r31
    41f8:	97 ff       	sbrs	r25, 7
    41fa:	09 c0       	rjmp	.+18     	; 0x420e <vfprintf+0x212>
    41fc:	90 95       	com	r25
    41fe:	80 95       	com	r24
    4200:	70 95       	com	r23
    4202:	61 95       	neg	r22
    4204:	7f 4f       	sbci	r23, 0xFF	; 255
    4206:	8f 4f       	sbci	r24, 0xFF	; 255
    4208:	9f 4f       	sbci	r25, 0xFF	; 255
    420a:	f0 68       	ori	r31, 0x80	; 128
    420c:	3f 2e       	mov	r3, r31
    420e:	2a e0       	ldi	r18, 0x0A	; 10
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	a3 01       	movw	r20, r6
    4214:	0e 94 41 22 	call	0x4482	; 0x4482 <__ultoa_invert>
    4218:	88 2e       	mov	r8, r24
    421a:	86 18       	sub	r8, r6
    421c:	45 c0       	rjmp	.+138    	; 0x42a8 <vfprintf+0x2ac>
    421e:	85 37       	cpi	r24, 0x75	; 117
    4220:	31 f4       	brne	.+12     	; 0x422e <vfprintf+0x232>
    4222:	23 2d       	mov	r18, r3
    4224:	2f 7e       	andi	r18, 0xEF	; 239
    4226:	b2 2e       	mov	r11, r18
    4228:	2a e0       	ldi	r18, 0x0A	; 10
    422a:	30 e0       	ldi	r19, 0x00	; 0
    422c:	25 c0       	rjmp	.+74     	; 0x4278 <vfprintf+0x27c>
    422e:	93 2d       	mov	r25, r3
    4230:	99 7f       	andi	r25, 0xF9	; 249
    4232:	b9 2e       	mov	r11, r25
    4234:	8f 36       	cpi	r24, 0x6F	; 111
    4236:	c1 f0       	breq	.+48     	; 0x4268 <vfprintf+0x26c>
    4238:	18 f4       	brcc	.+6      	; 0x4240 <vfprintf+0x244>
    423a:	88 35       	cpi	r24, 0x58	; 88
    423c:	79 f0       	breq	.+30     	; 0x425c <vfprintf+0x260>
    423e:	b5 c0       	rjmp	.+362    	; 0x43aa <vfprintf+0x3ae>
    4240:	80 37       	cpi	r24, 0x70	; 112
    4242:	19 f0       	breq	.+6      	; 0x424a <vfprintf+0x24e>
    4244:	88 37       	cpi	r24, 0x78	; 120
    4246:	21 f0       	breq	.+8      	; 0x4250 <vfprintf+0x254>
    4248:	b0 c0       	rjmp	.+352    	; 0x43aa <vfprintf+0x3ae>
    424a:	e9 2f       	mov	r30, r25
    424c:	e0 61       	ori	r30, 0x10	; 16
    424e:	be 2e       	mov	r11, r30
    4250:	b4 fe       	sbrs	r11, 4
    4252:	0d c0       	rjmp	.+26     	; 0x426e <vfprintf+0x272>
    4254:	fb 2d       	mov	r31, r11
    4256:	f4 60       	ori	r31, 0x04	; 4
    4258:	bf 2e       	mov	r11, r31
    425a:	09 c0       	rjmp	.+18     	; 0x426e <vfprintf+0x272>
    425c:	34 fe       	sbrs	r3, 4
    425e:	0a c0       	rjmp	.+20     	; 0x4274 <vfprintf+0x278>
    4260:	29 2f       	mov	r18, r25
    4262:	26 60       	ori	r18, 0x06	; 6
    4264:	b2 2e       	mov	r11, r18
    4266:	06 c0       	rjmp	.+12     	; 0x4274 <vfprintf+0x278>
    4268:	28 e0       	ldi	r18, 0x08	; 8
    426a:	30 e0       	ldi	r19, 0x00	; 0
    426c:	05 c0       	rjmp	.+10     	; 0x4278 <vfprintf+0x27c>
    426e:	20 e1       	ldi	r18, 0x10	; 16
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	02 c0       	rjmp	.+4      	; 0x4278 <vfprintf+0x27c>
    4274:	20 e1       	ldi	r18, 0x10	; 16
    4276:	32 e0       	ldi	r19, 0x02	; 2
    4278:	f8 01       	movw	r30, r16
    427a:	b7 fe       	sbrs	r11, 7
    427c:	07 c0       	rjmp	.+14     	; 0x428c <vfprintf+0x290>
    427e:	60 81       	ld	r22, Z
    4280:	71 81       	ldd	r23, Z+1	; 0x01
    4282:	82 81       	ldd	r24, Z+2	; 0x02
    4284:	93 81       	ldd	r25, Z+3	; 0x03
    4286:	0c 5f       	subi	r16, 0xFC	; 252
    4288:	1f 4f       	sbci	r17, 0xFF	; 255
    428a:	06 c0       	rjmp	.+12     	; 0x4298 <vfprintf+0x29c>
    428c:	60 81       	ld	r22, Z
    428e:	71 81       	ldd	r23, Z+1	; 0x01
    4290:	80 e0       	ldi	r24, 0x00	; 0
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	0e 5f       	subi	r16, 0xFE	; 254
    4296:	1f 4f       	sbci	r17, 0xFF	; 255
    4298:	a3 01       	movw	r20, r6
    429a:	0e 94 41 22 	call	0x4482	; 0x4482 <__ultoa_invert>
    429e:	88 2e       	mov	r8, r24
    42a0:	86 18       	sub	r8, r6
    42a2:	fb 2d       	mov	r31, r11
    42a4:	ff 77       	andi	r31, 0x7F	; 127
    42a6:	3f 2e       	mov	r3, r31
    42a8:	36 fe       	sbrs	r3, 6
    42aa:	0d c0       	rjmp	.+26     	; 0x42c6 <vfprintf+0x2ca>
    42ac:	23 2d       	mov	r18, r3
    42ae:	2e 7f       	andi	r18, 0xFE	; 254
    42b0:	a2 2e       	mov	r10, r18
    42b2:	89 14       	cp	r8, r9
    42b4:	58 f4       	brcc	.+22     	; 0x42cc <vfprintf+0x2d0>
    42b6:	34 fe       	sbrs	r3, 4
    42b8:	0b c0       	rjmp	.+22     	; 0x42d0 <vfprintf+0x2d4>
    42ba:	32 fc       	sbrc	r3, 2
    42bc:	09 c0       	rjmp	.+18     	; 0x42d0 <vfprintf+0x2d4>
    42be:	83 2d       	mov	r24, r3
    42c0:	8e 7e       	andi	r24, 0xEE	; 238
    42c2:	a8 2e       	mov	r10, r24
    42c4:	05 c0       	rjmp	.+10     	; 0x42d0 <vfprintf+0x2d4>
    42c6:	b8 2c       	mov	r11, r8
    42c8:	a3 2c       	mov	r10, r3
    42ca:	03 c0       	rjmp	.+6      	; 0x42d2 <vfprintf+0x2d6>
    42cc:	b8 2c       	mov	r11, r8
    42ce:	01 c0       	rjmp	.+2      	; 0x42d2 <vfprintf+0x2d6>
    42d0:	b9 2c       	mov	r11, r9
    42d2:	a4 fe       	sbrs	r10, 4
    42d4:	0f c0       	rjmp	.+30     	; 0x42f4 <vfprintf+0x2f8>
    42d6:	fe 01       	movw	r30, r28
    42d8:	e8 0d       	add	r30, r8
    42da:	f1 1d       	adc	r31, r1
    42dc:	80 81       	ld	r24, Z
    42de:	80 33       	cpi	r24, 0x30	; 48
    42e0:	21 f4       	brne	.+8      	; 0x42ea <vfprintf+0x2ee>
    42e2:	9a 2d       	mov	r25, r10
    42e4:	99 7e       	andi	r25, 0xE9	; 233
    42e6:	a9 2e       	mov	r10, r25
    42e8:	09 c0       	rjmp	.+18     	; 0x42fc <vfprintf+0x300>
    42ea:	a2 fe       	sbrs	r10, 2
    42ec:	06 c0       	rjmp	.+12     	; 0x42fa <vfprintf+0x2fe>
    42ee:	b3 94       	inc	r11
    42f0:	b3 94       	inc	r11
    42f2:	04 c0       	rjmp	.+8      	; 0x42fc <vfprintf+0x300>
    42f4:	8a 2d       	mov	r24, r10
    42f6:	86 78       	andi	r24, 0x86	; 134
    42f8:	09 f0       	breq	.+2      	; 0x42fc <vfprintf+0x300>
    42fa:	b3 94       	inc	r11
    42fc:	a3 fc       	sbrc	r10, 3
    42fe:	11 c0       	rjmp	.+34     	; 0x4322 <vfprintf+0x326>
    4300:	a0 fe       	sbrs	r10, 0
    4302:	06 c0       	rjmp	.+12     	; 0x4310 <vfprintf+0x314>
    4304:	b2 14       	cp	r11, r2
    4306:	88 f4       	brcc	.+34     	; 0x432a <vfprintf+0x32e>
    4308:	28 0c       	add	r2, r8
    430a:	92 2c       	mov	r9, r2
    430c:	9b 18       	sub	r9, r11
    430e:	0e c0       	rjmp	.+28     	; 0x432c <vfprintf+0x330>
    4310:	b2 14       	cp	r11, r2
    4312:	60 f4       	brcc	.+24     	; 0x432c <vfprintf+0x330>
    4314:	b6 01       	movw	r22, r12
    4316:	80 e2       	ldi	r24, 0x20	; 32
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	0e 94 05 22 	call	0x440a	; 0x440a <fputc>
    431e:	b3 94       	inc	r11
    4320:	f7 cf       	rjmp	.-18     	; 0x4310 <vfprintf+0x314>
    4322:	b2 14       	cp	r11, r2
    4324:	18 f4       	brcc	.+6      	; 0x432c <vfprintf+0x330>
    4326:	2b 18       	sub	r2, r11
    4328:	02 c0       	rjmp	.+4      	; 0x432e <vfprintf+0x332>
    432a:	98 2c       	mov	r9, r8
    432c:	21 2c       	mov	r2, r1
    432e:	a4 fe       	sbrs	r10, 4
    4330:	10 c0       	rjmp	.+32     	; 0x4352 <vfprintf+0x356>
    4332:	b6 01       	movw	r22, r12
    4334:	80 e3       	ldi	r24, 0x30	; 48
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	0e 94 05 22 	call	0x440a	; 0x440a <fputc>
    433c:	a2 fe       	sbrs	r10, 2
    433e:	17 c0       	rjmp	.+46     	; 0x436e <vfprintf+0x372>
    4340:	a1 fc       	sbrc	r10, 1
    4342:	03 c0       	rjmp	.+6      	; 0x434a <vfprintf+0x34e>
    4344:	88 e7       	ldi	r24, 0x78	; 120
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	02 c0       	rjmp	.+4      	; 0x434e <vfprintf+0x352>
    434a:	88 e5       	ldi	r24, 0x58	; 88
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	b6 01       	movw	r22, r12
    4350:	0c c0       	rjmp	.+24     	; 0x436a <vfprintf+0x36e>
    4352:	8a 2d       	mov	r24, r10
    4354:	86 78       	andi	r24, 0x86	; 134
    4356:	59 f0       	breq	.+22     	; 0x436e <vfprintf+0x372>
    4358:	a1 fe       	sbrs	r10, 1
    435a:	02 c0       	rjmp	.+4      	; 0x4360 <vfprintf+0x364>
    435c:	8b e2       	ldi	r24, 0x2B	; 43
    435e:	01 c0       	rjmp	.+2      	; 0x4362 <vfprintf+0x366>
    4360:	80 e2       	ldi	r24, 0x20	; 32
    4362:	a7 fc       	sbrc	r10, 7
    4364:	8d e2       	ldi	r24, 0x2D	; 45
    4366:	b6 01       	movw	r22, r12
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	0e 94 05 22 	call	0x440a	; 0x440a <fputc>
    436e:	89 14       	cp	r8, r9
    4370:	38 f4       	brcc	.+14     	; 0x4380 <vfprintf+0x384>
    4372:	b6 01       	movw	r22, r12
    4374:	80 e3       	ldi	r24, 0x30	; 48
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	0e 94 05 22 	call	0x440a	; 0x440a <fputc>
    437c:	9a 94       	dec	r9
    437e:	f7 cf       	rjmp	.-18     	; 0x436e <vfprintf+0x372>
    4380:	8a 94       	dec	r8
    4382:	f3 01       	movw	r30, r6
    4384:	e8 0d       	add	r30, r8
    4386:	f1 1d       	adc	r31, r1
    4388:	80 81       	ld	r24, Z
    438a:	b6 01       	movw	r22, r12
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	0e 94 05 22 	call	0x440a	; 0x440a <fputc>
    4392:	81 10       	cpse	r8, r1
    4394:	f5 cf       	rjmp	.-22     	; 0x4380 <vfprintf+0x384>
    4396:	22 20       	and	r2, r2
    4398:	09 f4       	brne	.+2      	; 0x439c <vfprintf+0x3a0>
    439a:	42 ce       	rjmp	.-892    	; 0x4020 <vfprintf+0x24>
    439c:	b6 01       	movw	r22, r12
    439e:	80 e2       	ldi	r24, 0x20	; 32
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	0e 94 05 22 	call	0x440a	; 0x440a <fputc>
    43a6:	2a 94       	dec	r2
    43a8:	f6 cf       	rjmp	.-20     	; 0x4396 <vfprintf+0x39a>
    43aa:	f6 01       	movw	r30, r12
    43ac:	86 81       	ldd	r24, Z+6	; 0x06
    43ae:	97 81       	ldd	r25, Z+7	; 0x07
    43b0:	02 c0       	rjmp	.+4      	; 0x43b6 <vfprintf+0x3ba>
    43b2:	8f ef       	ldi	r24, 0xFF	; 255
    43b4:	9f ef       	ldi	r25, 0xFF	; 255
    43b6:	2b 96       	adiw	r28, 0x0b	; 11
    43b8:	e2 e1       	ldi	r30, 0x12	; 18
    43ba:	0c 94 bb 22 	jmp	0x4576	; 0x4576 <__epilogue_restores__>

000043be <strnlen_P>:
    43be:	fc 01       	movw	r30, r24
    43c0:	05 90       	lpm	r0, Z+
    43c2:	61 50       	subi	r22, 0x01	; 1
    43c4:	70 40       	sbci	r23, 0x00	; 0
    43c6:	01 10       	cpse	r0, r1
    43c8:	d8 f7       	brcc	.-10     	; 0x43c0 <strnlen_P+0x2>
    43ca:	80 95       	com	r24
    43cc:	90 95       	com	r25
    43ce:	8e 0f       	add	r24, r30
    43d0:	9f 1f       	adc	r25, r31
    43d2:	08 95       	ret

000043d4 <strnlen>:
    43d4:	fc 01       	movw	r30, r24
    43d6:	61 50       	subi	r22, 0x01	; 1
    43d8:	70 40       	sbci	r23, 0x00	; 0
    43da:	01 90       	ld	r0, Z+
    43dc:	01 10       	cpse	r0, r1
    43de:	d8 f7       	brcc	.-10     	; 0x43d6 <strnlen+0x2>
    43e0:	80 95       	com	r24
    43e2:	90 95       	com	r25
    43e4:	8e 0f       	add	r24, r30
    43e6:	9f 1f       	adc	r25, r31
    43e8:	08 95       	ret

000043ea <strrev>:
    43ea:	dc 01       	movw	r26, r24
    43ec:	fc 01       	movw	r30, r24
    43ee:	67 2f       	mov	r22, r23
    43f0:	71 91       	ld	r23, Z+
    43f2:	77 23       	and	r23, r23
    43f4:	e1 f7       	brne	.-8      	; 0x43ee <strrev+0x4>
    43f6:	32 97       	sbiw	r30, 0x02	; 2
    43f8:	04 c0       	rjmp	.+8      	; 0x4402 <strrev+0x18>
    43fa:	7c 91       	ld	r23, X
    43fc:	6d 93       	st	X+, r22
    43fe:	70 83       	st	Z, r23
    4400:	62 91       	ld	r22, -Z
    4402:	ae 17       	cp	r26, r30
    4404:	bf 07       	cpc	r27, r31
    4406:	c8 f3       	brcs	.-14     	; 0x43fa <strrev+0x10>
    4408:	08 95       	ret

0000440a <fputc>:
    440a:	0f 93       	push	r16
    440c:	1f 93       	push	r17
    440e:	cf 93       	push	r28
    4410:	df 93       	push	r29
    4412:	fb 01       	movw	r30, r22
    4414:	23 81       	ldd	r18, Z+3	; 0x03
    4416:	21 fd       	sbrc	r18, 1
    4418:	03 c0       	rjmp	.+6      	; 0x4420 <fputc+0x16>
    441a:	8f ef       	ldi	r24, 0xFF	; 255
    441c:	9f ef       	ldi	r25, 0xFF	; 255
    441e:	2c c0       	rjmp	.+88     	; 0x4478 <fputc+0x6e>
    4420:	22 ff       	sbrs	r18, 2
    4422:	16 c0       	rjmp	.+44     	; 0x4450 <fputc+0x46>
    4424:	46 81       	ldd	r20, Z+6	; 0x06
    4426:	57 81       	ldd	r21, Z+7	; 0x07
    4428:	24 81       	ldd	r18, Z+4	; 0x04
    442a:	35 81       	ldd	r19, Z+5	; 0x05
    442c:	42 17       	cp	r20, r18
    442e:	53 07       	cpc	r21, r19
    4430:	44 f4       	brge	.+16     	; 0x4442 <fputc+0x38>
    4432:	a0 81       	ld	r26, Z
    4434:	b1 81       	ldd	r27, Z+1	; 0x01
    4436:	9d 01       	movw	r18, r26
    4438:	2f 5f       	subi	r18, 0xFF	; 255
    443a:	3f 4f       	sbci	r19, 0xFF	; 255
    443c:	31 83       	std	Z+1, r19	; 0x01
    443e:	20 83       	st	Z, r18
    4440:	8c 93       	st	X, r24
    4442:	26 81       	ldd	r18, Z+6	; 0x06
    4444:	37 81       	ldd	r19, Z+7	; 0x07
    4446:	2f 5f       	subi	r18, 0xFF	; 255
    4448:	3f 4f       	sbci	r19, 0xFF	; 255
    444a:	37 83       	std	Z+7, r19	; 0x07
    444c:	26 83       	std	Z+6, r18	; 0x06
    444e:	14 c0       	rjmp	.+40     	; 0x4478 <fputc+0x6e>
    4450:	8b 01       	movw	r16, r22
    4452:	ec 01       	movw	r28, r24
    4454:	fb 01       	movw	r30, r22
    4456:	00 84       	ldd	r0, Z+8	; 0x08
    4458:	f1 85       	ldd	r31, Z+9	; 0x09
    445a:	e0 2d       	mov	r30, r0
    445c:	09 95       	icall
    445e:	89 2b       	or	r24, r25
    4460:	e1 f6       	brne	.-72     	; 0x441a <fputc+0x10>
    4462:	d8 01       	movw	r26, r16
    4464:	16 96       	adiw	r26, 0x06	; 6
    4466:	8d 91       	ld	r24, X+
    4468:	9c 91       	ld	r25, X
    446a:	17 97       	sbiw	r26, 0x07	; 7
    446c:	01 96       	adiw	r24, 0x01	; 1
    446e:	17 96       	adiw	r26, 0x07	; 7
    4470:	9c 93       	st	X, r25
    4472:	8e 93       	st	-X, r24
    4474:	16 97       	sbiw	r26, 0x06	; 6
    4476:	ce 01       	movw	r24, r28
    4478:	df 91       	pop	r29
    447a:	cf 91       	pop	r28
    447c:	1f 91       	pop	r17
    447e:	0f 91       	pop	r16
    4480:	08 95       	ret

00004482 <__ultoa_invert>:
    4482:	fa 01       	movw	r30, r20
    4484:	aa 27       	eor	r26, r26
    4486:	28 30       	cpi	r18, 0x08	; 8
    4488:	51 f1       	breq	.+84     	; 0x44de <__ultoa_invert+0x5c>
    448a:	20 31       	cpi	r18, 0x10	; 16
    448c:	81 f1       	breq	.+96     	; 0x44ee <__ultoa_invert+0x6c>
    448e:	e8 94       	clt
    4490:	6f 93       	push	r22
    4492:	6e 7f       	andi	r22, 0xFE	; 254
    4494:	6e 5f       	subi	r22, 0xFE	; 254
    4496:	7f 4f       	sbci	r23, 0xFF	; 255
    4498:	8f 4f       	sbci	r24, 0xFF	; 255
    449a:	9f 4f       	sbci	r25, 0xFF	; 255
    449c:	af 4f       	sbci	r26, 0xFF	; 255
    449e:	b1 e0       	ldi	r27, 0x01	; 1
    44a0:	3e d0       	rcall	.+124    	; 0x451e <__ultoa_invert+0x9c>
    44a2:	b4 e0       	ldi	r27, 0x04	; 4
    44a4:	3c d0       	rcall	.+120    	; 0x451e <__ultoa_invert+0x9c>
    44a6:	67 0f       	add	r22, r23
    44a8:	78 1f       	adc	r23, r24
    44aa:	89 1f       	adc	r24, r25
    44ac:	9a 1f       	adc	r25, r26
    44ae:	a1 1d       	adc	r26, r1
    44b0:	68 0f       	add	r22, r24
    44b2:	79 1f       	adc	r23, r25
    44b4:	8a 1f       	adc	r24, r26
    44b6:	91 1d       	adc	r25, r1
    44b8:	a1 1d       	adc	r26, r1
    44ba:	6a 0f       	add	r22, r26
    44bc:	71 1d       	adc	r23, r1
    44be:	81 1d       	adc	r24, r1
    44c0:	91 1d       	adc	r25, r1
    44c2:	a1 1d       	adc	r26, r1
    44c4:	20 d0       	rcall	.+64     	; 0x4506 <__ultoa_invert+0x84>
    44c6:	09 f4       	brne	.+2      	; 0x44ca <__ultoa_invert+0x48>
    44c8:	68 94       	set
    44ca:	3f 91       	pop	r19
    44cc:	2a e0       	ldi	r18, 0x0A	; 10
    44ce:	26 9f       	mul	r18, r22
    44d0:	11 24       	eor	r1, r1
    44d2:	30 19       	sub	r19, r0
    44d4:	30 5d       	subi	r19, 0xD0	; 208
    44d6:	31 93       	st	Z+, r19
    44d8:	de f6       	brtc	.-74     	; 0x4490 <__ultoa_invert+0xe>
    44da:	cf 01       	movw	r24, r30
    44dc:	08 95       	ret
    44de:	46 2f       	mov	r20, r22
    44e0:	47 70       	andi	r20, 0x07	; 7
    44e2:	40 5d       	subi	r20, 0xD0	; 208
    44e4:	41 93       	st	Z+, r20
    44e6:	b3 e0       	ldi	r27, 0x03	; 3
    44e8:	0f d0       	rcall	.+30     	; 0x4508 <__ultoa_invert+0x86>
    44ea:	c9 f7       	brne	.-14     	; 0x44de <__ultoa_invert+0x5c>
    44ec:	f6 cf       	rjmp	.-20     	; 0x44da <__ultoa_invert+0x58>
    44ee:	46 2f       	mov	r20, r22
    44f0:	4f 70       	andi	r20, 0x0F	; 15
    44f2:	40 5d       	subi	r20, 0xD0	; 208
    44f4:	4a 33       	cpi	r20, 0x3A	; 58
    44f6:	18 f0       	brcs	.+6      	; 0x44fe <__ultoa_invert+0x7c>
    44f8:	49 5d       	subi	r20, 0xD9	; 217
    44fa:	31 fd       	sbrc	r19, 1
    44fc:	40 52       	subi	r20, 0x20	; 32
    44fe:	41 93       	st	Z+, r20
    4500:	02 d0       	rcall	.+4      	; 0x4506 <__ultoa_invert+0x84>
    4502:	a9 f7       	brne	.-22     	; 0x44ee <__ultoa_invert+0x6c>
    4504:	ea cf       	rjmp	.-44     	; 0x44da <__ultoa_invert+0x58>
    4506:	b4 e0       	ldi	r27, 0x04	; 4
    4508:	a6 95       	lsr	r26
    450a:	97 95       	ror	r25
    450c:	87 95       	ror	r24
    450e:	77 95       	ror	r23
    4510:	67 95       	ror	r22
    4512:	ba 95       	dec	r27
    4514:	c9 f7       	brne	.-14     	; 0x4508 <__ultoa_invert+0x86>
    4516:	00 97       	sbiw	r24, 0x00	; 0
    4518:	61 05       	cpc	r22, r1
    451a:	71 05       	cpc	r23, r1
    451c:	08 95       	ret
    451e:	9b 01       	movw	r18, r22
    4520:	ac 01       	movw	r20, r24
    4522:	0a 2e       	mov	r0, r26
    4524:	06 94       	lsr	r0
    4526:	57 95       	ror	r21
    4528:	47 95       	ror	r20
    452a:	37 95       	ror	r19
    452c:	27 95       	ror	r18
    452e:	ba 95       	dec	r27
    4530:	c9 f7       	brne	.-14     	; 0x4524 <__ultoa_invert+0xa2>
    4532:	62 0f       	add	r22, r18
    4534:	73 1f       	adc	r23, r19
    4536:	84 1f       	adc	r24, r20
    4538:	95 1f       	adc	r25, r21
    453a:	a0 1d       	adc	r26, r0
    453c:	08 95       	ret

0000453e <__prologue_saves__>:
    453e:	2f 92       	push	r2
    4540:	3f 92       	push	r3
    4542:	4f 92       	push	r4
    4544:	5f 92       	push	r5
    4546:	6f 92       	push	r6
    4548:	7f 92       	push	r7
    454a:	8f 92       	push	r8
    454c:	9f 92       	push	r9
    454e:	af 92       	push	r10
    4550:	bf 92       	push	r11
    4552:	cf 92       	push	r12
    4554:	df 92       	push	r13
    4556:	ef 92       	push	r14
    4558:	ff 92       	push	r15
    455a:	0f 93       	push	r16
    455c:	1f 93       	push	r17
    455e:	cf 93       	push	r28
    4560:	df 93       	push	r29
    4562:	cd b7       	in	r28, 0x3d	; 61
    4564:	de b7       	in	r29, 0x3e	; 62
    4566:	ca 1b       	sub	r28, r26
    4568:	db 0b       	sbc	r29, r27
    456a:	0f b6       	in	r0, 0x3f	; 63
    456c:	f8 94       	cli
    456e:	de bf       	out	0x3e, r29	; 62
    4570:	0f be       	out	0x3f, r0	; 63
    4572:	cd bf       	out	0x3d, r28	; 61
    4574:	09 94       	ijmp

00004576 <__epilogue_restores__>:
    4576:	2a 88       	ldd	r2, Y+18	; 0x12
    4578:	39 88       	ldd	r3, Y+17	; 0x11
    457a:	48 88       	ldd	r4, Y+16	; 0x10
    457c:	5f 84       	ldd	r5, Y+15	; 0x0f
    457e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4580:	7d 84       	ldd	r7, Y+13	; 0x0d
    4582:	8c 84       	ldd	r8, Y+12	; 0x0c
    4584:	9b 84       	ldd	r9, Y+11	; 0x0b
    4586:	aa 84       	ldd	r10, Y+10	; 0x0a
    4588:	b9 84       	ldd	r11, Y+9	; 0x09
    458a:	c8 84       	ldd	r12, Y+8	; 0x08
    458c:	df 80       	ldd	r13, Y+7	; 0x07
    458e:	ee 80       	ldd	r14, Y+6	; 0x06
    4590:	fd 80       	ldd	r15, Y+5	; 0x05
    4592:	0c 81       	ldd	r16, Y+4	; 0x04
    4594:	1b 81       	ldd	r17, Y+3	; 0x03
    4596:	aa 81       	ldd	r26, Y+2	; 0x02
    4598:	b9 81       	ldd	r27, Y+1	; 0x01
    459a:	ce 0f       	add	r28, r30
    459c:	d1 1d       	adc	r29, r1
    459e:	0f b6       	in	r0, 0x3f	; 63
    45a0:	f8 94       	cli
    45a2:	de bf       	out	0x3e, r29	; 62
    45a4:	0f be       	out	0x3f, r0	; 63
    45a6:	cd bf       	out	0x3d, r28	; 61
    45a8:	ed 01       	movw	r28, r26
    45aa:	08 95       	ret

000045ac <_exit>:
    45ac:	f8 94       	cli

000045ae <__stop_program>:
    45ae:	ff cf       	rjmp	.-2      	; 0x45ae <__stop_program>
